package it.unibo.generator;

import it.unibo.generator.FPMLGenerator;
import org.eclipse.xtend2.lib.StringConcatenation;

@SuppressWarnings("all")
public class PrimitiveGenerator {
  public CharSequence compilePure() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    String _basePackageJava = FPMLGenerator.basePackageJava();
    _builder.append(_basePackageJava, "");
    _builder.append("Pure;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import fj.*;");
    _builder.newLine();
    _builder.append("import fj.data.*;");
    _builder.newLine();
    _builder.append("public class Primitives {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static F<Integer, Integer> plus(int x) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return (Integer y) -> x + y;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static F<String, String> plus(String x) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return (String y) -> x + y;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static F<Integer, Integer> minus(int x) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return (Integer y) -> x - y;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static F<Integer, Integer> times(int x) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return (Integer y) -> x * y;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static F<Integer, Integer> mod(int x) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return (Integer y) -> x % y;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static Integer intPow(Integer x) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return x * x;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static String intToString(Integer x) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return String.valueOf(x);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static <A,B> A leftAlgebraic(P2<A,B> pair){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return pair._1();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static <A,B> B rightAlgebraic(P2<A,B> pair){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return pair._2();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static <A,B> A leftAlgebraic(Either<A,B> pair){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return pair.left().value();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static <A,B> B rightAlgebraic(Either<A,B> pair){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return pair.right().value();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static <A,B> Boolean isLeft(Either<A,B> pair) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return pair.isLeft();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static <A,B> Boolean isRight(Either<A,B> pair) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return pair.isRight();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static <A> F<A, Boolean> equalsCurrying(A x){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return (A y) -> x == y;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static F<String, Boolean> equalsCurrying(String x){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return (String y) -> x.equals(y);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static F<Integer, Boolean> minorEquals(Integer x) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return (Integer y) -> x <= y;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static F<Integer, Boolean> majorEquals(Integer x) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return (Integer y) -> x >= y;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static F<Integer, Boolean> minor(Integer x) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return (Integer y) -> x < y;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static F<Integer, Boolean> major(Integer x) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return (Integer y) -> x > y;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static F<Boolean, Boolean> logicAnd(Boolean b) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return (Boolean c) -> b && c;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static F<Boolean, Boolean> logicOr(Boolean b) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return (Boolean c) -> b || c;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static Boolean logicNot(Boolean b) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return !b;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static <A> A pureIf(Boolean condition, A thenExpression, A elseExpression) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (condition) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return thenExpression;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return elseExpression;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static <A,B> Either<A,B> pureIfEither(Boolean condition, A thenExpression, B elseExpression) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (condition) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return Either.left(thenExpression);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return Either.right(elseExpression);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileEffectFull() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    String _basePackageJava = FPMLGenerator.basePackageJava();
    _builder.append(_basePackageJava, "");
    _builder.append("Effectfull;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import fj.*;");
    _builder.newLine();
    _builder.append("import fj.data.*;");
    _builder.newLine();
    _builder.append("import java.util.Random;");
    _builder.newLine();
    _builder.append("import java.text.SimpleDateFormat;");
    _builder.newLine();
    _builder.append("import java.util.Date;");
    _builder.newLine();
    _builder.append("import java.util.Scanner;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class PrimitivesEffectFull {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static IO<Unit> primitivePrint(String s) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return IOFunctions.stdoutPrintln(s);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("} ");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static IO<Integer> primitiveRandom() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return () -> new Random().nextInt();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static IO<String> primitiveTime() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return IOFunctions.unit(new SimpleDateFormat(\"yyyy/MM/dd HH:mm:ss\").format(new Date()));");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static <A> IO<A> primitiveReturn(A x) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return IOFunctions.unit(x);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static <A,B> A leftAlgebraicIO(P2<A,B> pair){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return pair._1();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static <A,B> B rightAlgebraicIO(P2<A,B> pair){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return pair._2();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static <A,B> A leftAlgebraicIO(Either<A,B> pair){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return pair.left().value();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static <A,B> B rightAlgebraicIO(Either<A,B> pair){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return pair.right().value();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static <A,B> Boolean isLeft(Either<A,B> pair) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return pair.isLeft();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static <A,B> Boolean isRight(Either<A,B> pair) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return pair.isRight();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static <A> A effectFullIf(Boolean condition, A thenExpression, A elseExpression) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (condition) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return thenExpression;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return elseExpression;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static <A,B> Either<A,B> effectFullIfEither(Boolean condition, A thenExpression, B elseExpression) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (condition) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return Either.left(thenExpression);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return Either.right(elseExpression);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static IO<String> getLine() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return () -> {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Scanner scanner = new Scanner(System.in);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("String s = scanner.next();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("scanner.close();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return s;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("};");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
