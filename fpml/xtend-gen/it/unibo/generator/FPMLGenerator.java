/**
 * generated by Xtext 2.9.2
 */
package it.unibo.generator;

import com.google.common.collect.Iterables;
import com.google.common.collect.Iterators;
import it.unibo.fPML.Argument;
import it.unibo.fPML.CompositionFunctionBodyPure;
import it.unibo.fPML.Data;
import it.unibo.fPML.DataType;
import it.unibo.fPML.EffectFullBlock;
import it.unibo.fPML.EmptyFunctionBody;
import it.unibo.fPML.FunctionBodyPure;
import it.unibo.fPML.InitialPureChainElement;
import it.unibo.fPML.IntegerType;
import it.unibo.fPML.PureFunction;
import it.unibo.fPML.PureFunctionBlock;
import it.unibo.fPML.StringType;
import it.unibo.fPML.ValueType;
import java.util.Iterator;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Functions.Function2;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class FPMLGenerator extends AbstractGenerator {
  private final String basePackage = "it/unibo/";
  
  private final String basePackageJava = "it.unibo.";
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    TreeIterator<EObject> _allContents = resource.getAllContents();
    Iterator<PureFunctionBlock> _filter = Iterators.<PureFunctionBlock>filter(_allContents, PureFunctionBlock.class);
    PureFunctionBlock _head = IteratorExtensions.<PureFunctionBlock>head(_filter);
    CharSequence _compile = this.compile(_head);
    fsa.generateFile((this.basePackage + "Pure/Functions.java"), _compile);
    TreeIterator<EObject> _allContents_1 = resource.getAllContents();
    Iterator<EffectFullBlock> _filter_1 = Iterators.<EffectFullBlock>filter(_allContents_1, EffectFullBlock.class);
    EffectFullBlock _head_1 = IteratorExtensions.<EffectFullBlock>head(_filter_1);
    CharSequence _compile_1 = this.compile(_head_1);
    fsa.generateFile((this.basePackage + "Effectfull/Functions.java"), _compile_1);
    TreeIterator<EObject> _allContents_2 = resource.getAllContents();
    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents_2);
    Iterable<Data> _filter_2 = Iterables.<Data>filter(_iterable, Data.class);
    for (final Data e : _filter_2) {
      String _name = e.getName();
      String _plus = ((this.basePackage + "Data/") + _name);
      String _plus_1 = (_plus + ".java");
      CharSequence _compile_2 = this.compile(e);
      fsa.generateFile(_plus_1, _compile_2);
    }
  }
  
  public CharSequence compile(final PureFunctionBlock pfb) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import ");
    _builder.append(this.basePackageJava, "");
    _builder.append("Pure");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("public static class PureFunction {");
    _builder.newLine();
    {
      EList<PureFunction> _features = pfb.getFeatures();
      for(final PureFunction f : _features) {
        _builder.append("\t");
        CharSequence _compile = this.compile(f);
        _builder.append(_compile, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final PureFunction pf) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("public static ");
    ValueType _returnType = pf.getReturnType();
    CharSequence _compile = this.compile(_returnType);
    _builder.append(_compile, "");
    _builder.append(" ");
    String _name = pf.getName();
    _builder.append(_name, "");
    _builder.append(" (");
    Argument _arg = pf.getArg();
    CharSequence _compile_1 = this.compile(_arg);
    _builder.append(_compile_1, "");
    _builder.append("){");
    _builder.newLineIfNotEmpty();
    {
      FunctionBodyPure _functionBody = pf.getFunctionBody();
      if ((_functionBody instanceof EmptyFunctionBody)) {
        _builder.append("\t");
        _builder.append("throw new NotImpletementedException(\"TODO\")");
        _builder.newLine();
      } else {
        FunctionBodyPure _functionBody_1 = pf.getFunctionBody();
        if ((_functionBody_1 instanceof CompositionFunctionBodyPure)) {
          _builder.append("\t");
          FunctionBodyPure _functionBody_2 = pf.getFunctionBody();
          CharSequence _compile_2 = this.compile(((CompositionFunctionBodyPure) _functionBody_2));
          _builder.append(_compile_2, "\t");
          _builder.newLineIfNotEmpty();
        }
      }
    }
    _builder.append("}");
    return _builder;
  }
  
  public CharSequence compile(final CompositionFunctionBodyPure cfbp) {
    StringConcatenation _builder = new StringConcatenation();
    final Function2<String, InitialPureChainElement, String> _function = (String acc, InitialPureChainElement x) -> {
      CharSequence _compile = this.compile(x);
      String _plus = (_compile + acc);
      return (_plus + ")");
    };
    final Function2<String, InitialPureChainElement, String> f = _function;
    _builder.newLineIfNotEmpty();
    EList<InitialPureChainElement> _functionChain = cfbp.getFunctionChain();
    String _fold = IterableExtensions.<InitialPureChainElement, String>fold(_functionChain, "", f);
    _builder.append(_fold, "");
    return _builder;
  }
  
  public CharSequence compile(final InitialPureChainElement e) {
    StringConcatenation _builder = new StringConcatenation();
    {
      if ((e instanceof Data)) {
        String _name = ((Data) e).getName();
        _builder.append(_name, "");
        _builder.append(".getValue()");
        _builder.newLineIfNotEmpty();
      } else {
        String _name_1 = ((PureFunction) e).getName();
        _builder.append(_name_1, "");
      }
    }
    _builder.append("(");
    return _builder;
  }
  
  public CharSequence compile(final ValueType vt) {
    StringConcatenation _builder = new StringConcatenation();
    boolean _matched = false;
    if (vt instanceof DataType) {
      _matched=true;
      Data _type = ((DataType)vt).getType();
      return _type.getName();
    }
    if (!_matched) {
      if (vt instanceof IntegerType) {
        _matched=true;
        return ((IntegerType)vt).getType();
      }
    }
    if (!_matched) {
      if (vt instanceof StringType) {
        _matched=true;
        return ((StringType)vt).getType();
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final Argument arg) {
    StringConcatenation _builder = new StringConcatenation();
    ValueType _type = arg.getType();
    CharSequence _compile = this.compile(_type);
    _builder.append(_compile, "");
    _builder.append(" ");
    String _name = arg.getName();
    _builder.append(_name, "");
    return _builder;
  }
  
  public CharSequence compile(final Data d) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("Data");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final EffectFullBlock efb) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("Effectfull funcitons");
    _builder.newLine();
    return _builder;
  }
}
