/**
 * generated by Xtext 2.9.2
 */
package it.unibo.validation;

import it.unibo.fPML.DataValue;
import it.unibo.fPML.EffectFullFunction;
import it.unibo.fPML.EffectFullFunctionDefinition;
import it.unibo.fPML.FPMLPackage;
import it.unibo.fPML.Function;
import it.unibo.fPML.PrimitiveEffectFullFunction;
import it.unibo.fPML.PrimitivePureFunction;
import it.unibo.fPML.PureFunction;
import it.unibo.fPML.PureFunctionDefinition;
import it.unibo.fPML.PureLambda;
import it.unibo.fPML.Value;
import it.unibo.validation.AbstractFPMLValidator;
import it.unibo.validation.utilitiesFunctions.Checks;
import org.eclipse.xtext.validation.Check;

/**
 * This class contains custom validation rules.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
@SuppressWarnings("all")
public class FPMLValidator extends AbstractFPMLValidator {
  public final static String TYPEMISMATCHFUNCTIONCOMPOSITION = "Type mismatch between the input of one function and the return of another in the function chain";
  
  public final static String TYPEMISMATCHFUNCTIONCOMPOSITIONRETURN = "The return type of the function chain and the outside function doesn\'t match";
  
  public final static String TYPEMISMATCHFUNCTIONCOMPOSITIONARGS = "The argument type of the function is not the same as the first argument of the function chain";
  
  public final static String EFFECTFULLARGUMENTUNITTYPEID = "The Unit Type don\'t require and ID";
  
  public final static String TYPEMISMATCHBETWEENVALUEANDDATA = "The value doesn\'t match the data declaration";
  
  public final static String APPLYFUNCTIONTOWRONGVALUE = "The function is APPLYF has a wrong value type";
  
  @Check
  public Object typeCheck(final Function f) {
    Object _switchResult = null;
    boolean _matched = false;
    if (f instanceof PureFunction) {
      _matched=true;
      Object _switchResult_1 = null;
      boolean _matched_1 = false;
      if (f instanceof Value) {
        _matched_1=true;
        this.typeCheck(((Value) f));
      }
      if (!_matched_1) {
        if (f instanceof PureLambda) {
          _matched_1=true;
          this.typeCheck(((PureLambda) f));
        }
      }
      if (!_matched_1) {
        if (f instanceof PrimitivePureFunction) {
          _matched_1=true;
          _switchResult_1 = this.typeCheck(((PrimitivePureFunction) f));
        }
      }
      if (!_matched_1) {
        if (f instanceof PureFunctionDefinition) {
          _matched_1=true;
          this.typeCheck(((PureFunctionDefinition) f));
        }
      }
      _switchResult = _switchResult_1;
    }
    if (!_matched) {
      if (f instanceof EffectFullFunction) {
        _matched=true;
        Object _switchResult_1 = null;
        boolean _matched_1 = false;
        if (f instanceof EffectFullFunctionDefinition) {
          _matched_1=true;
          _switchResult_1 = this.typeCheck(((EffectFullFunctionDefinition) f));
        }
        if (!_matched_1) {
          if (f instanceof PrimitiveEffectFullFunction) {
            _matched_1=true;
            _switchResult_1 = this.typeCheck(((PrimitiveEffectFullFunction) f));
          }
        }
        _switchResult = _switchResult_1;
      }
    }
    return _switchResult;
  }
  
  public void typeCheck(final Value v) {
    if (((v.getValue() instanceof DataValue) && 
      (!Checks.DataAndValue(((DataValue) v.getValue()).getValue(), ((DataValue) v.getValue()).getType().getContent())))) {
      this.error(FPMLValidator.TYPEMISMATCHBETWEENVALUEANDDATA, FPMLPackage.Literals.VALUE__VALUE);
    }
  }
  
  public void typeCheck(final PureLambda l) {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method pureLambda(PureLambda) is undefined for the type Class<Checks>"
      + "\n! cannot be resolved");
  }
  
  public Object typeCheck(final PrimitivePureFunction p) {
    return null;
  }
  
  public void typeCheck(final PureFunctionDefinition f) {
    boolean _functionReturnType = Checks.functionReturnType(f);
    boolean _not = (!_functionReturnType);
    if (_not) {
      this.error(FPMLValidator.TYPEMISMATCHFUNCTIONCOMPOSITIONRETURN, FPMLPackage.Literals.PURE_FUNCTION_DEFINITION__RETURN_TYPE);
    }
  }
  
  public Object typeCheck(final EffectFullFunctionDefinition f) {
    return null;
  }
  
  public Object typeCheck(final PrimitiveEffectFullFunction p) {
    return null;
  }
}
