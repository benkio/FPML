/**
 * generated by Xtext 2.9.2
 */
package it.unibo.validation;

import com.google.common.base.Objects;
import it.unibo.fPML.AdtType;
import it.unibo.fPML.AdtValue;
import it.unibo.fPML.ChainElement;
import it.unibo.fPML.CompositionFunctionBodyEffect;
import it.unibo.fPML.CompositionFunctionBodyEffectFullFactor;
import it.unibo.fPML.CompositionFunctionBodyPure;
import it.unibo.fPML.CompositionFunctionBodyPureFactor;
import it.unibo.fPML.Data;
import it.unibo.fPML.DataValue;
import it.unibo.fPML.EffectFullArgument;
import it.unibo.fPML.EffectFullFunctionDefinition;
import it.unibo.fPML.EffectFullLambda;
import it.unibo.fPML.FPMLPackage;
import it.unibo.fPML.FunctionBodyEffectFull;
import it.unibo.fPML.FunctionBodyPure;
import it.unibo.fPML.MainFunc;
import it.unibo.fPML.PureFunctionDefinition;
import it.unibo.fPML.PureLambda;
import it.unibo.fPML.ReturnEffectFullFunction;
import it.unibo.fPML.ReturnPureFunction;
import it.unibo.fPML.Type;
import it.unibo.fPML.UnitType;
import it.unibo.fPML.Value;
import it.unibo.fPML.ValueType;
import it.unibo.validation.AbstractFPMLValidator;
import it.unibo.validation.UtilitiesFunctions;
import org.eclipse.emf.common.util.EList;
import org.eclipse.xtext.validation.Check;

/**
 * This class contains custom validation rules.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
@SuppressWarnings("all")
public class FPMLValidator extends AbstractFPMLValidator {
  public final static String TYPEMISMATCHFUNCTIONCOMPOSITION = "Type mismatch between the input of one function and the return of another in the function chain";
  
  public final static String TYPEMISMATCHFUNCTIONCOMPOSITIONRETURN = "The return type of the last function and the outside function doesn\'t match";
  
  public final static String TYPEMISMATCHFUNCTIONCOMPOSITIONLAMBDA = "The first argument of the product type in the lambda function chain doesn\'t match the return type of the function before the lambda";
  
  public final static String TYPEMISMATCHFUNCTIONCOMPOSITIONARGS = "The argument type of the function is not the same as the first argument of the function chain";
  
  public final static String EFFECTFULLARGUMENTUNITTYPEID = "The Unit Type don\'t require and ID";
  
  public final static String TYPEVMISMATCHBETWEENVALUEANDDATA = "The value doesn\'t match the data declaration";
  
  @Check
  public void CompositionFunctionTypePure(final CompositionFunctionBodyPure cfbp) {
    PureFunctionDefinition _firstFunctionDefinitionFromCompositionBodyPure = UtilitiesFunctions.getFirstFunctionDefinitionFromCompositionBodyPure(cfbp);
    ValueType t = UtilitiesFunctions.getReturnType(_firstFunctionDefinitionFromCompositionBodyPure);
    EList<CompositionFunctionBodyPureFactor> _functionChain = cfbp.getFunctionChain();
    for (final CompositionFunctionBodyPureFactor pf : _functionChain) {
      {
        PureFunctionDefinition _functionDefinitionFromPureFactor = UtilitiesFunctions.getFunctionDefinitionFromPureFactor(pf);
        ValueType t1 = UtilitiesFunctions.getArgType(_functionDefinitionFromPureFactor);
        boolean _checkValueTypeEquals = UtilitiesFunctions.checkValueTypeEquals(t, t1);
        boolean _not = (!_checkValueTypeEquals);
        if (_not) {
          this.error(FPMLValidator.TYPEMISMATCHFUNCTIONCOMPOSITION, FPMLPackage.Literals.COMPOSITION_FUNCTION_BODY_PURE__FUNCTION_CHAIN);
        }
        PureFunctionDefinition _functionDefinitionFromPureFactor_1 = UtilitiesFunctions.getFunctionDefinitionFromPureFactor(pf);
        ValueType _returnType = UtilitiesFunctions.getReturnType(_functionDefinitionFromPureFactor_1);
        t = _returnType;
      }
    }
    ReturnPureFunction _returnFunction = cfbp.getReturnFunction();
    boolean _notEquals = (!Objects.equal(_returnFunction, null));
    if (_notEquals) {
      ReturnPureFunction _returnFunction_1 = cfbp.getReturnFunction();
      PureLambda _lambdaFunctionBody = _returnFunction_1.getLambdaFunctionBody();
      if ((_lambdaFunctionBody instanceof CompositionFunctionBodyPure)) {
        ReturnPureFunction _returnFunction_2 = cfbp.getReturnFunction();
        PureLambda _lambdaFunctionBody_1 = _returnFunction_2.getLambdaFunctionBody();
        final PureFunctionDefinition firstElem = UtilitiesFunctions.getFirstFunctionDefinitionFromCompositionBodyPure(((CompositionFunctionBodyPure) _lambdaFunctionBody_1));
        if (((!(firstElem instanceof Value)) && (((firstElem instanceof PureFunctionDefinition) && 
          (!UtilitiesFunctions.isFirstFunctionBodyArgAProductTypeAndMatchTheType(((PureFunctionDefinition) firstElem), t))) || 
          ((firstElem instanceof EffectFullFunctionDefinition) && 
            (!UtilitiesFunctions.isFirstFunctionBodyArgAProductTypeAndMatchTheType(((EffectFullFunctionDefinition) firstElem), t)))))) {
          this.error(FPMLValidator.TYPEMISMATCHFUNCTIONCOMPOSITIONLAMBDA, FPMLPackage.Literals.COMPOSITION_FUNCTION_BODY_PURE__FUNCTION_CHAIN);
        }
      }
    }
  }
  
  @Check
  public void CompositionFunctionTypeEffect(final CompositionFunctionBodyEffect cfbe) {
    ChainElement _firstFunctionDefinitionFromCompositionBodyEffectFull = UtilitiesFunctions.getFirstFunctionDefinitionFromCompositionBodyEffectFull(cfbe);
    Type t = UtilitiesFunctions.getReturnType(_firstFunctionDefinitionFromCompositionBodyEffectFull);
    EList<CompositionFunctionBodyEffectFullFactor> _functionChain = cfbe.getFunctionChain();
    for (final CompositionFunctionBodyEffectFullFactor ef : _functionChain) {
      {
        final ChainElement efElement = UtilitiesFunctions.getFunctionDefinitionFromEffectFullFactor(ef);
        if (((!(efElement instanceof Value)) && (!(efElement instanceof EffectFullArgument)))) {
          final Type t1 = UtilitiesFunctions.getArgType(efElement);
          boolean _checkTypeEquals = UtilitiesFunctions.checkTypeEquals(t, t1);
          boolean _not = (!_checkTypeEquals);
          if (_not) {
            this.error(FPMLValidator.TYPEMISMATCHFUNCTIONCOMPOSITION, FPMLPackage.Literals.COMPOSITION_FUNCTION_BODY_EFFECT__FUNCTION_CHAIN);
          }
        }
        Type _returnType = UtilitiesFunctions.getReturnType(efElement);
        t = _returnType;
      }
    }
    ReturnEffectFullFunction _returnFunction = cfbe.getReturnFunction();
    boolean _notEquals = (!Objects.equal(_returnFunction, null));
    if (_notEquals) {
      ReturnEffectFullFunction _returnFunction_1 = cfbe.getReturnFunction();
      EffectFullLambda _lambdaFunctionBody = _returnFunction_1.getLambdaFunctionBody();
      if ((_lambdaFunctionBody instanceof CompositionFunctionBodyEffect)) {
        ReturnEffectFullFunction _returnFunction_2 = cfbe.getReturnFunction();
        EffectFullLambda _lambdaFunctionBody_1 = _returnFunction_2.getLambdaFunctionBody();
        final ChainElement firstElem = UtilitiesFunctions.getFirstFunctionDefinitionFromCompositionBodyEffectFull(((CompositionFunctionBodyEffect) _lambdaFunctionBody_1));
        if (((!(firstElem instanceof Value)) && (((firstElem instanceof PureFunctionDefinition) && 
          (!UtilitiesFunctions.isFirstFunctionBodyArgAProductTypeAndMatchTheType(((PureFunctionDefinition) firstElem), t))) || 
          ((firstElem instanceof EffectFullFunctionDefinition) && 
            (!UtilitiesFunctions.isFirstFunctionBodyArgAProductTypeAndMatchTheType(((EffectFullFunctionDefinition) firstElem), t)))))) {
          this.error(FPMLValidator.TYPEMISMATCHFUNCTIONCOMPOSITIONLAMBDA, FPMLPackage.Literals.COMPOSITION_FUNCTION_BODY_EFFECT__FUNCTION_CHAIN);
        }
      }
    }
  }
  
  @Check
  public void FunctionCompositionReturnType(final PureFunctionDefinition pf) {
    final FunctionBodyPure rt = pf.getFunctionBody();
    if (((!Objects.equal(rt, null)) && (rt instanceof CompositionFunctionBodyPure))) {
      EList<CompositionFunctionBodyPureFactor> _functionChain = ((CompositionFunctionBodyPure) rt).getFunctionChain();
      EList<CompositionFunctionBodyPureFactor> _functionChain_1 = ((CompositionFunctionBodyPure) rt).getFunctionChain();
      int _size = _functionChain_1.size();
      int _minus = (_size - 1);
      CompositionFunctionBodyPureFactor _get = _functionChain.get(_minus);
      final PureFunctionDefinition rt2 = UtilitiesFunctions.getFunctionDefinitionFromPureFactor(_get);
      ValueType _returnType = pf.getReturnType();
      ValueType _returnType_1 = UtilitiesFunctions.getReturnType(rt2);
      boolean _checkValueTypeEquals = UtilitiesFunctions.checkValueTypeEquals(_returnType, _returnType_1);
      boolean _not = (!_checkValueTypeEquals);
      if (_not) {
        this.error(FPMLValidator.TYPEMISMATCHFUNCTIONCOMPOSITIONRETURN, FPMLPackage.Literals.PURE_FUNCTION_DEFINITION__RETURN_TYPE);
      }
    }
  }
  
  @Check
  public void FunctionCompositionReturnType(final EffectFullFunctionDefinition ef) {
    final FunctionBodyEffectFull rt = ef.getFunctionBody();
    if ((((!Objects.equal(rt, null)) && 
      (rt instanceof CompositionFunctionBodyEffect)) && 
      Objects.equal(((CompositionFunctionBodyEffect) rt).getReturnFunction(), null))) {
      EList<CompositionFunctionBodyEffectFullFactor> _functionChain = ((CompositionFunctionBodyEffect) rt).getFunctionChain();
      EList<CompositionFunctionBodyEffectFullFactor> _functionChain_1 = ((CompositionFunctionBodyEffect) rt).getFunctionChain();
      int _size = _functionChain_1.size();
      int _minus = (_size - 1);
      CompositionFunctionBodyEffectFullFactor _get = _functionChain.get(_minus);
      final ChainElement rt2 = UtilitiesFunctions.getFunctionDefinitionFromEffectFullFactor(_get);
      Type _returnType = UtilitiesFunctions.getReturnType(ef);
      Type _returnType_1 = UtilitiesFunctions.getReturnType(rt2);
      boolean _checkTypeEquals = UtilitiesFunctions.checkTypeEquals(_returnType, _returnType_1);
      boolean _not = (!_checkTypeEquals);
      if (_not) {
        this.error(FPMLValidator.TYPEMISMATCHFUNCTIONCOMPOSITIONRETURN, FPMLPackage.Literals.EFFECT_FULL_FUNCTION_DEFINITION__RETURN_TYPE);
      }
    }
  }
  
  @Check
  public void FunctionCompositionArgType(final PureFunctionDefinition pf) {
    final FunctionBodyPure rt = pf.getFunctionBody();
    if (((!Objects.equal(rt, null)) && (rt instanceof CompositionFunctionBodyPure))) {
      final PureFunctionDefinition rt2 = UtilitiesFunctions.getFirstFunctionDefinitionFromCompositionBodyPure(((CompositionFunctionBodyPure) rt));
      if (((rt2 instanceof PureFunctionDefinition) && (!Objects.equal(pf.getArg().getType().eClass(), UtilitiesFunctions.getArgType(rt2).eClass())))) {
        this.error(FPMLValidator.TYPEMISMATCHFUNCTIONCOMPOSITIONARGS, FPMLPackage.Literals.PURE_FUNCTION_DEFINITION__ARG);
      }
    }
  }
  
  @Check
  public void FunctionCompositionArgType(final EffectFullFunctionDefinition ef) {
    final FunctionBodyEffectFull rt = ef.getFunctionBody();
    if (((!Objects.equal(rt, null)) && (rt instanceof CompositionFunctionBodyEffect))) {
      EffectFullArgument _arg = ef.getArg();
      final Type t = _arg.getType();
      ChainElement _firstFunctionDefinitionFromCompositionBodyEffectFull = UtilitiesFunctions.getFirstFunctionDefinitionFromCompositionBodyEffectFull(((CompositionFunctionBodyEffect) rt));
      Type _argType = UtilitiesFunctions.getArgType(_firstFunctionDefinitionFromCompositionBodyEffectFull);
      final Type t1 = ((Type) _argType);
      boolean _checkTypeEquals = UtilitiesFunctions.checkTypeEquals(t, t1);
      boolean _not = (!_checkTypeEquals);
      if (_not) {
        this.error(FPMLValidator.TYPEMISMATCHFUNCTIONCOMPOSITIONARGS, FPMLPackage.Literals.EFFECT_FULL_FUNCTION_DEFINITION__ARG);
      }
    }
  }
  
  @Check
  public void EffectFullArgumentUnitTypeNoID(final EffectFullArgument efa) {
    if (((efa.getType() instanceof UnitType) && (!Objects.equal(efa.getName(), null)))) {
      this.error(FPMLValidator.EFFECTFULLARGUMENTUNITTYPEID, FPMLPackage.Literals.EFFECT_FULL_ARGUMENT__TYPE);
    }
  }
  
  @Check
  public void MainFuncReturnTypeCheck(final MainFunc m) {
    final FunctionBodyEffectFull rt = m.getFunctionBody();
    if ((rt instanceof CompositionFunctionBodyEffect)) {
      EList<CompositionFunctionBodyEffectFullFactor> _functionChain = ((CompositionFunctionBodyEffect)rt).getFunctionChain();
      EList<CompositionFunctionBodyEffectFullFactor> _functionChain_1 = ((CompositionFunctionBodyEffect)rt).getFunctionChain();
      int _size = _functionChain_1.size();
      int _minus = (_size - 1);
      CompositionFunctionBodyEffectFullFactor _get = _functionChain.get(_minus);
      final ChainElement rt2 = UtilitiesFunctions.getFunctionDefinitionFromEffectFullFactor(_get);
      UnitType _returnType = m.getReturnType();
      Type _returnType_1 = UtilitiesFunctions.getReturnType(rt2);
      boolean _checkTypeEquals = UtilitiesFunctions.checkTypeEquals(_returnType, _returnType_1);
      boolean _not = (!_checkTypeEquals);
      if (_not) {
        this.error(FPMLValidator.TYPEMISMATCHFUNCTIONCOMPOSITIONRETURN, FPMLPackage.Literals.MAIN_FUNC__RETURN_TYPE);
      }
    }
  }
  
  @Check
  public void ValueDataTypeCheck(final DataValue dv) {
    AdtValue _value = dv.getValue();
    Data _type = dv.getType();
    AdtType _content = _type.getContent();
    boolean _typeCheckDataAndValue = UtilitiesFunctions.typeCheckDataAndValue(_value, _content);
    boolean _not = (!_typeCheckDataAndValue);
    if (_not) {
      this.error(FPMLValidator.TYPEVMISMATCHBETWEENVALUEANDDATA, FPMLPackage.Literals.DATA_VALUE__VALUE);
    }
  }
}
