/**
 * generated by Xtext 2.9.2
 */
package it.unibo.validation;

import com.google.common.base.Objects;
import it.unibo.fPML.AdtType;
import it.unibo.fPML.AdtValue;
import it.unibo.fPML.ChainElement;
import it.unibo.fPML.CompositionFunctionBodyEffect;
import it.unibo.fPML.CompositionFunctionBodyEffectFullFactor;
import it.unibo.fPML.CompositionFunctionBodyPure;
import it.unibo.fPML.CompositionFunctionBodyPureFactor;
import it.unibo.fPML.Data;
import it.unibo.fPML.DataValue;
import it.unibo.fPML.EffectFullArgument;
import it.unibo.fPML.EffectFullFunctionDefinition;
import it.unibo.fPML.FPMLPackage;
import it.unibo.fPML.InitialPureChainElement;
import it.unibo.fPML.MainFunc;
import it.unibo.fPML.PureFunctionDefinition;
import it.unibo.fPML.UnitType;
import it.unibo.fPML.Value;
import it.unibo.validation.AbstractFPMLValidator;
import it.unibo.validation.UtilitiesFunctions;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.validation.Check;
import org.eclipse.xtext.xbase.lib.IterableExtensions;

/**
 * This class contains custom validation rules.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
@SuppressWarnings("all")
public class FPMLValidator extends AbstractFPMLValidator {
  public final static String TYPEMISMATCHFUNCTIONCOMPOSITION = "Type mismatch between the input of one function and the return of another in the function chain";
  
  public final static String TYPEMISMATCHFUNCTIONCOMPOSITIONRETURN = "The return type of the last function and the outside function doesn\'t match";
  
  public final static String TYPEMISMATCHFUNCTIONCOMPOSITIONARGS = "The argument type of the function is not the same as the first argument of the function chain";
  
  public final static String EFFECTFULLARGUMENTUNITTYPEID = "The Unit Type don\'t require and ID";
  
  public final static String TYPEVMISMATCHBETWEENVALUEANDDATA = "The value doesn\'t match the data declaration";
  
  @Check
  public void CompositionFunctionTypePure(final CompositionFunctionBodyPure cfbp) {
    EObject t = null;
    PureFunctionDefinition _primitiveElement = cfbp.getPrimitiveElement();
    boolean _equals = Objects.equal(_primitiveElement, null);
    if (_equals) {
      InitialPureChainElement _referenceElement = cfbp.getReferenceElement();
      EObject _returnType = UtilitiesFunctions.getReturnType(_referenceElement);
      t = _returnType;
    } else {
      PureFunctionDefinition _primitiveElement_1 = cfbp.getPrimitiveElement();
      EObject _returnType_1 = UtilitiesFunctions.getReturnType(_primitiveElement_1);
      t = _returnType_1;
    }
    EList<CompositionFunctionBodyPureFactor> _functionChain = cfbp.getFunctionChain();
    for (final CompositionFunctionBodyPureFactor pf : _functionChain) {
      {
        EObject t1 = null;
        PureFunctionDefinition _primitiveElement_2 = pf.getPrimitiveElement();
        boolean _equals_1 = Objects.equal(_primitiveElement_2, null);
        if (_equals_1) {
          PureFunctionDefinition _referenceElement_1 = pf.getReferenceElement();
          EObject _argType = UtilitiesFunctions.getArgType(_referenceElement_1);
          t1 = _argType;
        } else {
          PureFunctionDefinition _primitiveElement_3 = pf.getPrimitiveElement();
          EObject _argType_1 = UtilitiesFunctions.getArgType(_primitiveElement_3);
          t1 = _argType_1;
        }
        EClass _eClass = t1.eClass();
        EClass _eClass_1 = t.eClass();
        boolean _equals_2 = Objects.equal(_eClass, _eClass_1);
        boolean _not = (!_equals_2);
        if (_not) {
          this.error(FPMLValidator.TYPEMISMATCHFUNCTIONCOMPOSITION, FPMLPackage.Literals.COMPOSITION_FUNCTION_BODY_PURE__FUNCTION_CHAIN);
        }
        PureFunctionDefinition _primitiveElement_4 = pf.getPrimitiveElement();
        boolean _equals_3 = Objects.equal(_primitiveElement_4, null);
        if (_equals_3) {
          PureFunctionDefinition _referenceElement_2 = pf.getReferenceElement();
          EObject _returnType_2 = UtilitiesFunctions.getReturnType(_referenceElement_2);
          t = _returnType_2;
        } else {
          PureFunctionDefinition _primitiveElement_5 = pf.getPrimitiveElement();
          EObject _returnType_3 = UtilitiesFunctions.getReturnType(_primitiveElement_5);
          t = _returnType_3;
        }
      }
    }
  }
  
  @Check
  public void CompositionFunctionTypeEffect(final CompositionFunctionBodyEffect cfbe) {
    EList<CompositionFunctionBodyEffectFullFactor> _functionChain = cfbe.getFunctionChain();
    final CompositionFunctionBodyEffectFullFactor f1 = IterableExtensions.<CompositionFunctionBodyEffectFullFactor>head(_functionChain);
    EObject t = null;
    EffectFullFunctionDefinition _primitiveElement = f1.getPrimitiveElement();
    boolean _equals = Objects.equal(_primitiveElement, null);
    if (_equals) {
      ChainElement _referenceElement = f1.getReferenceElement();
      EObject _returnType = UtilitiesFunctions.getReturnType(_referenceElement);
      t = _returnType;
    } else {
      EffectFullFunctionDefinition _primitiveElement_1 = f1.getPrimitiveElement();
      EObject _returnType_1 = UtilitiesFunctions.getReturnType(_primitiveElement_1);
      t = _returnType_1;
    }
    EList<CompositionFunctionBodyEffectFullFactor> _functionChain_1 = cfbe.getFunctionChain();
    Iterable<CompositionFunctionBodyEffectFullFactor> _tail = IterableExtensions.<CompositionFunctionBodyEffectFullFactor>tail(_functionChain_1);
    for (final CompositionFunctionBodyEffectFullFactor ef : _tail) {
      {
        if ((!(ef instanceof Value))) {
          EObject t1 = null;
          EffectFullFunctionDefinition _primitiveElement_2 = f1.getPrimitiveElement();
          boolean _equals_1 = Objects.equal(_primitiveElement_2, null);
          if (_equals_1) {
            ChainElement _referenceElement_1 = ef.getReferenceElement();
            EObject _argType = UtilitiesFunctions.getArgType(_referenceElement_1);
            t1 = _argType;
          } else {
            EffectFullFunctionDefinition _primitiveElement_3 = ef.getPrimitiveElement();
            EObject _argType_1 = UtilitiesFunctions.getArgType(_primitiveElement_3);
            t1 = _argType_1;
          }
          if (((!Objects.equal(t1.eClass(), t.eClass())) && (!(t1 instanceof UnitType)))) {
            this.error(FPMLValidator.TYPEMISMATCHFUNCTIONCOMPOSITION, FPMLPackage.Literals.COMPOSITION_FUNCTION_BODY_EFFECT__FUNCTION_CHAIN);
          }
        }
        EffectFullFunctionDefinition _primitiveElement_4 = ef.getPrimitiveElement();
        boolean _equals_2 = Objects.equal(_primitiveElement_4, null);
        if (_equals_2) {
          ChainElement _referenceElement_2 = ef.getReferenceElement();
          EObject _returnType_2 = UtilitiesFunctions.getReturnType(_referenceElement_2);
          t = _returnType_2;
        } else {
          EffectFullFunctionDefinition _primitiveElement_5 = ef.getPrimitiveElement();
          EObject _returnType_3 = UtilitiesFunctions.getReturnType(_primitiveElement_5);
          t = _returnType_3;
        }
      }
    }
  }
  
  @Check
  public void FunctionCompositionReturnType(final PureFunctionDefinition pf) {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method or field PURE_FUNCTION__RETURN_TYPE is undefined for the type Class<Literals>"
      + "\nType mismatch: cannot convert from CompositionFunctionBodyPureFactor to PureFunctionDefinition");
  }
  
  @Check
  public void FunctionCompositionReturnType(final EffectFullFunctionDefinition ef) {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method or field EFFECT_FULL_FUNCTION__RETURN_TYPE is undefined for the type Class<Literals>"
      + "\nType mismatch: cannot convert from CompositionFunctionBodyEffectFullFactor to PureFunctionDefinition");
  }
  
  @Check
  public void FunctionCompositionArgType(final PureFunctionDefinition pf) {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method or field initialElement is undefined for the type CompositionFunctionBodyPure"
      + "\nThe method or field PURE_FUNCTION__ARG is undefined for the type Class<Literals>");
  }
  
  @Check
  public void FunctionCompositionArgType(final EffectFullFunctionDefinition ef) {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method or field EFFECT_FULL_FUNCTION__ARG is undefined for the type Class<Literals>"
      + "\nType mismatch: cannot convert from CompositionFunctionBodyEffectFullFactor to PureFunctionDefinition");
  }
  
  @Check
  public void EffectFullArgumentUnitTypeNoID(final EffectFullArgument efa) {
    if (((efa.getType() instanceof UnitType) && (!Objects.equal(efa.getName(), null)))) {
      this.error(FPMLValidator.EFFECTFULLARGUMENTUNITTYPEID, FPMLPackage.Literals.EFFECT_FULL_ARGUMENT__TYPE);
    }
  }
  
  @Check
  public void MainFuncReturnTypeCheck(final MainFunc m) {
    throw new Error("Unresolved compilation problems:"
      + "\nType mismatch: cannot convert from CompositionFunctionBodyEffectFullFactor to PureFunctionDefinition");
  }
  
  @Check
  public void ValueDataTypeCheck(final DataValue dv) {
    AdtValue _value = dv.getValue();
    Data _type = dv.getType();
    AdtType _content = _type.getContent();
    boolean _typeCheckDataAndValue = UtilitiesFunctions.typeCheckDataAndValue(_value, _content);
    boolean _not = (!_typeCheckDataAndValue);
    if (_not) {
      this.error(FPMLValidator.TYPEVMISMATCHBETWEENVALUEANDDATA, FPMLPackage.Literals.DATA_VALUE__VALUE);
    }
  }
}
