/*
 * generated by Xtext 2.9.2
 */
package it.unibo.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import it.unibo.fPML.PureFunctionBlock
import it.unibo.fPML.Data
import it.unibo.fPML.EffectFullBlock
import it.unibo.fPML.PureFunction
import it.unibo.fPML.FunctionBodyPure
import it.unibo.fPML.CompositionFunctionBodyPure
import it.unibo.fPML.InitialPureChainElement
import org.eclipse.xtext.xbase.lib.Functions.Function1
import org.eclipse.xtext.xbase.lib.Functions.Function2
import it.unibo.fPML.EmptyFunctionBody
import it.unibo.fPML.ValueType
import it.unibo.fPML.DataType
import it.unibo.fPML.IntegerType
import it.unibo.fPML.StringType
import it.unibo.fPML.Argument

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class FPMLGenerator extends AbstractGenerator {

	val basePackage = "it/unibo/";
	val basePackageJava = "it.unibo."

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		fsa.generateFile(basePackage + "Pure/Functions.java", resource.getAllContents.filter(PureFunctionBlock).head.compile);
		fsa.generateFile(basePackage + "Effectfull/Functions.java", resource.getAllContents.filter(EffectFullBlock).head.compile);
		for(e : resource.getAllContents.toIterable.filter(Data)){
			fsa.generateFile(
					basePackage + "Data/" + e.getName() + ".java",
					e.compile
			);
		}
	}

	def compile(PureFunctionBlock pfb) '''
		import «basePackageJava»Pure
		
		public static class PureFunction {
			«FOR f:pfb.features»
				«f.compile»
			«ENDFOR»	
		}
	'''

	def compile(PureFunction pf) '''

		public static «pf.returnType.compile» «pf.name» («pf.arg.compile»){
			«IF pf.functionBody instanceof EmptyFunctionBody»
			throw new NotImpletementedException("TODO")
			«ELSEIF pf.functionBody instanceof CompositionFunctionBodyPure»
			«(pf.functionBody as CompositionFunctionBodyPure).compile»
			«ENDIF»
		}'''

	def compile(CompositionFunctionBodyPure cfbp) '''
		«val Function2<String, InitialPureChainElement, String>  f = [String acc, InitialPureChainElement x | x.compile + acc + ')']»
		«cfbp.functionChain.fold("", f) »'''
	
	def compile(InitialPureChainElement e) '''
		«IF e instanceof Data»
			«(e as Data).name».getValue()
		«ELSE»
			«(e as PureFunction).name»«ENDIF»('''

	def compile(ValueType vt) '''
		«switch vt{
			DataType: return vt.type.name
			IntegerType: return vt.type
			StringType: return vt.type
		}»'''

	def compile(Argument arg) '''«arg.type.compile» «arg.name»'''

	def compile(Data d) '''
	    Data
	'''

	def compile(EffectFullBlock efb) '''
	    Effectfull funcitons
	'''
}
