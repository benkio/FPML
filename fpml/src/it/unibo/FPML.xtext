grammar it.unibo.FPML with org.eclipse.xtext.common.Terminals

generate fPML "http://www.unibo.it/FPML"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

///////////////////////////////////////////////////////////////
// Entry element
//////////////////////////////////////////////////////////////
Model:
	elements+=PureBlock
	elements+=EffectFullBlock;

//////////////////////////////////////////////////////////////
// Outer Blocks
//////////////////////////////////////////////////////////////

PureBlock:
	'Pure' '{'
		elements+=PureDataBlock
		elements+=PureFunctionBlock
	'}';

PureFunctionBlock:
	'Functions' '{'
		(features+=PureFunctionDefinition)*
	'}';

PureDataBlock:
	'Data' '{'
		(elements+=PureData)*
		value=PureValueBlock
	'}';

PureValueBlock:
	'Value' '{' 
		(elements+=PureValue)*
	'}'
;

EffectFullBlock:
    'Effects' '{'
    	elements+=EffectFullDataBlock
		elements+=EffectFullFunctionBlock
    '}';

EffectFullDataBlock:
		'Data' '{'
		(elements+=EffectFullData)*
		value=EffectFullValueBlock
	'}';

EffectFullValueBlock:
	'Value' '{' 
		(elements+=EffectFullValue)*
	'}'
;

EffectFullFunctionBlock:
	'Functions' '{'
    	(features+=EffectFullFunctionDefinition)*
		main=MainFunc
    '}';

/////////////////////////////////////////////////////////////////
// Outer Block Elements
/////////////////////////////////////////////////////////////////

PureData:
    name=ID ':' content=ValueType;

PureValue returns PureFunctionDefinition: {PureValue} name=ID ':' value=Expression;

EffectFullData: name=ID ':' content=EffectFullType;

EffectFullValue returns EffectFullFunctionDefinition: {EffectFullValue} name=ID ':' value=EffectFullExpression; 
   
PureFunctionDefinition:
	'def' returnType=ValueType name=ID '(' arg=Argument (',' higherOrderArg=AdditionalPureArgument)? ')' ':' '{' functionBody=FunctionBodyPure '}';

EffectFullFunctionDefinition:
	'def' returnType=IOType name=ID '(' arg=EffectFullArgument (',' higherOrderArg=AdditionalEffectFullArgument)? ')' ':' '{'  functionBody=FunctionBodyEffectFull '}';

MainFunc:
	'IO' returnType=UnitType 'main' ':' '{' functionBody=FunctionBodyEffectFull '}';

AdditionalPureArgument: arg2=Argument;
AdditionalEffectFullArgument: arg2=EffectFullArgument;

///////////////////////////////////////////////////////////////////////////////////////////////
// Aggregate Types
///////////////////////////////////////////////////////////////////////////////////////////////

Function: EffectFullFunction | PureFunction;

PureFunction: PureFunctionDefinition | PrimitivePureFunction;

EffectFullFunction: EffectFullFunctionDefinition | PrimitiveEffectFullFunction;

/*
 *  Tricky aggregate: is used in reference [] but has addictional components in order to 
 * 	facilitate the validation, those components suck as PrimitiveEffectFullValue or PrimitiveFunction
 * 	cannot be referenced because of no ids, but where the effectfullReference is used them are also allowed(not as reference).
 */
EffectFullReference: EffectFullValue | EffectFullArgument | PureValue | PrimitiveEffectFullValue | PrimitiveFunction | Function;

PureReference: PureValue | Argument;

PrimitiveFunction: PrimitiveEffectFullFunction | PrimitivePureFunction | PrimitiveEffectFullValue;

///////////////////////////////////////////////////////////////////
// Function Body Elements
///////////////////////////////////////////////////////////////////


EffectFullArgument:
	type=Type name=ID;

Argument:
	type=ValueType name=ID;

FunctionBodyPure:
		 EmptyFunctionBody | CompositionFunctionBodyPure;

FunctionBodyEffectFull:
  	     EmptyFunctionBody | CompositionFunctionBodyEffect;

EmptyFunctionBody:
    {EmptyFunctionBody} 'Undefined';

CompositionFunctionBodyPure:
      referenceElement=[PureFunctionDefinition] (functionChain+=CompositionFunctionBodyPureFactor)+ 
    | primitiveElement=PrimitivePureFunction (functionChain+=CompositionFunctionBodyPureFactor)+;
    
CompositionFunctionBodyPureFactor:
	  ( '|>' (referenceElement=[PureFunctionDefinition]))
	| ( '|>' (PrimitiveElement=PrimitivePureFunction));

CompositionFunctionBodyEffect:
      referenceElement=[EffectFullReference] (functionChain+=CompositionFunctionBodyEffectFullFactor)+
    | primitiveElement=PrimitiveFunction (functionChain+=CompositionFunctionBodyEffectFullFactor)+;
    
CompositionFunctionBodyEffectFullFactor:
	  ( '>>=' (referenceElement=[EffectFullReference]))
	| ( '>>=' (PrimitiveElement=PrimitiveFunction));

//////////////////////////////////////////////////////////////////////
// Types
//////////////////////////////////////////////////////////////////////

IOType:
	'IO' type=Type ;

ValueType:
	IntegerType | StringType | DataType | PureFunctionType | PureAlgebraicType;

Type:
	ValueType | EffectFullType;

EffectFullType:
	UnitType | EffectFullFunctionType | EffectFullDataType | EffectFullAlgebraicType | IOType;

IntegerType:
	{IntegerType} type="int";

StringType:
	{StringType} type="String";

UnitType:
	{UnitType} type="Unit";

DataType:
    {DataType} 'ref' type=[PureData];
  
EffectFullDataType:
    {EffectFullDataType} 'refIO' type=[EffectFullData];  
    
PureFunctionType:
	{PureFunctionType} 'F' '<' argType=ValueType ',' returnType=ValueType '>';

EffectFullFunctionType:
	{EffectFullFunctionType} 'FIO' '<' argType=Type ',' returnType=IOType '>';

PureAlgebraicType: '[' pureAdtElement1=ValueType pureAdtElement2=(PureSumTypeFactor | PureProdTypeFactor) ']';

PureSumTypeFactor:
    '+' adtElement=ValueType;
PureProdTypeFactor:
    '*' adtElement=ValueType;

EffectFullAlgebraicType: '[' effectFullAdtElement1=IOType effectFullAdtElement2=(EffectFullSumTypeFactor | EffectFullProdTypeFactor) ']';

EffectFullSumTypeFactor:
    '+' adtElement=IOType;
EffectFullProdTypeFactor:
    '*' adtElement=IOType;

////////////////////////////////////////////////////////////////////
// Values
////////////////////////////////////////////////////////////////////

EffectFullExpression:
	'IO' '[' EffectFullExpression ']' 
	| 'IO' '(' Expression ')' 
	| UnitValue 
	| EffectFullFunctionValue 
	| EffectFullDataValue;
	
UnitValue returns UnitType: {UnitType} '()';

EffectFullFunctionValue returns EffectFullFunctionType: value=EffectFullLambda;

EffectFullValueRef: {EffectFullValueRef} value=[EffectFullValue];

EffectFullLambda returns EffectFullFunctionDefinition: 
	{EffectFullLambda} '[' arg=EffectFullArgument ']' ':' functionBody=FunctionBodyEffectFull
	| {EffectFullLambda} functionBody=FunctionBodyEffectFull;

Expression:
    IntValue 
    | StringValue 
    | DataValue 
    | FunctionValue;

IntValue returns IntegerType: {IntegerType} value=INT;

StringValue returns StringType: {StringType} value=STRING;

FunctionValue returns PureFunctionType: value=PureLambda;

DataValue returns DataType: {DataValue} type=[PureData]'(' value=PureAdtValue ')';

EffectFullDataValue returns EffectFullDataType: {EffectFullDataValue} type=[EffectFullData]'(' value=EffectFullAdtValue ')';

PureValueRef: {PureValueRef} value=[PureValue];

PureLambda returns PureFunctionDefinition: 
	{PureLambda} '(' arg=Argument ')' ':' functionBody=FunctionBodyPure
;

PureAdtValue:
	Expression
	| PureValueRef
	| PureSumValue
	| PureProdValue;

PureProdValue: 
	'(' prodAdtElement1=PureAdtValue ',' prodAdtElement2=PureAdtValue ')';

PureSumValue:
	'Left' '(' sumAdtElement1=PureAdtValue ')'
	| 'Right' '(' sumAdtElement2=PureAdtValue ')';

EffectFullAdtValue:
	 'IO' '(' innerValue=PureAdtValue ')'
	 | 'IO' '[' innerValue=EffectFullAdtValue ']'
	 | UnitValue
	 | EffectFullFunctionValue
	 | EffectFullProdValue
	 | EffectFullValueRef
	 | EffectFullSumValue ;

EffectFullProdValue: 
	'(' prodAdtElement1=EffectFullAdtValue ',' prodAdtElement2=EffectFullAdtValue ')';

EffectFullSumValue:
	'Left' '(' sumAdtElement1=EffectFullAdtValue ')'
	| 'Right' '(' sumAdtElement2=EffectFullAdtValue ')';
    
    
/////////////////////////////////////////////////////////////////////
// Primitives
/////////////////////////////////////////////////////////////////////

PrimitivePureFunction: 
	IntToString | IntPow | Plus | Minus | Times | Mod | ApplyF;

IntToString: {IntToString} 'IntToString';
IntPow:	{IntPow} 'IntPow';
Plus: {Plus} '+';
Minus: {Minus} '-';
Times: {Times} '*';
Mod: {Mod} 'mod';
ApplyF:{ApplyF} 'applyF' functionType=PureFunctionType value=[PureReference];

PrimitiveEffectFullFunction:
	PrimitivePrint | ApplyFIO | PrimitiveReturn;

PrimitivePrint:
    {PrimitivePrint} "print";

PrimitiveEffectFullValue:
	PrimitiveRandom  | PrimitiveTime
;

PrimitiveRandom:
	{PrimitiveRandom} "randomInt";

PrimitiveReturn:
	{PrimitiveReturn} "return" type=Type;

PrimitiveTime: {PrimitiveTime} "currentTime";

ApplyFIO: {ApplyFIO} 'applyFIO' functionType=EffectFullFunctionType value=ApplyFIOFactor;
ApplyFIOFactor: 
	  valueReference=[EffectFullReference]
	| valuePrimitive=PrimitiveEffectFullValue;
    