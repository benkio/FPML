grammar it.unibo.FPML with org.eclipse.xtext.common.Terminals

generate fPML "http://www.unibo.it/FPML"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

///////////////////////////////////////////////////////////////
// Entry element
//////////////////////////////////////////////////////////////
Model:
	elements+=PureBlock
	elements+=EffectFullBlock;

//////////////////////////////////////////////////////////////
// Outer Blocks
//////////////////////////////////////////////////////////////

PureBlock:
	'Pure' '{'
		elements+=PureDataBlock
		elements+=PureFunctionBlock
	'}';

PureFunctionBlock:
	'Functions' '{'
		(features+=PureFunctionDefinition)*
	'}';

PureDataBlock:
	'Data' '{'
		(elements+=PureData)*
		value=PureValueBlock
	'}';

PureValueBlock:
	'Value' '{' 
		(elements+=PureValue)*
	'}'
;

EffectFullBlock:
    'Effects' '{'
    	(features+=EffectFullFunctionDefinition)*
		main=MainFunc
    '}';

EffectFullDataBlock:
		'Data' '{'
		(elements+=EffectFullData)*
		value=EffectFullValueBlock
	'}';

EffectFullValueBlock:
	'Value' '{' 
		(elements+=EffectFullValue)*
	'}'
;

EffectFullFunctionBlock:
	'Functions' '{'
    	(features+=EffectFullFunctionDefinition)*
		main=MainFunc
    '}';

/////////////////////////////////////////////////////////////////
// Outer Block Elements
/////////////////////////////////////////////////////////////////

PureData:
    name=ID ':' content=PureAdtType;

PureValue returns PureFunctionDefinition: {PureValue} name=ID ':' value=Expression;

PureAdtType:
      ValueType
    | '[' pureAdtElement1=PureAdtType pureAdtElement2=(PureSumType | PureProdType) ']';

PureSumType:
    '+' adtElement=PureAdtType;
PureProdType:
    '*' adtElement=PureAdtType;

EffectFullData: name=ID ':' content=EffectFullAdtType; 

EffectFullValue returns EffectFullFunctionDefinition: {EffectFullValue} name=ID ':' value=EffectFullExpression; 

EffectFullAdtType:
     IOType
    | '[' effectFullAdtElement1=EffectFullAdtType effectFullAdtElement2=(EffectFullSumType | EffectFullProdType) ']';

EffectFullSumType:
    '+' adtElement=EffectFullAdtType;
EffectFullProdType:
    '*' adtElement=EffectFullAdtType;

   
PureFunctionDefinition:
	'def' returnType=ValueType name=ID '(' arg=Argument (',' higherOrderArg=AdditionalPureArgument)? ')' ':' '{' functionBody=FunctionBodyPure '}';

EffectFullFunctionDefinition:
	'def' returnType=IOType name=ID '(' arg=EffectFullArgument (',' higherOrderArg=AdditionalEffectFullArgument)? ')' ':' '{'  functionBody=FunctionBodyEffectFull '}';

MainFunc:
	'IO' returnType=UnitType 'main' ':' '{' functionBody=FunctionBodyEffectFull '}';

AdditionalPureArgument: arg2=Argument;
AdditionalEffectFullArgument: arg2=EffectFullArgument;

Function: EffectFullFunction | PureFunction;

PureFunction: PureFunctionDefinition | PrimitivePureFunction;

EffectFullFunction: EffectFullFunctionDefinition | PrimitiveEffectFullFunction;

///////////////////////////////////////////////////////////////////
// Function Body Elements
///////////////////////////////////////////////////////////////////

EffectFullReference: EffectFullValue | EffectFullArgument | PrimitiveEffectFullValue;

PureReference: PureValue | Argument;

EffectFullArgument:
	type=Type name=ID;

Argument:
	type=ValueType name=ID;

FunctionBodyPure:
		 EmptyFunctionBody | CompositionFunctionBodyPure;

FunctionBodyEffectFull:
  	     EmptyFunctionBody | CompositionFunctionBodyEffect;

EmptyFunctionBody:
    {EmptyFunctionBody} 'Undefined';

CompositionFunctionBodyPure:
      referenceElement=[PureFunctionDefinition] (functionChain+=CompositionFunctionBodyPureFactor)+ 
    | primitiveElement=PrimitivePureFunction (functionChain+=CompositionFunctionBodyPureFactor)+;
    
CompositionFunctionBodyPureFactor:
	  ( '|>' (referenceElement=[PureFunctionDefinition]))
	| ( '|>' (PrimitiveElement=PrimitivePureFunction));

CompositionFunctionBodyEffect:
      referenceElement=[EffectFullReference] (functionChain+=CompositionFunctionBodyEffectFullFactor)+
    | primitiveElement=(PrimitiveEffectFullFunction | PrimitivePureFunction) (functionChain+=CompositionFunctionBodyEffectFullFactor)+;
    
CompositionFunctionBodyEffectFullFactor:
	  ( '>>=' (referenceElement=[EffectFullReference]))
	| ( '>>=' (PrimitiveElement=(PrimitiveEffectFullFunction | PrimitivePureFunction)));

//////////////////////////////////////////////////////////////////////
// Types
//////////////////////////////////////////////////////////////////////

IOType:
	'IO' type=Type ;

ValueType:
	IntegerType | StringType | DataType | PureFunctionType;

Type:
	ValueType | UnitType | EffectFullFunctionType | EffectFullDataType;

IntegerType:
	{IntegerType} type="int";

StringType:
	{StringType} type="String";

UnitType:
	{UnitType} type="Unit";

DataType:
    {DataType} 'ref' type=[PureData];
  
EffectFullDataType:
    {EffectFullDataType} 'refIO' type=[EffectFullData];  
    
PureFunctionType:
	{PureFunctionType} 'F' '<' argType=ValueType ',' returnType=ValueType '>';

EffectFullFunctionType:
	{EffectFullFunctionType} 'FIO' '<' argType=Type ',' returnType=IOType '>';

////////////////////////////////////////////////////////////////////
// Values
////////////////////////////////////////////////////////////////////

EffectFullExpression:
	'IO' '(' Expression ')' | UnitValue | EffectFullFunctionValue | EffectFullDataValue;
	
UnitValue returns UnitType: {UnitType} '()';

EffectFullFunctionValue returns EffectFullFunctionType: value=EffectFullLambda;

EffectFullLambda: 
	{EffectFullLambda} '[' arg=EffectFullArgument ']' ':' functionBody=FunctionBodyEffectFull
	| {EffectFullLambda} functionBody=FunctionBodyEffectFull;

Expression:
    IntValue | StringValue | DataValue | FunctionValue;

IntValue returns IntegerType: {IntegerType} value=INT;

StringValue returns StringType: {StringType} value=STRING;

FunctionValue returns PureFunctionType: value=PureLambda;

DataValue returns DataType: {DataValue} type=[PureData]'(' value=PureAdtValue ')';

EffectFullDataValue returns EffectFullDataType: {EffectFullDataValue} type=[EffectFullData]'(' value=EffectFullAdtValue ')';

ValueRef: {ValueRef} value=[PureValue];

PureLambda returns PureFunctionDefinition: 
	{PureLambda} '(' arg=Argument ')' ':' functionBody=FunctionBodyPure
;

PureAdtValue:
	  IntValue
	| StringValue
	| ValueRef
	| DataValue
	| PureSumValue
	| FunctionValue
	| PureProdValue;

PureProdValue: 
	'(' prodAdtElement1=PureAdtValue ',' prodAdtElement2=PureAdtValue ')';

PureSumValue:
	'Left' '(' sumAdtElement1=PureAdtValue ')'
	| 'Right' '(' sumAdtElement2=PureAdtValue ')';

EffectFullAdtValue:
	 'IO' PureAdtValue 
	 | UnitValue
	 | EffectFullFunctionValue
	 | EffectFullProdValue
	 | EffectFullSumValue ;

EffectFullProdValue: 
	'(' prodAdtElement1=EffectFullAdtValue ',' prodAdtElement2=EffectFullAdtValue ')';

EffectFullSumValue:
	'Left' '(' sumAdtElement1=EffectFullAdtValue ')'
	| 'Right' '(' sumAdtElement2=EffectFullAdtValue ')';
    
    
/////////////////////////////////////////////////////////////////////
// Primitives
/////////////////////////////////////////////////////////////////////

PrimitivePureFunction: 
	IntToString | IntPow | Plus | Minus | Times | Mod | ApplyF;

IntToString: {IntToString} 'IntToString';
IntPow:	{IntPow} 'IntPow';
Plus: {Plus} '+';
Minus: {Minus} '-';
Times: {Times} '*';
Mod: {Mod} 'mod';
ApplyF:{ApplyF} 'applyF' functionType=PureFunctionType value=[PureReference];

PrimitiveEffectFullFunction:
	PrimitivePrint | ApplyFIO;

PrimitivePrint:
    {PrimitivePrint} "print";

PrimitiveEffectFullValue:
	PrimitiveRandom
;

PrimitiveRandom:
	{PrimitiveRandom} "randomInt";

ApplyFIO: {ApplyFIO} 'applyFIO' functionType=EffectFullFunctionType value=[EffectFullReference];
    