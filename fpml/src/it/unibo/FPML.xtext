grammar it.unibo.FPML with org.eclipse.xtext.common.Terminals

generate fPML "http://www.unibo.it/FPML"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

////////////////////////////////////////////////////////
// Entry element
////////////////////////////////////////////////////////
Model:
	elements+=PureBlock
	elements+=EffectFullBlock;

////////////////////////////////////////////////////////
// Outer Blocks
////////////////////////////////////////////////////////

PureBlock:
	'Pure' '{'
		elements+=PureDataBlock
		elements+=PureFunctionBlock
	'}';

PureFunctionBlock:
	'Functions' '{'
		(features+=PureFunctionDefinition)*
	'}';

PureDataBlock:
	'Data' '{'
		(elements+=PureData)*
		value=PureValueBlock
	'}';

PureValueBlock:
	'Value' '{' 
		(elements+=PureValue)*
	'}';

EffectFullBlock:
    'Effects' '{'
    	elements+=EffectFullDataBlock
		elements+=EffectFullFunctionBlock
    '}';

EffectFullDataBlock:
	'Data' '{'
		(elements+=EffectFullData)*
		value=EffectFullValueBlock
	'}';

EffectFullValueBlock:
	'Value' '{' 
		(elements+=EffectFullValue)*
	'}';

EffectFullFunctionBlock:
	'Functions' '{'
    	(features+=EffectFullFunctionDefinition)*
		main=MainFunc
    '}';

/////////////////////////////////////////////////////
// Outer Block Elements
/////////////////////////////////////////////////////

PureData: name=ID ':' content=ValueType;

PureValue returns PureFunctionDefinition: {PureValue} name=ID ':' value=Expression;

EffectFullData: name=ID ':' content=EffectFullType;

EffectFullValue returns EffectFullFunctionDefinition: {EffectFullValue} name=ID ':' value=EffectFullExpression; 
   
PureFunctionDefinition:
	'def' returnType=ValueType name=ID '(' arg=PureArgument (',' higherOrderArg=AdditionalPureArgument)? ')' ':' '{' functionBody=FunctionBodyPure '}';

EffectFullFunctionDefinition:
	'def' returnType=IOType name=ID '(' arg=Argument (',' higherOrderArg=AdditionalEffectFullArgument)? ')' ':' '{'  functionBody=FunctionBodyEffectFull '}';

MainFunc:
	'IO' returnType=UnitType 'main' ':' '{' functionBody=FunctionBodyEffectFull '}';

AdditionalPureArgument: arg2=PureArgument;
AdditionalEffectFullArgument: arg2=Argument;

/////////////////////////////////////////////////////
// Aggregate Types
/////////////////////////////////////////////////////

Function: EffectFullFunction | PureFunction;

PureFunction: PureFunctionDefinition | PrimitivePureFunction | PureArgument | Expression | PureValue;

EffectFullFunction: EffectFullFunctionDefinition | PrimitiveEffectFullFunction | EffectFullValue | EffectFullArgument;

PrimitiveFunction: PrimitivePureFunction | EffectFullPrimitive;

EffectFullPrimitive: PrimitiveEffectFullFunction | PrimitiveEffectFullValue;

EffectFullBodyContent:  EffectFullFunction | EffectFullPrimitive | EffectFullExpression;

////////////////////////////////////////////////////
// Function Body Elements
///////////////////////////////////////////////////


Argument: EffectFullArgument | PureArgument;

EffectFullArgument:	type=EffectFullType name=ID;

PureArgument: type=ValueType name=ID;

FunctionBodyPure: EmptyFunctionBody | CompositionFunctionBodyPure;

FunctionBodyEffectFull: EmptyFunctionBody | CompositionFunctionBodyEffect;

EmptyFunctionBody: {EmptyFunctionBody} 'Undefined';

CompositionFunctionBodyPure:
      referenceElement=[PureFunction] (functionChain+=CompositionFunctionBodyPureFactor)+ 
    | primitiveElement=PrimitivePureFunction (functionChain+=CompositionFunctionBodyPureFactor)+
    | expressionElement=Expression (functionChain+=CompositionFunctionBodyPureFactor)+;
    
CompositionFunctionBodyPureFactor:
	  ( '|>' (referenceElement=[PureFunction]))
	| ( '|>' (primitiveElement=PrimitivePureFunction))
	| ( '|>' (expressionElement=Expression));

CompositionFunctionBodyEffect:
      referenceElement=[EffectFullFunction] (functionChain+=CompositionFunctionBodyEffectFullFactor)+
    | primitiveElement=EffectFullPrimitive (functionChain+=CompositionFunctionBodyEffectFullFactor)+
    | expressionElement=EffectFullExpression (functionChain+=CompositionFunctionBodyEffectFullFactor)+;
    
CompositionFunctionBodyEffectFullFactor:
	  ( '>>=' (referenceElement=[EffectFullFunction]))
	| ( '>>=' (primitiveElement=EffectFullPrimitive))
	| ( '>>=' (expressionElement=EffectFullExpression));

/////////////////////////////////////////////////////
// Types
/////////////////////////////////////////////////////

IOType:	'IO' type=Type ;

ValueType:
	IntegerType | StringType | BooleanType | DataType | PureFunctionType | PureAlgebraicType
	| UnitType;

Type: ValueType | EffectFullType;

EffectFullType:
	EffectFullFunctionType | EffectFullDataType | EffectFullAlgebraicType | IOType | VoidType;

VoidType: {VoidType};

IntegerType: {IntegerType} type="int";

StringType: {StringType} type="String";

BooleanType: {BooleanType} type="boolean";

UnitType: {UnitType} type="Unit";

DataType: {DataType} 'ref' type=[PureData];
  
EffectFullDataType:
    {EffectFullDataType} 'refIO' type=[EffectFullData];  
    
PureFunctionType:
	{PureFunctionType} 'F' '<' argType=ValueType ',' returnType=ValueType '>';

EffectFullFunctionType:
	{EffectFullFunctionType} 'FIO' '<' argType=Type ',' returnType=IOType '>';

PureAlgebraicType: '[' pureAdtElement1=ValueType pureAdtElement2=(PureSumTypeFactor | PureProdTypeFactor) ']';

PureSumTypeFactor: '+' adtElement=ValueType;
PureProdTypeFactor: '*' adtElement=ValueType;

EffectFullAlgebraicType: '{' effectFullAdtElement1=Type effectFullAdtElement2=(EffectFullSumTypeFactor | EffectFullProdTypeFactor) '}';

EffectFullSumTypeFactor: '+' adtElement=Type;
EffectFullProdTypeFactor: '*' adtElement=Type;

//////////////////////////////////////////////
// Values
//////////////////////////////////////////////

EffectFullExpression:
	{IOEffectFullExpression} 'IO' '[' innerValue=EffectFullExpression ']' 
	| {IOExpression} 'IO' '(' innerValue=Expression ')'
	| {IOPureFunction} 'IOF' '(' pureFunction=[PureFunction] ')'
	| {IOPureFunction} 'IOF' '(' purePrimitive=PrimitivePureFunction ')'
	| {IOEffectFullFunction} 'IOF' '[' effectFullFunction=[EffectFullFunction] ']'
	| {IOEffectFullFunction} 'IOF' '[' effectFullPrimitive=PrimitiveEffectFullFunction ']'
	| EffectFullFunctionValue 
	| EffectFullDataValue
	| EffectFullProdValue
	| EffectFullSumValue
	| EffectFullValueRef;

	
UnitValue returns UnitType: {UnitType} '()';

EffectFullFunctionValue returns EffectFullFunctionType: value=EffectFullLambda;

EffectFullValueRef: {EffectFullValueRef} 'EffectFullRef' '[' value=[EffectFullValue] ']' ;

EffectFullLambda returns EffectFullFunctionDefinition: 
	{EffectFullLambda} '\\' '[' arg=Argument ']' '->' '{' functionBody=CompositionFunctionBodyEffect '}'
	| {EffectFullLambda} '\\' '['']' '->'  '{' functionBody=CompositionFunctionBodyEffect '}' ;

Expression:
    IntValue 
    | StringValue
    | BooleanValue
    | DataValue 
    | FunctionValue
    | UnitValue
    | PureValueRef
	| PureSumValue
	| PureProdValue;

IntValue returns IntegerType: {IntegerType} value=INT;

StringValue returns StringType: {StringType} value=STRING;

BooleanValue returns BooleanType: {BooleanType} value=BOOLEAN;

FunctionValue returns PureFunctionType: value=PureLambda;

DataValue returns DataType: 
	{DataValue} type=[PureData]'(' value=PureExpressionAndPureFunctionReference ')';

EffectFullDataValue returns EffectFullDataType: 
	{EffectFullDataValue} type=[EffectFullData]'[' value=EffectFullExpressionAndEffectFullFunctionReference ']';

PureValueRef: {PureValueRef} 'PureRef' '(' value=[PureValue] ')';

PureLambda returns PureFunctionDefinition: 
	{PureLambda} '\\' '(' arg=PureArgument ')' '->' '{' functionBody=CompositionFunctionBodyPure '}'
	| {PureLambda} '\\' '('')' '->' '{' functionBody=CompositionFunctionBodyPure '}';


PureProdValue returns PureAlgebraicType: 
	{PureProdValue} '(' prodAdtElement1=PureExpressionAndPureFunctionReference ','prodAdtElement2=PureExpressionAndPureFunctionReference ')';

PureExpressionAndPureFunctionReference: 
 	prodAdtElementExpression=Expression
 	| prodAdtElementFunction=[PureFunction];

PureSumValue returns PureAlgebraicType:
	{PureSumValue} 'Left' '(' sumAdtElement1=PureExpressionAndPureFunctionReference ')'
	| {PureSumValue} 'Right' '(' sumAdtElement2=PureExpressionAndPureFunctionReference ')';

EffectFullExpressionAndEffectFullFunctionReference: 
 	prodAdtElementExpression=EffectFullExpression
 	| prodAdtElementFunction=[EffectFullFunction];


EffectFullProdValue returns EffectFullAlgebraicType: 
	{EffectFullProdValue} '[' prodAdtElement1=EffectFullExpressionAndEffectFullFunctionReference ',' prodAdtElement2=EffectFullExpressionAndEffectFullFunctionReference ']';

EffectFullSumValue returns EffectFullAlgebraicType:
	{EffectFullSumValue} 'Left' '[' sumAdtElement1=EffectFullExpressionAndEffectFullFunctionReference ']'
	| {EffectFullSumValue} 'Right' '[' sumAdtElement2=EffectFullExpressionAndEffectFullFunctionReference ']';
    
    
/////////////////////////////////////////////
// Primitives
/////////////////////////////////////////////

PrimitivePureFunction: 
	IntToString | BoolToString | IntPow | Plus | Minus | Times | Mod | ApplyF | LeftAlgebraic | RightAlgebraic
	| Equals | MinorEquals | MajorEquals | Minor | Major | LogicAnd | LogicOr | LogicNot
	| ExtractPure | IsLeftPure | IsRightPure | PureIf | PureEitherIf | PureReturn;

IntToString: {IntToString} 'intToString';
BoolToString: {BoolToString} 'boolToString';
IntPow:	{IntPow} 'intPow';
Plus: {Plus} '+' type=(IntegerType | StringType);
Minus: {Minus} '-';
Times: {Times} '*';
Mod: {Mod} 'mod';
LeftAlgebraic: {LeftAlgebraic} 'leftADT' type=PureAlgebraicType;
RightAlgebraic: {RightAlgebraic} 'rightADT' type=PureAlgebraicType;
ApplyF: {ApplyF} 'applyF' functionType=PureFunctionType value=ApplyFFactor;
ApplyFFactor:
	valueReference=[PureFunction]
	| '(' valueExpression=Expression ')';
	
Equals: {Equals} '==' type=(IntegerType | StringType | BooleanType);
MinorEquals: {MinorEquals} '<='; 
MajorEquals: {MajorEquals} '>=';
Minor: {Minor} '<'; 
Major: {Major} '>';
LogicAnd: {LogicAnd} '&&';
LogicOr: {LogicOr} '||';
LogicNot: {LogicNot} 'not';
ExtractPure: {ExtractPure} 'extract' data=[PureData];
IsLeftPure: {IsLeftPure} 'isLeft' type=PureAlgebraicType;
IsRightPure: {IsRightPure} 'isRight' type=PureAlgebraicType;
PureIf: {PureIf} 'if' 'then' '{' then=PureIfBody '}' 'else' '{' else=PureIfBody '}';
PureIfBody: functionReference=[PureFunction]
	| functionExpression=Expression;
	
PureEitherIf: {PureEitherIf} 'ifEither' 'then' '{' then=PureIfBody '}' 'else' '{' else=PureIfBody '}';

PureReturn: {PureReturn} 'return' type=ValueType;

PrimitiveEffectFullFunction:
	Print | ApplyFIO | EffectFullReturn | LeftAlgebraicIO | RightAlgebraicIO | ExtractEffectFull
	| LiftPureFunction | LiftEffectFullFunction | IsLeftEffectFull | IsRightEffectFull | EffectFullIf 
	| EffectFullEitherIf | GetLineStdIn | GetIntSdtIn;

Print: {Print} "print";

LeftAlgebraicIO: {LeftAlgebraicIO} 'leftADT' type=EffectFullAlgebraicType;
RightAlgebraicIO: {RightAlgebraicIO} 'rightADT' type=EffectFullAlgebraicType;

PrimitiveEffectFullValue: Random  | Time;

Random: {Random} "randomInt";

EffectFullReturn: {EffectFullReturn} "return" type=Type;

Time: {Time} "currentTime";

ApplyFIO: {ApplyFIO} 'applyFIO' functionType=EffectFullFunctionType value=ApplyFIOFactor;
ApplyFIOFactor: 
	  valueReference=[EffectFullFunction]
	| valuePrimitive=EffectFullPrimitive
	| '(' valueExpression=EffectFullExpression ')';
	
ExtractEffectFull: {ExtractEffectFull} 'extractEffectFull' data=[EffectFullData];

LiftPureFunction: 'Lift' '(' functionRef=[PureFunction] ')'
	| 'Lift' '(' functionPrimitive=PrimitivePureFunction ')';
	
LiftEffectFullFunction: 'Lift' '[' functionRef=[EffectFullFunction] ']'
	| 'Lift' '[' functionPrimitive=PrimitiveEffectFullFunction ']';

IsLeftEffectFull: {IsLeftEffectFull} 'isLeft' type=EffectFullAlgebraicType;
IsRightEffectFull: {IsRightEffectFull} 'isRight' type=EffectFullAlgebraicType;

EffectFullIf: {EffectFullIf} 'if' 'then' '{' then=EffectFullIfBody '}' 'else' '{' else=EffectFullIfBody '}';
EffectFullEitherIf: {EffectFullEitherIf} 'ifEither' 'then' '{' then=EffectFullIfBody '}' 'else' '{' else=EffectFullIfBody '}';
EffectFullIfBody: functionReference=[EffectFullFunction]
	| functionExpression=EffectFullExpression;

GetLineStdIn: {GetLineStdIn} 'getLineStdIn';
GetIntSdtIn: {GetIntStdIn} 'getIntStdIn';

//////////////////////////////////////////////////
// TERMINALS
//////////////////////////////////////////////////

terminal BOOLEAN returns ecore::EBoolean: 'true' | 'false';