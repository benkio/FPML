/*
 * generated by Xtext 2.9.2
 */
package it.unibo.validation

import it.unibo.fPML.CompositionFunctionBodyPure
import it.unibo.fPML.PureFunction
import it.unibo.fPML.ChainElement
import it.unibo.fPML.FPMLPackage
import it.unibo.fPML.EffectFullArgument
import it.unibo.fPML.UnitType
import it.unibo.fPML.Data
import org.eclipse.xtext.validation.Check
import org.eclipse.emf.ecore.util.EcoreUtil
import it.unibo.fPML.CompositionFunctionBodyEffect
import it.unibo.fPML.EffectFullFunction
import it.unibo.validation.UtilitiesFunctions
import it.unibo.fPML.InitialPureChainElement
import it.unibo.fPML.MainFunc
import it.unibo.fPML.impl.FPMLFactoryImpl

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class FPMLValidator extends AbstractFPMLValidator {

    public static val TYPEMISMATCHFUNCTIONCOMPOSITION = "Type mismatch between the input of one function and the return of another in the function chain";
    public static val TYPEMISMATCHFUNCTIONCOMPOSITIONRETURN = "The return type of the last function and the outside function doesn't match";
    public static val TYPEMISMATCHFUNCTIONCOMPOSITIONARGS = "The argument type of the function is not the same as the first argument of the function chain";
    public static val EFFECTFULLARGUMENTUNITTYPEID = "The Unit Type don't require and ID";

    @Check
    def CompositionFunctionTypePure(CompositionFunctionBodyPure cfbp ) {
        var t = UtilitiesFunctions.getReturnType(cfbp.getFunctionChain().head);
        for (InitialPureChainElement pf : cfbp.getFunctionChain().tail){
            val t1 = UtilitiesFunctions.getArgType(pf);
            if(!(EcoreUtil.equals(t1,t)))
                error(TYPEMISMATCHFUNCTIONCOMPOSITION, FPMLPackage.Literals.COMPOSITION_FUNCTION_BODY_PURE__FUNCTION_CHAIN );
            t = UtilitiesFunctions.getReturnType(pf);
        }
    }

    @Check
    def CompositionFunctionTypeEffect(CompositionFunctionBodyEffect cfbe ) {
        val f1 = cfbe.getFunctionChain().head;
        var t = UtilitiesFunctions.getReturnType(f1);
        for (ChainElement ef : cfbe.getFunctionChain().tail) {
            if (!(ef instanceof Data)) {
                var t1 = UtilitiesFunctions.getArgType(ef);
                if(!(EcoreUtil.equals(t1,t)) && !(t1 instanceof UnitType))
                    error(TYPEMISMATCHFUNCTIONCOMPOSITION, FPMLPackage.Literals.COMPOSITION_FUNCTION_BODY_EFFECT__FUNCTION_CHAIN);
            }
            t = UtilitiesFunctions.getReturnType(ef);
        }
    }

    @Check
    def FunctionCompositionReturnType(PureFunction pf){
        val rt = pf.getFunctionBody();
        if (rt instanceof CompositionFunctionBodyPure) {
            val rt2 = rt.getFunctionChain();
            if(!(EcoreUtil.equals(UtilitiesFunctions.getTypeFromValueType(pf.getReturnType()), UtilitiesFunctions.getReturnType(rt2.get(rt2.size() -1)))))
                error(TYPEMISMATCHFUNCTIONCOMPOSITIONRETURN, FPMLPackage.Literals.PURE_FUNCTION__RETURN_TYPE);
        }
    }

    @Check
    def FunctionCompositionReturnType(EffectFullFunction ef){
        val rt = ef.getFunctionBody();
        if (!(ef instanceof MainFunc) && rt instanceof CompositionFunctionBodyEffect) {
            val rt2 = (rt as CompositionFunctionBodyEffect).getFunctionChain();
            if(!(EcoreUtil.equals(UtilitiesFunctions.getReturnType(ef), UtilitiesFunctions.getReturnType(rt2.get(rt2.size() -1)))))
                error(TYPEMISMATCHFUNCTIONCOMPOSITIONRETURN, FPMLPackage.Literals.EFFECT_FULL_FUNCTION__RETURN_TYPE);
        }
    }

    @Check
    def FunctionCompositionArgType(PureFunction pf){
        val rt = pf.getFunctionBody();
        if (rt instanceof CompositionFunctionBodyPure) {
            val rt2 = rt.getFunctionChain();
            if(!(EcoreUtil.equals(pf.getArg().getType, UtilitiesFunctions.getArgType(rt2.get(0)))))
                error(TYPEMISMATCHFUNCTIONCOMPOSITIONARGS, FPMLPackage.Literals.PURE_FUNCTION__ARG);
        }
    }

    @Check
    def FunctionCompositionArgType(EffectFullFunction ef){
        val rt = ef.getFunctionBody();
        if (rt instanceof CompositionFunctionBodyEffect) {
            val rt2 = rt.getFunctionChain();
            val t = ef.getArg().getType()
            val t1 = UtilitiesFunctions.getArgType(rt2.get(0));
            if(!(EcoreUtil.equals(t, t1)))
                error(TYPEMISMATCHFUNCTIONCOMPOSITIONARGS, FPMLPackage.Literals.EFFECT_FULL_FUNCTION__ARG);
        }
    }

    @Check
    def EffectFullArgumentUnitTypeNoID(EffectFullArgument efa){
        if (efa.getType() instanceof UnitType && efa.getName() != null)
            error(EFFECTFULLARGUMENTUNITTYPEID, FPMLPackage.Literals.EFFECT_FULL_ARGUMENT__TYPE);
    }

    @Check
    def MainFuncReturnTypeCheck(MainFunc m) {
        val rt = m.getFunctionBody();
        if (rt instanceof CompositionFunctionBodyEffect) {
            val rt2 = rt.getFunctionChain();
            if(!(EcoreUtil.equals(m.getReturnType(), UtilitiesFunctions.getReturnType(rt2.get(rt2.size() -1)))))
                error(TYPEMISMATCHFUNCTIONCOMPOSITIONRETURN, FPMLPackage.Literals.MAIN_FUNC__RETURN_TYPE);
        }

        /*val factory = FPMLFactoryImpl.init()
        val main = factory.createEffectFullFunction()
        val mainReturnType = factory.createIOType();
        mainReturnType.setType(factory.createUnitType())
        main.setFunctionBody(m.getFunctionBody())
        main.setReturnType(mainReturnType)
        this.FunctionCompositionReturnType(main)*/
    }
}