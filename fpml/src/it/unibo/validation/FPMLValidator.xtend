/*
 * generated by Xtext 2.9.2
 */
package it.unibo.validation

import it.unibo.fPML.*
import org.eclipse.xtext.validation.Check
import org.eclipse.emf.ecore.util.EcoreUtil
import it.unibo.validation.UtilitiesFunctions

import org.eclipse.emf.ecore.EObject

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class FPMLValidator extends AbstractFPMLValidator {

    public static val TYPEMISMATCHFUNCTIONCOMPOSITION = "Type mismatch between the input of one function and the return of another in the function chain";
    public static val TYPEMISMATCHFUNCTIONCOMPOSITIONRETURN = "The return type of the last function and the outside function doesn't match";
    public static val TYPEMISMATCHFUNCTIONCOMPOSITIONARGS = "The argument type of the function is not the same as the first argument of the function chain";
    public static val EFFECTFULLARGUMENTUNITTYPEID = "The Unit Type don't require and ID";
    public static val TYPEVMISMATCHBETWEENVALUEANDDATA = "The value doesn't match the data declaration"

    @Check
    def CompositionFunctionTypePure(CompositionFunctionBodyPure cfbp ) {
    	var EObject t 
        if (cfbp.primitiveElement == null) { t = UtilitiesFunctions.getReturnType(cfbp.referenceElement); } 
        else { t = UtilitiesFunctions.getReturnType(cfbp.primitiveElement); }
        
        for (CompositionFunctionBodyPureFactor pf : cfbp.getFunctionChain()){
	        var EObject t1;
	        if (pf.primitiveElement == null) { t1 = UtilitiesFunctions.getArgType(pf.referenceElement); }
	        else t1 = UtilitiesFunctions.getArgType(pf.primitiveElement)
	        if(!(t1.eClass == t.eClass))
	           error(TYPEMISMATCHFUNCTIONCOMPOSITION, FPMLPackage.Literals.COMPOSITION_FUNCTION_BODY_PURE__FUNCTION_CHAIN );
            if (pf.primitiveElement == null) { t = UtilitiesFunctions.getReturnType(pf.referenceElement) }
	        else t = UtilitiesFunctions.getReturnType(pf.primitiveElement)
        }
    }

    @Check
    def CompositionFunctionTypeEffect(CompositionFunctionBodyEffect cfbe ) {
        val f1 = cfbe.getFunctionChain().head;
        var EObject t
        if (f1.primitiveElement == null) { t = UtilitiesFunctions.getReturnType(f1.referenceElement); }
        else t = UtilitiesFunctions.getReturnType(f1.primitiveElement);
        
        for (CompositionFunctionBodyEffectFullFactor ef : cfbe.getFunctionChain().tail) {
            if (!(ef instanceof Value)) {
                var EObject t1 
                if (f1.primitiveElement == null) { t1 = UtilitiesFunctions.getArgType(ef.referenceElement); }
        		else t1 = UtilitiesFunctions.getArgType(ef.primitiveElement);
                if(!(t1.eClass == t.eClass) && !(t1 instanceof UnitType))
                    error(TYPEMISMATCHFUNCTIONCOMPOSITION, FPMLPackage.Literals.COMPOSITION_FUNCTION_BODY_EFFECT__FUNCTION_CHAIN);
            }
            if (ef.primitiveElement == null) { t = UtilitiesFunctions.getReturnType(ef.referenceElement); }
            else t = UtilitiesFunctions.getReturnType(ef.primitiveElement);
        }
    }

    @Check
    def FunctionCompositionReturnType(PureFunctionDefinition pf){
        val rt = pf.getFunctionBody();
        if (rt instanceof CompositionFunctionBodyPure) {
            val rt2 = rt.getFunctionChain();
            if(!(EcoreUtil.equals(UtilitiesFunctions.getTypeFromValueType(pf.getReturnType()), UtilitiesFunctions.getReturnType(rt2.get(rt2.size() -1)))))
                error(TYPEMISMATCHFUNCTIONCOMPOSITIONRETURN, FPMLPackage.Literals.PURE_FUNCTION__RETURN_TYPE);
        }
    }

    @Check
    def FunctionCompositionReturnType(EffectFullFunctionDefinition ef){
        val rt = ef.getFunctionBody();
        if (!(ef instanceof MainFunc) && rt instanceof CompositionFunctionBodyEffect) {
            val rt2 = (rt as CompositionFunctionBodyEffect).getFunctionChain();
            if(!(EcoreUtil.equals(UtilitiesFunctions.getReturnType(ef), UtilitiesFunctions.getReturnType(rt2.get(rt2.size() -1)))))
                error(TYPEMISMATCHFUNCTIONCOMPOSITIONRETURN, FPMLPackage.Literals.EFFECT_FULL_FUNCTION__RETURN_TYPE);
        }
    }

    @Check
    def FunctionCompositionArgType(PureFunctionDefinition pf){
        val rt = pf.getFunctionBody();
        if (rt instanceof CompositionFunctionBodyPure) {
            val rt2 = rt.initialElement
            if((rt2 instanceof PureFunctionDefinition) && !(EcoreUtil.equals(pf.getArg().getType, UtilitiesFunctions.getArgType(rt2))))
                error(TYPEMISMATCHFUNCTIONCOMPOSITIONARGS, FPMLPackage.Literals.PURE_FUNCTION__ARG);
        }
    }

    @Check
    def FunctionCompositionArgType(EffectFullFunctionDefinition ef){
        val rt = ef.getFunctionBody();
        if (rt instanceof CompositionFunctionBodyEffect) {
            val rt2 = rt.getFunctionChain();
            val t = ef.getArg().getType()
            val t1 = (UtilitiesFunctions.getArgType(rt2.get(0)) as Type);
            if(!(EcoreUtil.equals(t, t1)))
                error(TYPEMISMATCHFUNCTIONCOMPOSITIONARGS, FPMLPackage.Literals.EFFECT_FULL_FUNCTION__ARG);
        }
    }

    @Check
    def EffectFullArgumentUnitTypeNoID(EffectFullArgument efa){
        if (efa.getType() instanceof UnitType && efa.getName() != null)
            error(EFFECTFULLARGUMENTUNITTYPEID, FPMLPackage.Literals.EFFECT_FULL_ARGUMENT__TYPE);
    }

    @Check
    def MainFuncReturnTypeCheck(MainFunc m) {
        val rt = m.getFunctionBody();
        if (rt instanceof CompositionFunctionBodyEffect) {
            val rt2 = rt.getFunctionChain();
            if(!(m.getReturnType().eClass == UtilitiesFunctions.getReturnType(rt2.get(rt2.size() -1)).eClass ))
                error(TYPEMISMATCHFUNCTIONCOMPOSITIONRETURN, FPMLPackage.Literals.MAIN_FUNC__RETURN_TYPE);
        }
    }
    
    @Check
    def ValueDataTypeCheck(DataValue dv) {
    	if (!UtilitiesFunctions.typeCheckDataAndValue(dv.value, dv.type.content))
    		error(TYPEVMISMATCHBETWEENVALUEANDDATA, FPMLPackage.Literals.DATA_VALUE__VALUE)
    }
}