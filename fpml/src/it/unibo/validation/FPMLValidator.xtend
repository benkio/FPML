/*
 * generated by Xtext 2.9.2
 */
package it.unibo.validation

import it.unibo.fPML.*
import org.eclipse.xtext.validation.Check
import org.eclipse.emf.ecore.util.EcoreUtil
import it.unibo.validation.UtilitiesFunctions

import org.eclipse.emf.ecore.EObject
import it.unibo.validation.utilitiesFunctions.*

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class FPMLValidator extends AbstractFPMLValidator {

    public static val TYPEMISMATCHFUNCTIONCOMPOSITION = "Type mismatch between the input of one function and the return of another in the function chain";
    public static val TYPEMISMATCHFUNCTIONCOMPOSITIONRETURN = "The return type of the last function and the outside function doesn't match";
    public static val TYPEMISMATCHFUNCTIONCOMPOSITIONLAMBDA = "The first argument of the product type in the lambda function chain doesn't match the return type of the function before the lambda"
    public static val TYPEMISMATCHFUNCTIONCOMPOSITIONARGS = "The argument type of the function is not the same as the first argument of the function chain";
    public static val EFFECTFULLARGUMENTUNITTYPEID = "The Unit Type don't require and ID";
    public static val TYPEVMISMATCHBETWEENVALUEANDDATA = "The value doesn't match the data declaration"

    @Check
    def CompositionFunctionTypePure(CompositionFunctionBodyPure cfbp ) {
    	var ValueType t = GetReturnType.getReturnValueType(Others.getFirstFunctionDefinitionFromCompositionBodyPure(cfbp), GetArgType.getArgTypeCompositionFunctionBodyPureContainer(cfbp));
        
        for (CompositionFunctionBodyPureFactor pf : cfbp.getFunctionChain()){
	        var ValueType t1 = GetArgType.getArgType(Others.getFunctionDefinitionFromPureFactor(pf), t);
	        if(!Checks.checkValueTypeEquals(t, t1))
	           error(TYPEMISMATCHFUNCTIONCOMPOSITION, FPMLPackage.Literals.COMPOSITION_FUNCTION_BODY_PURE__FUNCTION_CHAIN );
            t = GetReturnType.getReturnValueType(Others.getFunctionDefinitionFromPureFactor(pf), t)
        }
        
        if (cfbp.returnFunction != null) {
        		val firstElem = cfbp.returnFunction.lambdaFunctionBody.arg.type 
        		if (!Checks.isInputTypeCompatibleWithArgType(firstElem,t))
     			error(TYPEMISMATCHFUNCTIONCOMPOSITIONLAMBDA, FPMLPackage.Literals.COMPOSITION_FUNCTION_BODY_PURE__FUNCTION_CHAIN)
        }
    }

    @Check
    def CompositionFunctionTypeEffect(CompositionFunctionBodyEffect cfbe ) {
        var Type t = GetReturnType.getReturnEffectFullType(Others.getFirstFunctionDefinitionFromCompositionBodyEffectFull(cfbe), GetArgType.getArgTypeCompositionFunctionBodyEffectFullContainer(cfbe))
        
        for (CompositionFunctionBodyEffectFullFactor ef : cfbe.getFunctionChain()) {
        	val efElement = UtilitiesFunctions.getFunctionDefinitionFromEffectFullFactor(ef)
            if (!(efElement instanceof Value) && !(efElement instanceof EffectFullArgument)) {
                val Type t1 = UtilitiesFunctions.getArgType(efElement); 
                if(!UtilitiesFunctions.checkTypeEquals(t, t1))
                    error(TYPEMISMATCHFUNCTIONCOMPOSITION, FPMLPackage.Literals.COMPOSITION_FUNCTION_BODY_EFFECT__FUNCTION_CHAIN);
            }
            t = UtilitiesFunctions.getReturnType(efElement);
        }
        
        if (cfbe.returnFunction != null) {
          		val firstElem = cfbe.returnFunction.lambdaFunctionBody.arg.type 
        		if (!UtilitiesFunctions.isInputTypeCompatibleWithArgType(firstElem,t))
     			error(TYPEMISMATCHFUNCTIONCOMPOSITIONLAMBDA, FPMLPackage.Literals.COMPOSITION_FUNCTION_BODY_PURE__FUNCTION_CHAIN)
        	}
    }

    @Check
    def FunctionCompositionReturnType(PureFunctionDefinition pf){
        val rt = pf.getFunctionBody();
        if (rt != null && rt instanceof CompositionFunctionBodyPure) {
            val rt2 = UtilitiesFunctions.getFunctionDefinitionFromPureFactor((rt as CompositionFunctionBodyPure).getFunctionChain().get((rt as CompositionFunctionBodyPure).functionChain.size() -1));
            if(!(UtilitiesFunctions.checkValueTypeEquals(pf.getReturnType(), UtilitiesFunctions.getReturnType(rt2))))
                error(TYPEMISMATCHFUNCTIONCOMPOSITIONRETURN, FPMLPackage.Literals.PURE_FUNCTION_DEFINITION__RETURN_TYPE);
        }
    }

    @Check
    def FunctionCompositionReturnType(EffectFullFunctionDefinition ef){
        val rt = ef.getFunctionBody();
        if ( rt != null &&
        	rt instanceof CompositionFunctionBodyEffect && 
        	(rt as CompositionFunctionBodyEffect).returnFunction == null) {
            val rt2 = UtilitiesFunctions.getFunctionDefinitionFromEffectFullFactor((rt as CompositionFunctionBodyEffect).getFunctionChain().get((rt as CompositionFunctionBodyEffect).getFunctionChain().size() -1));
            if(!(UtilitiesFunctions.checkTypeEquals(UtilitiesFunctions.getReturnType(ef), UtilitiesFunctions.getReturnType(rt2))))
                error(TYPEMISMATCHFUNCTIONCOMPOSITIONRETURN, FPMLPackage.Literals.EFFECT_FULL_FUNCTION_DEFINITION__RETURN_TYPE);
        }
    }

    @Check
    def FunctionCompositionArgType(PureFunctionDefinition pf){
        val rt = pf.getFunctionBody();
        if (rt != null && rt instanceof CompositionFunctionBodyPure) {
            val rt2 = UtilitiesFunctions.getFirstFunctionDefinitionFromCompositionBodyPure((rt as CompositionFunctionBodyPure))
            if((rt2 instanceof PureFunctionDefinition) && !(UtilitiesFunctions.checkValueTypeEquals(pf.getArg().getType, UtilitiesFunctions.getArgType(rt2))))
                error(TYPEMISMATCHFUNCTIONCOMPOSITIONARGS, FPMLPackage.Literals.PURE_FUNCTION_DEFINITION__ARG);
        }
    }

    @Check
    def FunctionCompositionArgType(EffectFullFunctionDefinition ef){
        val rt = ef.getFunctionBody();
        if (rt != null && rt instanceof CompositionFunctionBodyEffect) {
            val t = ef.getArg().getType()
            val t1 = (UtilitiesFunctions.getArgType(UtilitiesFunctions.getFirstFunctionDefinitionFromCompositionBodyEffectFull((rt as CompositionFunctionBodyEffect))) as Type);
            if(!(UtilitiesFunctions.checkTypeEquals(t,t1)))
                error(TYPEMISMATCHFUNCTIONCOMPOSITIONARGS, FPMLPackage.Literals.EFFECT_FULL_FUNCTION_DEFINITION__ARG);
   		}
	}

    @Check
    def EffectFullArgumentUnitTypeNoID(EffectFullArgument efa){
        if (efa.getType() instanceof UnitType && efa.getName() != null)
            error(EFFECTFULLARGUMENTUNITTYPEID, FPMLPackage.Literals.EFFECT_FULL_ARGUMENT__TYPE);
    }

    @Check
    def MainFuncReturnTypeCheck(MainFunc m) {
        val rt = m.getFunctionBody();
        if (rt instanceof CompositionFunctionBodyEffect) {
            val rt2 = UtilitiesFunctions.getFunctionDefinitionFromEffectFullFactor(rt.getFunctionChain().get(rt.getFunctionChain().size() -1));
            if(!(UtilitiesFunctions.checkTypeEquals(m.getReturnType(), UtilitiesFunctions.getReturnType(rt2))))
                error(TYPEMISMATCHFUNCTIONCOMPOSITIONRETURN, FPMLPackage.Literals.MAIN_FUNC__RETURN_TYPE);
        }
    }
    
    @Check
    def ValueDataTypeCheck(DataValue dv) {
    	if (!UtilitiesFunctions.typeCheckDataAndValue(dv.value, dv.type.content))
    		error(TYPEVMISMATCHBETWEENVALUEANDDATA, FPMLPackage.Literals.DATA_VALUE__VALUE)
    }
}