/**
 * generated by Xtext 2.10.0
 */
package it.unibo.fPML.impl;

import it.unibo.fPML.Expression;
import it.unibo.fPML.FPMLPackage;
import it.unibo.fPML.PureFunction;
import it.unibo.fPML.PureIfBody;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Pure If Body</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link it.unibo.fPML.impl.PureIfBodyImpl#getFunctionReference <em>Function Reference</em>}</li>
 *   <li>{@link it.unibo.fPML.impl.PureIfBodyImpl#getFunctionExpression <em>Function Expression</em>}</li>
 * </ul>
 *
 * @generated
 */
public class PureIfBodyImpl extends MinimalEObjectImpl.Container implements PureIfBody
{
  /**
   * The cached value of the '{@link #getFunctionReference() <em>Function Reference</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFunctionReference()
   * @generated
   * @ordered
   */
  protected PureFunction functionReference;

  /**
   * The cached value of the '{@link #getFunctionExpression() <em>Function Expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFunctionExpression()
   * @generated
   * @ordered
   */
  protected Expression functionExpression;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PureIfBodyImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return FPMLPackage.Literals.PURE_IF_BODY;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PureFunction getFunctionReference()
  {
    if (functionReference != null && functionReference.eIsProxy())
    {
      InternalEObject oldFunctionReference = (InternalEObject)functionReference;
      functionReference = (PureFunction)eResolveProxy(oldFunctionReference);
      if (functionReference != oldFunctionReference)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, FPMLPackage.PURE_IF_BODY__FUNCTION_REFERENCE, oldFunctionReference, functionReference));
      }
    }
    return functionReference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PureFunction basicGetFunctionReference()
  {
    return functionReference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setFunctionReference(PureFunction newFunctionReference)
  {
    PureFunction oldFunctionReference = functionReference;
    functionReference = newFunctionReference;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FPMLPackage.PURE_IF_BODY__FUNCTION_REFERENCE, oldFunctionReference, functionReference));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expression getFunctionExpression()
  {
    return functionExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetFunctionExpression(Expression newFunctionExpression, NotificationChain msgs)
  {
    Expression oldFunctionExpression = functionExpression;
    functionExpression = newFunctionExpression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, FPMLPackage.PURE_IF_BODY__FUNCTION_EXPRESSION, oldFunctionExpression, newFunctionExpression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setFunctionExpression(Expression newFunctionExpression)
  {
    if (newFunctionExpression != functionExpression)
    {
      NotificationChain msgs = null;
      if (functionExpression != null)
        msgs = ((InternalEObject)functionExpression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - FPMLPackage.PURE_IF_BODY__FUNCTION_EXPRESSION, null, msgs);
      if (newFunctionExpression != null)
        msgs = ((InternalEObject)newFunctionExpression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - FPMLPackage.PURE_IF_BODY__FUNCTION_EXPRESSION, null, msgs);
      msgs = basicSetFunctionExpression(newFunctionExpression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FPMLPackage.PURE_IF_BODY__FUNCTION_EXPRESSION, newFunctionExpression, newFunctionExpression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case FPMLPackage.PURE_IF_BODY__FUNCTION_EXPRESSION:
        return basicSetFunctionExpression(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case FPMLPackage.PURE_IF_BODY__FUNCTION_REFERENCE:
        if (resolve) return getFunctionReference();
        return basicGetFunctionReference();
      case FPMLPackage.PURE_IF_BODY__FUNCTION_EXPRESSION:
        return getFunctionExpression();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case FPMLPackage.PURE_IF_BODY__FUNCTION_REFERENCE:
        setFunctionReference((PureFunction)newValue);
        return;
      case FPMLPackage.PURE_IF_BODY__FUNCTION_EXPRESSION:
        setFunctionExpression((Expression)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case FPMLPackage.PURE_IF_BODY__FUNCTION_REFERENCE:
        setFunctionReference((PureFunction)null);
        return;
      case FPMLPackage.PURE_IF_BODY__FUNCTION_EXPRESSION:
        setFunctionExpression((Expression)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case FPMLPackage.PURE_IF_BODY__FUNCTION_REFERENCE:
        return functionReference != null;
      case FPMLPackage.PURE_IF_BODY__FUNCTION_EXPRESSION:
        return functionExpression != null;
    }
    return super.eIsSet(featureID);
  }

} //PureIfBodyImpl
