/**
 * generated by Xtext 2.10.0
 */
package it.unibo.fPML.util;

import it.unibo.fPML.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see it.unibo.fPML.FPMLPackage
 * @generated
 */
public class FPMLAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static FPMLPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FPMLAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = FPMLPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FPMLSwitch<Adapter> modelSwitch =
    new FPMLSwitch<Adapter>()
    {
      @Override
      public Adapter caseModel(Model object)
      {
        return createModelAdapter();
      }
      @Override
      public Adapter casePureBlock(PureBlock object)
      {
        return createPureBlockAdapter();
      }
      @Override
      public Adapter casePureFunctionBlock(PureFunctionBlock object)
      {
        return createPureFunctionBlockAdapter();
      }
      @Override
      public Adapter casePureDataBlock(PureDataBlock object)
      {
        return createPureDataBlockAdapter();
      }
      @Override
      public Adapter casePureValueBlock(PureValueBlock object)
      {
        return createPureValueBlockAdapter();
      }
      @Override
      public Adapter caseEffectFullBlock(EffectFullBlock object)
      {
        return createEffectFullBlockAdapter();
      }
      @Override
      public Adapter caseEffectFullDataBlock(EffectFullDataBlock object)
      {
        return createEffectFullDataBlockAdapter();
      }
      @Override
      public Adapter caseEffectFullValueBlock(EffectFullValueBlock object)
      {
        return createEffectFullValueBlockAdapter();
      }
      @Override
      public Adapter caseEffectFullFunctionBlock(EffectFullFunctionBlock object)
      {
        return createEffectFullFunctionBlockAdapter();
      }
      @Override
      public Adapter casePureData(PureData object)
      {
        return createPureDataAdapter();
      }
      @Override
      public Adapter casePureFunctionDefinition(PureFunctionDefinition object)
      {
        return createPureFunctionDefinitionAdapter();
      }
      @Override
      public Adapter caseEffectFullData(EffectFullData object)
      {
        return createEffectFullDataAdapter();
      }
      @Override
      public Adapter caseEffectFullFunctionDefinition(EffectFullFunctionDefinition object)
      {
        return createEffectFullFunctionDefinitionAdapter();
      }
      @Override
      public Adapter caseMainFunc(MainFunc object)
      {
        return createMainFuncAdapter();
      }
      @Override
      public Adapter caseAdditionalPureArgument(AdditionalPureArgument object)
      {
        return createAdditionalPureArgumentAdapter();
      }
      @Override
      public Adapter caseAdditionalEffectFullArgument(AdditionalEffectFullArgument object)
      {
        return createAdditionalEffectFullArgumentAdapter();
      }
      @Override
      public Adapter caseFunction(Function object)
      {
        return createFunctionAdapter();
      }
      @Override
      public Adapter casePureFunction(PureFunction object)
      {
        return createPureFunctionAdapter();
      }
      @Override
      public Adapter caseEffectFullFunction(EffectFullFunction object)
      {
        return createEffectFullFunctionAdapter();
      }
      @Override
      public Adapter caseEffectFullReference(EffectFullReference object)
      {
        return createEffectFullReferenceAdapter();
      }
      @Override
      public Adapter casePrimitiveFunction(PrimitiveFunction object)
      {
        return createPrimitiveFunctionAdapter();
      }
      @Override
      public Adapter caseEffectFullArgument(EffectFullArgument object)
      {
        return createEffectFullArgumentAdapter();
      }
      @Override
      public Adapter caseArgument(Argument object)
      {
        return createArgumentAdapter();
      }
      @Override
      public Adapter caseFunctionBodyPure(FunctionBodyPure object)
      {
        return createFunctionBodyPureAdapter();
      }
      @Override
      public Adapter caseFunctionBodyEffectFull(FunctionBodyEffectFull object)
      {
        return createFunctionBodyEffectFullAdapter();
      }
      @Override
      public Adapter caseEmptyFunctionBody(EmptyFunctionBody object)
      {
        return createEmptyFunctionBodyAdapter();
      }
      @Override
      public Adapter caseCompositionFunctionBodyPure(CompositionFunctionBodyPure object)
      {
        return createCompositionFunctionBodyPureAdapter();
      }
      @Override
      public Adapter caseCompositionFunctionBodyPureFactor(CompositionFunctionBodyPureFactor object)
      {
        return createCompositionFunctionBodyPureFactorAdapter();
      }
      @Override
      public Adapter caseCompositionFunctionBodyEffect(CompositionFunctionBodyEffect object)
      {
        return createCompositionFunctionBodyEffectAdapter();
      }
      @Override
      public Adapter caseCompositionFunctionBodyEffectFullFactor(CompositionFunctionBodyEffectFullFactor object)
      {
        return createCompositionFunctionBodyEffectFullFactorAdapter();
      }
      @Override
      public Adapter caseIOType(IOType object)
      {
        return createIOTypeAdapter();
      }
      @Override
      public Adapter caseValueType(ValueType object)
      {
        return createValueTypeAdapter();
      }
      @Override
      public Adapter caseType(Type object)
      {
        return createTypeAdapter();
      }
      @Override
      public Adapter caseEffectFullType(EffectFullType object)
      {
        return createEffectFullTypeAdapter();
      }
      @Override
      public Adapter caseVoidType(VoidType object)
      {
        return createVoidTypeAdapter();
      }
      @Override
      public Adapter caseIntegerType(IntegerType object)
      {
        return createIntegerTypeAdapter();
      }
      @Override
      public Adapter caseStringType(StringType object)
      {
        return createStringTypeAdapter();
      }
      @Override
      public Adapter caseUnitType(UnitType object)
      {
        return createUnitTypeAdapter();
      }
      @Override
      public Adapter caseDataType(DataType object)
      {
        return createDataTypeAdapter();
      }
      @Override
      public Adapter caseEffectFullDataType(EffectFullDataType object)
      {
        return createEffectFullDataTypeAdapter();
      }
      @Override
      public Adapter casePureFunctionType(PureFunctionType object)
      {
        return createPureFunctionTypeAdapter();
      }
      @Override
      public Adapter caseEffectFullFunctionType(EffectFullFunctionType object)
      {
        return createEffectFullFunctionTypeAdapter();
      }
      @Override
      public Adapter casePureAlgebraicType(PureAlgebraicType object)
      {
        return createPureAlgebraicTypeAdapter();
      }
      @Override
      public Adapter casePureSumTypeFactor(PureSumTypeFactor object)
      {
        return createPureSumTypeFactorAdapter();
      }
      @Override
      public Adapter casePureProdTypeFactor(PureProdTypeFactor object)
      {
        return createPureProdTypeFactorAdapter();
      }
      @Override
      public Adapter caseEffectFullAlgebraicType(EffectFullAlgebraicType object)
      {
        return createEffectFullAlgebraicTypeAdapter();
      }
      @Override
      public Adapter caseEffectFullSumTypeFactor(EffectFullSumTypeFactor object)
      {
        return createEffectFullSumTypeFactorAdapter();
      }
      @Override
      public Adapter caseEffectFullProdTypeFactor(EffectFullProdTypeFactor object)
      {
        return createEffectFullProdTypeFactorAdapter();
      }
      @Override
      public Adapter caseEffectFullExpression(EffectFullExpression object)
      {
        return createEffectFullExpressionAdapter();
      }
      @Override
      public Adapter caseEffectFullValueRef(EffectFullValueRef object)
      {
        return createEffectFullValueRefAdapter();
      }
      @Override
      public Adapter caseExpression(Expression object)
      {
        return createExpressionAdapter();
      }
      @Override
      public Adapter casePureValueRef(PureValueRef object)
      {
        return createPureValueRefAdapter();
      }
      @Override
      public Adapter casePureAdtValue(PureAdtValue object)
      {
        return createPureAdtValueAdapter();
      }
      @Override
      public Adapter casePureProdValue(PureProdValue object)
      {
        return createPureProdValueAdapter();
      }
      @Override
      public Adapter casePureSumValue(PureSumValue object)
      {
        return createPureSumValueAdapter();
      }
      @Override
      public Adapter caseEffectFullAdtValue(EffectFullAdtValue object)
      {
        return createEffectFullAdtValueAdapter();
      }
      @Override
      public Adapter caseEffectFullProdValue(EffectFullProdValue object)
      {
        return createEffectFullProdValueAdapter();
      }
      @Override
      public Adapter caseEffectFullSumValue(EffectFullSumValue object)
      {
        return createEffectFullSumValueAdapter();
      }
      @Override
      public Adapter casePrimitivePureFunction(PrimitivePureFunction object)
      {
        return createPrimitivePureFunctionAdapter();
      }
      @Override
      public Adapter caseIntToString(IntToString object)
      {
        return createIntToStringAdapter();
      }
      @Override
      public Adapter caseIntPow(IntPow object)
      {
        return createIntPowAdapter();
      }
      @Override
      public Adapter casePlus(Plus object)
      {
        return createPlusAdapter();
      }
      @Override
      public Adapter caseMinus(Minus object)
      {
        return createMinusAdapter();
      }
      @Override
      public Adapter caseTimes(Times object)
      {
        return createTimesAdapter();
      }
      @Override
      public Adapter caseMod(Mod object)
      {
        return createModAdapter();
      }
      @Override
      public Adapter caseLeftPair(LeftPair object)
      {
        return createLeftPairAdapter();
      }
      @Override
      public Adapter caseRightPair(RightPair object)
      {
        return createRightPairAdapter();
      }
      @Override
      public Adapter caseApplyF(ApplyF object)
      {
        return createApplyFAdapter();
      }
      @Override
      public Adapter caseApplyFFactor(ApplyFFactor object)
      {
        return createApplyFFactorAdapter();
      }
      @Override
      public Adapter casePrimitiveEffectFullFunction(PrimitiveEffectFullFunction object)
      {
        return createPrimitiveEffectFullFunctionAdapter();
      }
      @Override
      public Adapter casePrimitivePrint(PrimitivePrint object)
      {
        return createPrimitivePrintAdapter();
      }
      @Override
      public Adapter caseLeftPairIO(LeftPairIO object)
      {
        return createLeftPairIOAdapter();
      }
      @Override
      public Adapter caseRightPairIO(RightPairIO object)
      {
        return createRightPairIOAdapter();
      }
      @Override
      public Adapter casePrimitiveEffectFullValue(PrimitiveEffectFullValue object)
      {
        return createPrimitiveEffectFullValueAdapter();
      }
      @Override
      public Adapter casePrimitiveRandom(PrimitiveRandom object)
      {
        return createPrimitiveRandomAdapter();
      }
      @Override
      public Adapter casePrimitiveReturn(PrimitiveReturn object)
      {
        return createPrimitiveReturnAdapter();
      }
      @Override
      public Adapter casePrimitiveTime(PrimitiveTime object)
      {
        return createPrimitiveTimeAdapter();
      }
      @Override
      public Adapter caseApplyFIO(ApplyFIO object)
      {
        return createApplyFIOAdapter();
      }
      @Override
      public Adapter caseApplyFIOFactor(ApplyFIOFactor object)
      {
        return createApplyFIOFactorAdapter();
      }
      @Override
      public Adapter casePureValue(PureValue object)
      {
        return createPureValueAdapter();
      }
      @Override
      public Adapter caseEffectFullValue(EffectFullValue object)
      {
        return createEffectFullValueAdapter();
      }
      @Override
      public Adapter caseRecursiveEffectFullExpression(RecursiveEffectFullExpression object)
      {
        return createRecursiveEffectFullExpressionAdapter();
      }
      @Override
      public Adapter caseEffectFullLambda(EffectFullLambda object)
      {
        return createEffectFullLambdaAdapter();
      }
      @Override
      public Adapter caseDataValue(DataValue object)
      {
        return createDataValueAdapter();
      }
      @Override
      public Adapter caseEffectFullDataValue(EffectFullDataValue object)
      {
        return createEffectFullDataValueAdapter();
      }
      @Override
      public Adapter casePureLambda(PureLambda object)
      {
        return createPureLambdaAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link it.unibo.fPML.Model <em>Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.fPML.Model
   * @generated
   */
  public Adapter createModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.fPML.PureBlock <em>Pure Block</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.fPML.PureBlock
   * @generated
   */
  public Adapter createPureBlockAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.fPML.PureFunctionBlock <em>Pure Function Block</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.fPML.PureFunctionBlock
   * @generated
   */
  public Adapter createPureFunctionBlockAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.fPML.PureDataBlock <em>Pure Data Block</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.fPML.PureDataBlock
   * @generated
   */
  public Adapter createPureDataBlockAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.fPML.PureValueBlock <em>Pure Value Block</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.fPML.PureValueBlock
   * @generated
   */
  public Adapter createPureValueBlockAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.fPML.EffectFullBlock <em>Effect Full Block</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.fPML.EffectFullBlock
   * @generated
   */
  public Adapter createEffectFullBlockAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.fPML.EffectFullDataBlock <em>Effect Full Data Block</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.fPML.EffectFullDataBlock
   * @generated
   */
  public Adapter createEffectFullDataBlockAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.fPML.EffectFullValueBlock <em>Effect Full Value Block</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.fPML.EffectFullValueBlock
   * @generated
   */
  public Adapter createEffectFullValueBlockAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.fPML.EffectFullFunctionBlock <em>Effect Full Function Block</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.fPML.EffectFullFunctionBlock
   * @generated
   */
  public Adapter createEffectFullFunctionBlockAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.fPML.PureData <em>Pure Data</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.fPML.PureData
   * @generated
   */
  public Adapter createPureDataAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.fPML.PureFunctionDefinition <em>Pure Function Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.fPML.PureFunctionDefinition
   * @generated
   */
  public Adapter createPureFunctionDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.fPML.EffectFullData <em>Effect Full Data</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.fPML.EffectFullData
   * @generated
   */
  public Adapter createEffectFullDataAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.fPML.EffectFullFunctionDefinition <em>Effect Full Function Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.fPML.EffectFullFunctionDefinition
   * @generated
   */
  public Adapter createEffectFullFunctionDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.fPML.MainFunc <em>Main Func</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.fPML.MainFunc
   * @generated
   */
  public Adapter createMainFuncAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.fPML.AdditionalPureArgument <em>Additional Pure Argument</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.fPML.AdditionalPureArgument
   * @generated
   */
  public Adapter createAdditionalPureArgumentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.fPML.AdditionalEffectFullArgument <em>Additional Effect Full Argument</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.fPML.AdditionalEffectFullArgument
   * @generated
   */
  public Adapter createAdditionalEffectFullArgumentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.fPML.Function <em>Function</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.fPML.Function
   * @generated
   */
  public Adapter createFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.fPML.PureFunction <em>Pure Function</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.fPML.PureFunction
   * @generated
   */
  public Adapter createPureFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.fPML.EffectFullFunction <em>Effect Full Function</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.fPML.EffectFullFunction
   * @generated
   */
  public Adapter createEffectFullFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.fPML.EffectFullReference <em>Effect Full Reference</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.fPML.EffectFullReference
   * @generated
   */
  public Adapter createEffectFullReferenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.fPML.PrimitiveFunction <em>Primitive Function</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.fPML.PrimitiveFunction
   * @generated
   */
  public Adapter createPrimitiveFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.fPML.EffectFullArgument <em>Effect Full Argument</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.fPML.EffectFullArgument
   * @generated
   */
  public Adapter createEffectFullArgumentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.fPML.Argument <em>Argument</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.fPML.Argument
   * @generated
   */
  public Adapter createArgumentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.fPML.FunctionBodyPure <em>Function Body Pure</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.fPML.FunctionBodyPure
   * @generated
   */
  public Adapter createFunctionBodyPureAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.fPML.FunctionBodyEffectFull <em>Function Body Effect Full</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.fPML.FunctionBodyEffectFull
   * @generated
   */
  public Adapter createFunctionBodyEffectFullAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.fPML.EmptyFunctionBody <em>Empty Function Body</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.fPML.EmptyFunctionBody
   * @generated
   */
  public Adapter createEmptyFunctionBodyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.fPML.CompositionFunctionBodyPure <em>Composition Function Body Pure</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.fPML.CompositionFunctionBodyPure
   * @generated
   */
  public Adapter createCompositionFunctionBodyPureAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.fPML.CompositionFunctionBodyPureFactor <em>Composition Function Body Pure Factor</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.fPML.CompositionFunctionBodyPureFactor
   * @generated
   */
  public Adapter createCompositionFunctionBodyPureFactorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.fPML.CompositionFunctionBodyEffect <em>Composition Function Body Effect</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.fPML.CompositionFunctionBodyEffect
   * @generated
   */
  public Adapter createCompositionFunctionBodyEffectAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.fPML.CompositionFunctionBodyEffectFullFactor <em>Composition Function Body Effect Full Factor</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.fPML.CompositionFunctionBodyEffectFullFactor
   * @generated
   */
  public Adapter createCompositionFunctionBodyEffectFullFactorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.fPML.IOType <em>IO Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.fPML.IOType
   * @generated
   */
  public Adapter createIOTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.fPML.ValueType <em>Value Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.fPML.ValueType
   * @generated
   */
  public Adapter createValueTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.fPML.Type <em>Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.fPML.Type
   * @generated
   */
  public Adapter createTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.fPML.EffectFullType <em>Effect Full Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.fPML.EffectFullType
   * @generated
   */
  public Adapter createEffectFullTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.fPML.VoidType <em>Void Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.fPML.VoidType
   * @generated
   */
  public Adapter createVoidTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.fPML.IntegerType <em>Integer Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.fPML.IntegerType
   * @generated
   */
  public Adapter createIntegerTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.fPML.StringType <em>String Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.fPML.StringType
   * @generated
   */
  public Adapter createStringTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.fPML.UnitType <em>Unit Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.fPML.UnitType
   * @generated
   */
  public Adapter createUnitTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.fPML.DataType <em>Data Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.fPML.DataType
   * @generated
   */
  public Adapter createDataTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.fPML.EffectFullDataType <em>Effect Full Data Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.fPML.EffectFullDataType
   * @generated
   */
  public Adapter createEffectFullDataTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.fPML.PureFunctionType <em>Pure Function Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.fPML.PureFunctionType
   * @generated
   */
  public Adapter createPureFunctionTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.fPML.EffectFullFunctionType <em>Effect Full Function Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.fPML.EffectFullFunctionType
   * @generated
   */
  public Adapter createEffectFullFunctionTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.fPML.PureAlgebraicType <em>Pure Algebraic Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.fPML.PureAlgebraicType
   * @generated
   */
  public Adapter createPureAlgebraicTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.fPML.PureSumTypeFactor <em>Pure Sum Type Factor</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.fPML.PureSumTypeFactor
   * @generated
   */
  public Adapter createPureSumTypeFactorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.fPML.PureProdTypeFactor <em>Pure Prod Type Factor</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.fPML.PureProdTypeFactor
   * @generated
   */
  public Adapter createPureProdTypeFactorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.fPML.EffectFullAlgebraicType <em>Effect Full Algebraic Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.fPML.EffectFullAlgebraicType
   * @generated
   */
  public Adapter createEffectFullAlgebraicTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.fPML.EffectFullSumTypeFactor <em>Effect Full Sum Type Factor</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.fPML.EffectFullSumTypeFactor
   * @generated
   */
  public Adapter createEffectFullSumTypeFactorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.fPML.EffectFullProdTypeFactor <em>Effect Full Prod Type Factor</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.fPML.EffectFullProdTypeFactor
   * @generated
   */
  public Adapter createEffectFullProdTypeFactorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.fPML.EffectFullExpression <em>Effect Full Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.fPML.EffectFullExpression
   * @generated
   */
  public Adapter createEffectFullExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.fPML.EffectFullValueRef <em>Effect Full Value Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.fPML.EffectFullValueRef
   * @generated
   */
  public Adapter createEffectFullValueRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.fPML.Expression <em>Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.fPML.Expression
   * @generated
   */
  public Adapter createExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.fPML.PureValueRef <em>Pure Value Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.fPML.PureValueRef
   * @generated
   */
  public Adapter createPureValueRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.fPML.PureAdtValue <em>Pure Adt Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.fPML.PureAdtValue
   * @generated
   */
  public Adapter createPureAdtValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.fPML.PureProdValue <em>Pure Prod Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.fPML.PureProdValue
   * @generated
   */
  public Adapter createPureProdValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.fPML.PureSumValue <em>Pure Sum Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.fPML.PureSumValue
   * @generated
   */
  public Adapter createPureSumValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.fPML.EffectFullAdtValue <em>Effect Full Adt Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.fPML.EffectFullAdtValue
   * @generated
   */
  public Adapter createEffectFullAdtValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.fPML.EffectFullProdValue <em>Effect Full Prod Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.fPML.EffectFullProdValue
   * @generated
   */
  public Adapter createEffectFullProdValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.fPML.EffectFullSumValue <em>Effect Full Sum Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.fPML.EffectFullSumValue
   * @generated
   */
  public Adapter createEffectFullSumValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.fPML.PrimitivePureFunction <em>Primitive Pure Function</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.fPML.PrimitivePureFunction
   * @generated
   */
  public Adapter createPrimitivePureFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.fPML.IntToString <em>Int To String</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.fPML.IntToString
   * @generated
   */
  public Adapter createIntToStringAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.fPML.IntPow <em>Int Pow</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.fPML.IntPow
   * @generated
   */
  public Adapter createIntPowAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.fPML.Plus <em>Plus</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.fPML.Plus
   * @generated
   */
  public Adapter createPlusAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.fPML.Minus <em>Minus</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.fPML.Minus
   * @generated
   */
  public Adapter createMinusAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.fPML.Times <em>Times</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.fPML.Times
   * @generated
   */
  public Adapter createTimesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.fPML.Mod <em>Mod</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.fPML.Mod
   * @generated
   */
  public Adapter createModAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.fPML.LeftPair <em>Left Pair</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.fPML.LeftPair
   * @generated
   */
  public Adapter createLeftPairAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.fPML.RightPair <em>Right Pair</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.fPML.RightPair
   * @generated
   */
  public Adapter createRightPairAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.fPML.ApplyF <em>Apply F</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.fPML.ApplyF
   * @generated
   */
  public Adapter createApplyFAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.fPML.ApplyFFactor <em>Apply FFactor</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.fPML.ApplyFFactor
   * @generated
   */
  public Adapter createApplyFFactorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.fPML.PrimitiveEffectFullFunction <em>Primitive Effect Full Function</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.fPML.PrimitiveEffectFullFunction
   * @generated
   */
  public Adapter createPrimitiveEffectFullFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.fPML.PrimitivePrint <em>Primitive Print</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.fPML.PrimitivePrint
   * @generated
   */
  public Adapter createPrimitivePrintAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.fPML.LeftPairIO <em>Left Pair IO</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.fPML.LeftPairIO
   * @generated
   */
  public Adapter createLeftPairIOAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.fPML.RightPairIO <em>Right Pair IO</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.fPML.RightPairIO
   * @generated
   */
  public Adapter createRightPairIOAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.fPML.PrimitiveEffectFullValue <em>Primitive Effect Full Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.fPML.PrimitiveEffectFullValue
   * @generated
   */
  public Adapter createPrimitiveEffectFullValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.fPML.PrimitiveRandom <em>Primitive Random</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.fPML.PrimitiveRandom
   * @generated
   */
  public Adapter createPrimitiveRandomAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.fPML.PrimitiveReturn <em>Primitive Return</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.fPML.PrimitiveReturn
   * @generated
   */
  public Adapter createPrimitiveReturnAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.fPML.PrimitiveTime <em>Primitive Time</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.fPML.PrimitiveTime
   * @generated
   */
  public Adapter createPrimitiveTimeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.fPML.ApplyFIO <em>Apply FIO</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.fPML.ApplyFIO
   * @generated
   */
  public Adapter createApplyFIOAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.fPML.ApplyFIOFactor <em>Apply FIO Factor</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.fPML.ApplyFIOFactor
   * @generated
   */
  public Adapter createApplyFIOFactorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.fPML.PureValue <em>Pure Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.fPML.PureValue
   * @generated
   */
  public Adapter createPureValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.fPML.EffectFullValue <em>Effect Full Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.fPML.EffectFullValue
   * @generated
   */
  public Adapter createEffectFullValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.fPML.RecursiveEffectFullExpression <em>Recursive Effect Full Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.fPML.RecursiveEffectFullExpression
   * @generated
   */
  public Adapter createRecursiveEffectFullExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.fPML.EffectFullLambda <em>Effect Full Lambda</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.fPML.EffectFullLambda
   * @generated
   */
  public Adapter createEffectFullLambdaAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.fPML.DataValue <em>Data Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.fPML.DataValue
   * @generated
   */
  public Adapter createDataValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.fPML.EffectFullDataValue <em>Effect Full Data Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.fPML.EffectFullDataValue
   * @generated
   */
  public Adapter createEffectFullDataValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.fPML.PureLambda <em>Pure Lambda</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.fPML.PureLambda
   * @generated
   */
  public Adapter createPureLambdaAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //FPMLAdapterFactory
