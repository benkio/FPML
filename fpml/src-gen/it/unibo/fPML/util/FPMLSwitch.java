/**
 * generated by Xtext 2.10.0
 */
package it.unibo.fPML.util;

import it.unibo.fPML.*;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see it.unibo.fPML.FPMLPackage
 * @generated
 */
public class FPMLSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static FPMLPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FPMLSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = FPMLPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case FPMLPackage.MODEL:
      {
        Model model = (Model)theEObject;
        T result = caseModel(model);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.PURE_BLOCK:
      {
        PureBlock pureBlock = (PureBlock)theEObject;
        T result = casePureBlock(pureBlock);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.PURE_FUNCTION_BLOCK:
      {
        PureFunctionBlock pureFunctionBlock = (PureFunctionBlock)theEObject;
        T result = casePureFunctionBlock(pureFunctionBlock);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.PURE_DATA_BLOCK:
      {
        PureDataBlock pureDataBlock = (PureDataBlock)theEObject;
        T result = casePureDataBlock(pureDataBlock);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.PURE_VALUE_BLOCK:
      {
        PureValueBlock pureValueBlock = (PureValueBlock)theEObject;
        T result = casePureValueBlock(pureValueBlock);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.EFFECT_FULL_BLOCK:
      {
        EffectFullBlock effectFullBlock = (EffectFullBlock)theEObject;
        T result = caseEffectFullBlock(effectFullBlock);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.EFFECT_FULL_DATA_BLOCK:
      {
        EffectFullDataBlock effectFullDataBlock = (EffectFullDataBlock)theEObject;
        T result = caseEffectFullDataBlock(effectFullDataBlock);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.EFFECT_FULL_VALUE_BLOCK:
      {
        EffectFullValueBlock effectFullValueBlock = (EffectFullValueBlock)theEObject;
        T result = caseEffectFullValueBlock(effectFullValueBlock);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.EFFECT_FULL_FUNCTION_BLOCK:
      {
        EffectFullFunctionBlock effectFullFunctionBlock = (EffectFullFunctionBlock)theEObject;
        T result = caseEffectFullFunctionBlock(effectFullFunctionBlock);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.PURE_DATA:
      {
        PureData pureData = (PureData)theEObject;
        T result = casePureData(pureData);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.PURE_FUNCTION_DEFINITION:
      {
        PureFunctionDefinition pureFunctionDefinition = (PureFunctionDefinition)theEObject;
        T result = casePureFunctionDefinition(pureFunctionDefinition);
        if (result == null) result = casePureFunction(pureFunctionDefinition);
        if (result == null) result = caseFunction(pureFunctionDefinition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.EFFECT_FULL_DATA:
      {
        EffectFullData effectFullData = (EffectFullData)theEObject;
        T result = caseEffectFullData(effectFullData);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.EFFECT_FULL_FUNCTION_DEFINITION:
      {
        EffectFullFunctionDefinition effectFullFunctionDefinition = (EffectFullFunctionDefinition)theEObject;
        T result = caseEffectFullFunctionDefinition(effectFullFunctionDefinition);
        if (result == null) result = caseEffectFullFunction(effectFullFunctionDefinition);
        if (result == null) result = caseFunction(effectFullFunctionDefinition);
        if (result == null) result = caseEffectFullBodyContent(effectFullFunctionDefinition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.MAIN_FUNC:
      {
        MainFunc mainFunc = (MainFunc)theEObject;
        T result = caseMainFunc(mainFunc);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.ADDITIONAL_PURE_ARGUMENT:
      {
        AdditionalPureArgument additionalPureArgument = (AdditionalPureArgument)theEObject;
        T result = caseAdditionalPureArgument(additionalPureArgument);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.ADDITIONAL_EFFECT_FULL_ARGUMENT:
      {
        AdditionalEffectFullArgument additionalEffectFullArgument = (AdditionalEffectFullArgument)theEObject;
        T result = caseAdditionalEffectFullArgument(additionalEffectFullArgument);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.FUNCTION:
      {
        Function function = (Function)theEObject;
        T result = caseFunction(function);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.PURE_FUNCTION:
      {
        PureFunction pureFunction = (PureFunction)theEObject;
        T result = casePureFunction(pureFunction);
        if (result == null) result = caseFunction(pureFunction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.EFFECT_FULL_FUNCTION:
      {
        EffectFullFunction effectFullFunction = (EffectFullFunction)theEObject;
        T result = caseEffectFullFunction(effectFullFunction);
        if (result == null) result = caseFunction(effectFullFunction);
        if (result == null) result = caseEffectFullBodyContent(effectFullFunction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.PRIMITIVE_FUNCTION:
      {
        PrimitiveFunction primitiveFunction = (PrimitiveFunction)theEObject;
        T result = casePrimitiveFunction(primitiveFunction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.EFFECT_FULL_PRIMITIVE:
      {
        EffectFullPrimitive effectFullPrimitive = (EffectFullPrimitive)theEObject;
        T result = caseEffectFullPrimitive(effectFullPrimitive);
        if (result == null) result = casePrimitiveFunction(effectFullPrimitive);
        if (result == null) result = caseEffectFullBodyContent(effectFullPrimitive);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.EFFECT_FULL_BODY_CONTENT:
      {
        EffectFullBodyContent effectFullBodyContent = (EffectFullBodyContent)theEObject;
        T result = caseEffectFullBodyContent(effectFullBodyContent);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.ARGUMENT:
      {
        Argument argument = (Argument)theEObject;
        T result = caseArgument(argument);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.EFFECT_FULL_ARGUMENT:
      {
        EffectFullArgument effectFullArgument = (EffectFullArgument)theEObject;
        T result = caseEffectFullArgument(effectFullArgument);
        if (result == null) result = caseEffectFullFunction(effectFullArgument);
        if (result == null) result = caseArgument(effectFullArgument);
        if (result == null) result = caseFunction(effectFullArgument);
        if (result == null) result = caseEffectFullBodyContent(effectFullArgument);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.PURE_ARGUMENT:
      {
        PureArgument pureArgument = (PureArgument)theEObject;
        T result = casePureArgument(pureArgument);
        if (result == null) result = casePureFunction(pureArgument);
        if (result == null) result = caseArgument(pureArgument);
        if (result == null) result = caseFunction(pureArgument);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.FUNCTION_BODY_PURE:
      {
        FunctionBodyPure functionBodyPure = (FunctionBodyPure)theEObject;
        T result = caseFunctionBodyPure(functionBodyPure);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.FUNCTION_BODY_EFFECT_FULL:
      {
        FunctionBodyEffectFull functionBodyEffectFull = (FunctionBodyEffectFull)theEObject;
        T result = caseFunctionBodyEffectFull(functionBodyEffectFull);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.EMPTY_FUNCTION_BODY:
      {
        EmptyFunctionBody emptyFunctionBody = (EmptyFunctionBody)theEObject;
        T result = caseEmptyFunctionBody(emptyFunctionBody);
        if (result == null) result = caseFunctionBodyPure(emptyFunctionBody);
        if (result == null) result = caseFunctionBodyEffectFull(emptyFunctionBody);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.COMPOSITION_FUNCTION_BODY_PURE:
      {
        CompositionFunctionBodyPure compositionFunctionBodyPure = (CompositionFunctionBodyPure)theEObject;
        T result = caseCompositionFunctionBodyPure(compositionFunctionBodyPure);
        if (result == null) result = caseFunctionBodyPure(compositionFunctionBodyPure);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.COMPOSITION_FUNCTION_BODY_PURE_FACTOR:
      {
        CompositionFunctionBodyPureFactor compositionFunctionBodyPureFactor = (CompositionFunctionBodyPureFactor)theEObject;
        T result = caseCompositionFunctionBodyPureFactor(compositionFunctionBodyPureFactor);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.COMPOSITION_FUNCTION_BODY_EFFECT:
      {
        CompositionFunctionBodyEffect compositionFunctionBodyEffect = (CompositionFunctionBodyEffect)theEObject;
        T result = caseCompositionFunctionBodyEffect(compositionFunctionBodyEffect);
        if (result == null) result = caseFunctionBodyEffectFull(compositionFunctionBodyEffect);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.COMPOSITION_FUNCTION_BODY_EFFECT_FULL_FACTOR:
      {
        CompositionFunctionBodyEffectFullFactor compositionFunctionBodyEffectFullFactor = (CompositionFunctionBodyEffectFullFactor)theEObject;
        T result = caseCompositionFunctionBodyEffectFullFactor(compositionFunctionBodyEffectFullFactor);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.IO_TYPE:
      {
        IOType ioType = (IOType)theEObject;
        T result = caseIOType(ioType);
        if (result == null) result = caseEffectFullType(ioType);
        if (result == null) result = caseType(ioType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.VALUE_TYPE:
      {
        ValueType valueType = (ValueType)theEObject;
        T result = caseValueType(valueType);
        if (result == null) result = caseType(valueType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.TYPE:
      {
        Type type = (Type)theEObject;
        T result = caseType(type);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.EFFECT_FULL_TYPE:
      {
        EffectFullType effectFullType = (EffectFullType)theEObject;
        T result = caseEffectFullType(effectFullType);
        if (result == null) result = caseType(effectFullType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.VOID_TYPE:
      {
        VoidType voidType = (VoidType)theEObject;
        T result = caseVoidType(voidType);
        if (result == null) result = caseEffectFullType(voidType);
        if (result == null) result = caseType(voidType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.INTEGER_TYPE:
      {
        IntegerType integerType = (IntegerType)theEObject;
        T result = caseIntegerType(integerType);
        if (result == null) result = caseValueType(integerType);
        if (result == null) result = caseExpression(integerType);
        if (result == null) result = caseType(integerType);
        if (result == null) result = casePureFunction(integerType);
        if (result == null) result = caseFunction(integerType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.STRING_TYPE:
      {
        StringType stringType = (StringType)theEObject;
        T result = caseStringType(stringType);
        if (result == null) result = caseValueType(stringType);
        if (result == null) result = caseExpression(stringType);
        if (result == null) result = caseType(stringType);
        if (result == null) result = casePureFunction(stringType);
        if (result == null) result = caseFunction(stringType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.BOOLEAN_TYPE:
      {
        BooleanType booleanType = (BooleanType)theEObject;
        T result = caseBooleanType(booleanType);
        if (result == null) result = caseValueType(booleanType);
        if (result == null) result = caseExpression(booleanType);
        if (result == null) result = caseType(booleanType);
        if (result == null) result = casePureFunction(booleanType);
        if (result == null) result = caseFunction(booleanType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.UNIT_TYPE:
      {
        UnitType unitType = (UnitType)theEObject;
        T result = caseUnitType(unitType);
        if (result == null) result = caseValueType(unitType);
        if (result == null) result = caseExpression(unitType);
        if (result == null) result = caseType(unitType);
        if (result == null) result = casePureFunction(unitType);
        if (result == null) result = caseFunction(unitType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.DATA_TYPE:
      {
        DataType dataType = (DataType)theEObject;
        T result = caseDataType(dataType);
        if (result == null) result = caseValueType(dataType);
        if (result == null) result = caseExpression(dataType);
        if (result == null) result = caseType(dataType);
        if (result == null) result = casePureFunction(dataType);
        if (result == null) result = caseFunction(dataType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.EFFECT_FULL_DATA_TYPE:
      {
        EffectFullDataType effectFullDataType = (EffectFullDataType)theEObject;
        T result = caseEffectFullDataType(effectFullDataType);
        if (result == null) result = caseEffectFullType(effectFullDataType);
        if (result == null) result = caseEffectFullExpression(effectFullDataType);
        if (result == null) result = caseType(effectFullDataType);
        if (result == null) result = caseEffectFullBodyContent(effectFullDataType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.PURE_FUNCTION_TYPE:
      {
        PureFunctionType pureFunctionType = (PureFunctionType)theEObject;
        T result = casePureFunctionType(pureFunctionType);
        if (result == null) result = caseValueType(pureFunctionType);
        if (result == null) result = caseExpression(pureFunctionType);
        if (result == null) result = caseType(pureFunctionType);
        if (result == null) result = casePureFunction(pureFunctionType);
        if (result == null) result = caseFunction(pureFunctionType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.EFFECT_FULL_FUNCTION_TYPE:
      {
        EffectFullFunctionType effectFullFunctionType = (EffectFullFunctionType)theEObject;
        T result = caseEffectFullFunctionType(effectFullFunctionType);
        if (result == null) result = caseEffectFullType(effectFullFunctionType);
        if (result == null) result = caseEffectFullExpression(effectFullFunctionType);
        if (result == null) result = caseType(effectFullFunctionType);
        if (result == null) result = caseEffectFullBodyContent(effectFullFunctionType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.PURE_ALGEBRAIC_TYPE:
      {
        PureAlgebraicType pureAlgebraicType = (PureAlgebraicType)theEObject;
        T result = casePureAlgebraicType(pureAlgebraicType);
        if (result == null) result = caseValueType(pureAlgebraicType);
        if (result == null) result = caseExpression(pureAlgebraicType);
        if (result == null) result = caseType(pureAlgebraicType);
        if (result == null) result = casePureFunction(pureAlgebraicType);
        if (result == null) result = caseFunction(pureAlgebraicType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.PURE_SUM_TYPE_FACTOR:
      {
        PureSumTypeFactor pureSumTypeFactor = (PureSumTypeFactor)theEObject;
        T result = casePureSumTypeFactor(pureSumTypeFactor);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.PURE_PROD_TYPE_FACTOR:
      {
        PureProdTypeFactor pureProdTypeFactor = (PureProdTypeFactor)theEObject;
        T result = casePureProdTypeFactor(pureProdTypeFactor);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.EFFECT_FULL_ALGEBRAIC_TYPE:
      {
        EffectFullAlgebraicType effectFullAlgebraicType = (EffectFullAlgebraicType)theEObject;
        T result = caseEffectFullAlgebraicType(effectFullAlgebraicType);
        if (result == null) result = caseEffectFullType(effectFullAlgebraicType);
        if (result == null) result = caseEffectFullExpression(effectFullAlgebraicType);
        if (result == null) result = caseType(effectFullAlgebraicType);
        if (result == null) result = caseEffectFullBodyContent(effectFullAlgebraicType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.EFFECT_FULL_SUM_TYPE_FACTOR:
      {
        EffectFullSumTypeFactor effectFullSumTypeFactor = (EffectFullSumTypeFactor)theEObject;
        T result = caseEffectFullSumTypeFactor(effectFullSumTypeFactor);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.EFFECT_FULL_PROD_TYPE_FACTOR:
      {
        EffectFullProdTypeFactor effectFullProdTypeFactor = (EffectFullProdTypeFactor)theEObject;
        T result = caseEffectFullProdTypeFactor(effectFullProdTypeFactor);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.EFFECT_FULL_EXPRESSION:
      {
        EffectFullExpression effectFullExpression = (EffectFullExpression)theEObject;
        T result = caseEffectFullExpression(effectFullExpression);
        if (result == null) result = caseEffectFullBodyContent(effectFullExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.EFFECT_FULL_VALUE_REF:
      {
        EffectFullValueRef effectFullValueRef = (EffectFullValueRef)theEObject;
        T result = caseEffectFullValueRef(effectFullValueRef);
        if (result == null) result = caseEffectFullExpression(effectFullValueRef);
        if (result == null) result = caseEffectFullBodyContent(effectFullValueRef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.EXPRESSION:
      {
        Expression expression = (Expression)theEObject;
        T result = caseExpression(expression);
        if (result == null) result = casePureFunction(expression);
        if (result == null) result = caseFunction(expression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.PURE_VALUE_REF:
      {
        PureValueRef pureValueRef = (PureValueRef)theEObject;
        T result = casePureValueRef(pureValueRef);
        if (result == null) result = caseExpression(pureValueRef);
        if (result == null) result = casePureFunction(pureValueRef);
        if (result == null) result = caseFunction(pureValueRef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.PRIMITIVE_PURE_FUNCTION:
      {
        PrimitivePureFunction primitivePureFunction = (PrimitivePureFunction)theEObject;
        T result = casePrimitivePureFunction(primitivePureFunction);
        if (result == null) result = casePureFunction(primitivePureFunction);
        if (result == null) result = casePrimitiveFunction(primitivePureFunction);
        if (result == null) result = caseFunction(primitivePureFunction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.INT_TO_STRING:
      {
        IntToString intToString = (IntToString)theEObject;
        T result = caseIntToString(intToString);
        if (result == null) result = casePrimitivePureFunction(intToString);
        if (result == null) result = casePureFunction(intToString);
        if (result == null) result = casePrimitiveFunction(intToString);
        if (result == null) result = caseFunction(intToString);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.INT_POW:
      {
        IntPow intPow = (IntPow)theEObject;
        T result = caseIntPow(intPow);
        if (result == null) result = casePrimitivePureFunction(intPow);
        if (result == null) result = casePureFunction(intPow);
        if (result == null) result = casePrimitiveFunction(intPow);
        if (result == null) result = caseFunction(intPow);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.PLUS:
      {
        Plus plus = (Plus)theEObject;
        T result = casePlus(plus);
        if (result == null) result = casePrimitivePureFunction(plus);
        if (result == null) result = casePureFunction(plus);
        if (result == null) result = casePrimitiveFunction(plus);
        if (result == null) result = caseFunction(plus);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.MINUS:
      {
        Minus minus = (Minus)theEObject;
        T result = caseMinus(minus);
        if (result == null) result = casePrimitivePureFunction(minus);
        if (result == null) result = casePureFunction(minus);
        if (result == null) result = casePrimitiveFunction(minus);
        if (result == null) result = caseFunction(minus);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.TIMES:
      {
        Times times = (Times)theEObject;
        T result = caseTimes(times);
        if (result == null) result = casePrimitivePureFunction(times);
        if (result == null) result = casePureFunction(times);
        if (result == null) result = casePrimitiveFunction(times);
        if (result == null) result = caseFunction(times);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.MOD:
      {
        Mod mod = (Mod)theEObject;
        T result = caseMod(mod);
        if (result == null) result = casePrimitivePureFunction(mod);
        if (result == null) result = casePureFunction(mod);
        if (result == null) result = casePrimitiveFunction(mod);
        if (result == null) result = caseFunction(mod);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.LEFT_PAIR:
      {
        LeftPair leftPair = (LeftPair)theEObject;
        T result = caseLeftPair(leftPair);
        if (result == null) result = casePrimitivePureFunction(leftPair);
        if (result == null) result = casePureFunction(leftPair);
        if (result == null) result = casePrimitiveFunction(leftPair);
        if (result == null) result = caseFunction(leftPair);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.RIGHT_PAIR:
      {
        RightPair rightPair = (RightPair)theEObject;
        T result = caseRightPair(rightPair);
        if (result == null) result = casePrimitivePureFunction(rightPair);
        if (result == null) result = casePureFunction(rightPair);
        if (result == null) result = casePrimitiveFunction(rightPair);
        if (result == null) result = caseFunction(rightPair);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.APPLY_F:
      {
        ApplyF applyF = (ApplyF)theEObject;
        T result = caseApplyF(applyF);
        if (result == null) result = casePrimitivePureFunction(applyF);
        if (result == null) result = casePureFunction(applyF);
        if (result == null) result = casePrimitiveFunction(applyF);
        if (result == null) result = caseFunction(applyF);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.APPLY_FFACTOR:
      {
        ApplyFFactor applyFFactor = (ApplyFFactor)theEObject;
        T result = caseApplyFFactor(applyFFactor);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.EQUALS:
      {
        Equals equals = (Equals)theEObject;
        T result = caseEquals(equals);
        if (result == null) result = casePrimitivePureFunction(equals);
        if (result == null) result = casePureFunction(equals);
        if (result == null) result = casePrimitiveFunction(equals);
        if (result == null) result = caseFunction(equals);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.MINOR_EQUALS:
      {
        MinorEquals minorEquals = (MinorEquals)theEObject;
        T result = caseMinorEquals(minorEquals);
        if (result == null) result = casePrimitivePureFunction(minorEquals);
        if (result == null) result = casePureFunction(minorEquals);
        if (result == null) result = casePrimitiveFunction(minorEquals);
        if (result == null) result = caseFunction(minorEquals);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.MAJOR_EQUALS:
      {
        MajorEquals majorEquals = (MajorEquals)theEObject;
        T result = caseMajorEquals(majorEquals);
        if (result == null) result = casePrimitivePureFunction(majorEquals);
        if (result == null) result = casePureFunction(majorEquals);
        if (result == null) result = casePrimitiveFunction(majorEquals);
        if (result == null) result = caseFunction(majorEquals);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.MINOR:
      {
        Minor minor = (Minor)theEObject;
        T result = caseMinor(minor);
        if (result == null) result = casePrimitivePureFunction(minor);
        if (result == null) result = casePureFunction(minor);
        if (result == null) result = casePrimitiveFunction(minor);
        if (result == null) result = caseFunction(minor);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.MAJOR:
      {
        Major major = (Major)theEObject;
        T result = caseMajor(major);
        if (result == null) result = casePrimitivePureFunction(major);
        if (result == null) result = casePureFunction(major);
        if (result == null) result = casePrimitiveFunction(major);
        if (result == null) result = caseFunction(major);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.LOGIC_AND:
      {
        LogicAnd logicAnd = (LogicAnd)theEObject;
        T result = caseLogicAnd(logicAnd);
        if (result == null) result = casePrimitivePureFunction(logicAnd);
        if (result == null) result = casePureFunction(logicAnd);
        if (result == null) result = casePrimitiveFunction(logicAnd);
        if (result == null) result = caseFunction(logicAnd);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.LOGIC_OR:
      {
        LogicOr logicOr = (LogicOr)theEObject;
        T result = caseLogicOr(logicOr);
        if (result == null) result = casePrimitivePureFunction(logicOr);
        if (result == null) result = casePureFunction(logicOr);
        if (result == null) result = casePrimitiveFunction(logicOr);
        if (result == null) result = caseFunction(logicOr);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.EXTRACT_PURE:
      {
        ExtractPure extractPure = (ExtractPure)theEObject;
        T result = caseExtractPure(extractPure);
        if (result == null) result = casePrimitivePureFunction(extractPure);
        if (result == null) result = casePureFunction(extractPure);
        if (result == null) result = casePrimitiveFunction(extractPure);
        if (result == null) result = caseFunction(extractPure);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.PRIMITIVE_EFFECT_FULL_FUNCTION:
      {
        PrimitiveEffectFullFunction primitiveEffectFullFunction = (PrimitiveEffectFullFunction)theEObject;
        T result = casePrimitiveEffectFullFunction(primitiveEffectFullFunction);
        if (result == null) result = caseEffectFullFunction(primitiveEffectFullFunction);
        if (result == null) result = caseEffectFullPrimitive(primitiveEffectFullFunction);
        if (result == null) result = caseFunction(primitiveEffectFullFunction);
        if (result == null) result = caseEffectFullBodyContent(primitiveEffectFullFunction);
        if (result == null) result = casePrimitiveFunction(primitiveEffectFullFunction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.PRIMITIVE_PRINT:
      {
        PrimitivePrint primitivePrint = (PrimitivePrint)theEObject;
        T result = casePrimitivePrint(primitivePrint);
        if (result == null) result = casePrimitiveEffectFullFunction(primitivePrint);
        if (result == null) result = caseEffectFullFunction(primitivePrint);
        if (result == null) result = caseEffectFullPrimitive(primitivePrint);
        if (result == null) result = caseFunction(primitivePrint);
        if (result == null) result = caseEffectFullBodyContent(primitivePrint);
        if (result == null) result = casePrimitiveFunction(primitivePrint);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.LEFT_PAIR_IO:
      {
        LeftPairIO leftPairIO = (LeftPairIO)theEObject;
        T result = caseLeftPairIO(leftPairIO);
        if (result == null) result = casePrimitiveEffectFullFunction(leftPairIO);
        if (result == null) result = caseEffectFullFunction(leftPairIO);
        if (result == null) result = caseEffectFullPrimitive(leftPairIO);
        if (result == null) result = caseFunction(leftPairIO);
        if (result == null) result = caseEffectFullBodyContent(leftPairIO);
        if (result == null) result = casePrimitiveFunction(leftPairIO);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.RIGHT_PAIR_IO:
      {
        RightPairIO rightPairIO = (RightPairIO)theEObject;
        T result = caseRightPairIO(rightPairIO);
        if (result == null) result = casePrimitiveEffectFullFunction(rightPairIO);
        if (result == null) result = caseEffectFullFunction(rightPairIO);
        if (result == null) result = caseEffectFullPrimitive(rightPairIO);
        if (result == null) result = caseFunction(rightPairIO);
        if (result == null) result = caseEffectFullBodyContent(rightPairIO);
        if (result == null) result = casePrimitiveFunction(rightPairIO);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.PRIMITIVE_EFFECT_FULL_VALUE:
      {
        PrimitiveEffectFullValue primitiveEffectFullValue = (PrimitiveEffectFullValue)theEObject;
        T result = casePrimitiveEffectFullValue(primitiveEffectFullValue);
        if (result == null) result = caseEffectFullPrimitive(primitiveEffectFullValue);
        if (result == null) result = casePrimitiveFunction(primitiveEffectFullValue);
        if (result == null) result = caseEffectFullBodyContent(primitiveEffectFullValue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.PRIMITIVE_RANDOM:
      {
        PrimitiveRandom primitiveRandom = (PrimitiveRandom)theEObject;
        T result = casePrimitiveRandom(primitiveRandom);
        if (result == null) result = casePrimitiveEffectFullValue(primitiveRandom);
        if (result == null) result = caseEffectFullPrimitive(primitiveRandom);
        if (result == null) result = casePrimitiveFunction(primitiveRandom);
        if (result == null) result = caseEffectFullBodyContent(primitiveRandom);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.PRIMITIVE_RETURN:
      {
        PrimitiveReturn primitiveReturn = (PrimitiveReturn)theEObject;
        T result = casePrimitiveReturn(primitiveReturn);
        if (result == null) result = casePrimitiveEffectFullFunction(primitiveReturn);
        if (result == null) result = caseEffectFullFunction(primitiveReturn);
        if (result == null) result = caseEffectFullPrimitive(primitiveReturn);
        if (result == null) result = caseFunction(primitiveReturn);
        if (result == null) result = caseEffectFullBodyContent(primitiveReturn);
        if (result == null) result = casePrimitiveFunction(primitiveReturn);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.PRIMITIVE_TIME:
      {
        PrimitiveTime primitiveTime = (PrimitiveTime)theEObject;
        T result = casePrimitiveTime(primitiveTime);
        if (result == null) result = casePrimitiveEffectFullValue(primitiveTime);
        if (result == null) result = caseEffectFullPrimitive(primitiveTime);
        if (result == null) result = casePrimitiveFunction(primitiveTime);
        if (result == null) result = caseEffectFullBodyContent(primitiveTime);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.APPLY_FIO:
      {
        ApplyFIO applyFIO = (ApplyFIO)theEObject;
        T result = caseApplyFIO(applyFIO);
        if (result == null) result = casePrimitiveEffectFullFunction(applyFIO);
        if (result == null) result = caseEffectFullFunction(applyFIO);
        if (result == null) result = caseEffectFullPrimitive(applyFIO);
        if (result == null) result = caseFunction(applyFIO);
        if (result == null) result = caseEffectFullBodyContent(applyFIO);
        if (result == null) result = casePrimitiveFunction(applyFIO);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.APPLY_FIO_FACTOR:
      {
        ApplyFIOFactor applyFIOFactor = (ApplyFIOFactor)theEObject;
        T result = caseApplyFIOFactor(applyFIOFactor);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.EXTRACT_EFFECT_FULL:
      {
        ExtractEffectFull extractEffectFull = (ExtractEffectFull)theEObject;
        T result = caseExtractEffectFull(extractEffectFull);
        if (result == null) result = casePrimitiveEffectFullFunction(extractEffectFull);
        if (result == null) result = caseEffectFullFunction(extractEffectFull);
        if (result == null) result = caseEffectFullPrimitive(extractEffectFull);
        if (result == null) result = caseFunction(extractEffectFull);
        if (result == null) result = caseEffectFullBodyContent(extractEffectFull);
        if (result == null) result = casePrimitiveFunction(extractEffectFull);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.PURE_VALUE:
      {
        PureValue pureValue = (PureValue)theEObject;
        T result = casePureValue(pureValue);
        if (result == null) result = casePureFunctionDefinition(pureValue);
        if (result == null) result = casePureFunction(pureValue);
        if (result == null) result = caseFunction(pureValue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.EFFECT_FULL_VALUE:
      {
        EffectFullValue effectFullValue = (EffectFullValue)theEObject;
        T result = caseEffectFullValue(effectFullValue);
        if (result == null) result = caseEffectFullFunctionDefinition(effectFullValue);
        if (result == null) result = caseEffectFullFunction(effectFullValue);
        if (result == null) result = caseFunction(effectFullValue);
        if (result == null) result = caseEffectFullBodyContent(effectFullValue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.IO_EFFECT_FULL_EXPRESSION:
      {
        IOEffectFullExpression ioEffectFullExpression = (IOEffectFullExpression)theEObject;
        T result = caseIOEffectFullExpression(ioEffectFullExpression);
        if (result == null) result = caseEffectFullExpression(ioEffectFullExpression);
        if (result == null) result = caseEffectFullBodyContent(ioEffectFullExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.IO_EXPRESSION:
      {
        IOExpression ioExpression = (IOExpression)theEObject;
        T result = caseIOExpression(ioExpression);
        if (result == null) result = caseEffectFullExpression(ioExpression);
        if (result == null) result = caseEffectFullBodyContent(ioExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.IO_PURE_FUNCTION:
      {
        IOPureFunction ioPureFunction = (IOPureFunction)theEObject;
        T result = caseIOPureFunction(ioPureFunction);
        if (result == null) result = caseEffectFullExpression(ioPureFunction);
        if (result == null) result = caseEffectFullBodyContent(ioPureFunction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.IO_EFFECT_FULL_FUNCTION:
      {
        IOEffectFullFunction ioEffectFullFunction = (IOEffectFullFunction)theEObject;
        T result = caseIOEffectFullFunction(ioEffectFullFunction);
        if (result == null) result = caseEffectFullExpression(ioEffectFullFunction);
        if (result == null) result = caseEffectFullBodyContent(ioEffectFullFunction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.EFFECT_FULL_LAMBDA:
      {
        EffectFullLambda effectFullLambda = (EffectFullLambda)theEObject;
        T result = caseEffectFullLambda(effectFullLambda);
        if (result == null) result = caseEffectFullFunctionDefinition(effectFullLambda);
        if (result == null) result = caseEffectFullFunction(effectFullLambda);
        if (result == null) result = caseFunction(effectFullLambda);
        if (result == null) result = caseEffectFullBodyContent(effectFullLambda);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.DATA_VALUE:
      {
        DataValue dataValue = (DataValue)theEObject;
        T result = caseDataValue(dataValue);
        if (result == null) result = caseDataType(dataValue);
        if (result == null) result = caseValueType(dataValue);
        if (result == null) result = caseExpression(dataValue);
        if (result == null) result = caseType(dataValue);
        if (result == null) result = casePureFunction(dataValue);
        if (result == null) result = caseFunction(dataValue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.EFFECT_FULL_DATA_VALUE:
      {
        EffectFullDataValue effectFullDataValue = (EffectFullDataValue)theEObject;
        T result = caseEffectFullDataValue(effectFullDataValue);
        if (result == null) result = caseEffectFullDataType(effectFullDataValue);
        if (result == null) result = caseEffectFullType(effectFullDataValue);
        if (result == null) result = caseEffectFullExpression(effectFullDataValue);
        if (result == null) result = caseType(effectFullDataValue);
        if (result == null) result = caseEffectFullBodyContent(effectFullDataValue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.PURE_LAMBDA:
      {
        PureLambda pureLambda = (PureLambda)theEObject;
        T result = casePureLambda(pureLambda);
        if (result == null) result = casePureFunctionDefinition(pureLambda);
        if (result == null) result = casePureFunction(pureLambda);
        if (result == null) result = caseFunction(pureLambda);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.PURE_PROD_VALUE:
      {
        PureProdValue pureProdValue = (PureProdValue)theEObject;
        T result = casePureProdValue(pureProdValue);
        if (result == null) result = casePureAlgebraicType(pureProdValue);
        if (result == null) result = caseValueType(pureProdValue);
        if (result == null) result = caseExpression(pureProdValue);
        if (result == null) result = caseType(pureProdValue);
        if (result == null) result = casePureFunction(pureProdValue);
        if (result == null) result = caseFunction(pureProdValue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.PURE_SUM_VALUE:
      {
        PureSumValue pureSumValue = (PureSumValue)theEObject;
        T result = casePureSumValue(pureSumValue);
        if (result == null) result = casePureAlgebraicType(pureSumValue);
        if (result == null) result = caseValueType(pureSumValue);
        if (result == null) result = caseExpression(pureSumValue);
        if (result == null) result = caseType(pureSumValue);
        if (result == null) result = casePureFunction(pureSumValue);
        if (result == null) result = caseFunction(pureSumValue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.EFFECT_FULL_PROD_VALUE:
      {
        EffectFullProdValue effectFullProdValue = (EffectFullProdValue)theEObject;
        T result = caseEffectFullProdValue(effectFullProdValue);
        if (result == null) result = caseEffectFullAlgebraicType(effectFullProdValue);
        if (result == null) result = caseEffectFullType(effectFullProdValue);
        if (result == null) result = caseEffectFullExpression(effectFullProdValue);
        if (result == null) result = caseType(effectFullProdValue);
        if (result == null) result = caseEffectFullBodyContent(effectFullProdValue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case FPMLPackage.EFFECT_FULL_SUM_VALUE:
      {
        EffectFullSumValue effectFullSumValue = (EffectFullSumValue)theEObject;
        T result = caseEffectFullSumValue(effectFullSumValue);
        if (result == null) result = caseEffectFullAlgebraicType(effectFullSumValue);
        if (result == null) result = caseEffectFullType(effectFullSumValue);
        if (result == null) result = caseEffectFullExpression(effectFullSumValue);
        if (result == null) result = caseType(effectFullSumValue);
        if (result == null) result = caseEffectFullBodyContent(effectFullSumValue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Model</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Model</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModel(Model object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Pure Block</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Pure Block</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePureBlock(PureBlock object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Pure Function Block</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Pure Function Block</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePureFunctionBlock(PureFunctionBlock object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Pure Data Block</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Pure Data Block</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePureDataBlock(PureDataBlock object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Pure Value Block</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Pure Value Block</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePureValueBlock(PureValueBlock object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Effect Full Block</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Effect Full Block</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEffectFullBlock(EffectFullBlock object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Effect Full Data Block</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Effect Full Data Block</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEffectFullDataBlock(EffectFullDataBlock object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Effect Full Value Block</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Effect Full Value Block</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEffectFullValueBlock(EffectFullValueBlock object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Effect Full Function Block</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Effect Full Function Block</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEffectFullFunctionBlock(EffectFullFunctionBlock object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Pure Data</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Pure Data</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePureData(PureData object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Pure Function Definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Pure Function Definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePureFunctionDefinition(PureFunctionDefinition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Effect Full Data</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Effect Full Data</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEffectFullData(EffectFullData object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Effect Full Function Definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Effect Full Function Definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEffectFullFunctionDefinition(EffectFullFunctionDefinition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Main Func</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Main Func</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMainFunc(MainFunc object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Additional Pure Argument</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Additional Pure Argument</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAdditionalPureArgument(AdditionalPureArgument object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Additional Effect Full Argument</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Additional Effect Full Argument</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAdditionalEffectFullArgument(AdditionalEffectFullArgument object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Function</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Function</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFunction(Function object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Pure Function</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Pure Function</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePureFunction(PureFunction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Effect Full Function</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Effect Full Function</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEffectFullFunction(EffectFullFunction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Primitive Function</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Primitive Function</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePrimitiveFunction(PrimitiveFunction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Effect Full Primitive</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Effect Full Primitive</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEffectFullPrimitive(EffectFullPrimitive object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Effect Full Body Content</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Effect Full Body Content</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEffectFullBodyContent(EffectFullBodyContent object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Argument</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Argument</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseArgument(Argument object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Effect Full Argument</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Effect Full Argument</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEffectFullArgument(EffectFullArgument object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Pure Argument</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Pure Argument</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePureArgument(PureArgument object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Function Body Pure</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Function Body Pure</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFunctionBodyPure(FunctionBodyPure object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Function Body Effect Full</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Function Body Effect Full</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFunctionBodyEffectFull(FunctionBodyEffectFull object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Empty Function Body</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Empty Function Body</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEmptyFunctionBody(EmptyFunctionBody object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Composition Function Body Pure</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Composition Function Body Pure</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCompositionFunctionBodyPure(CompositionFunctionBodyPure object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Composition Function Body Pure Factor</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Composition Function Body Pure Factor</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCompositionFunctionBodyPureFactor(CompositionFunctionBodyPureFactor object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Composition Function Body Effect</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Composition Function Body Effect</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCompositionFunctionBodyEffect(CompositionFunctionBodyEffect object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Composition Function Body Effect Full Factor</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Composition Function Body Effect Full Factor</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCompositionFunctionBodyEffectFullFactor(CompositionFunctionBodyEffectFullFactor object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>IO Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>IO Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIOType(IOType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Value Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Value Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseValueType(ValueType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseType(Type object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Effect Full Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Effect Full Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEffectFullType(EffectFullType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Void Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Void Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVoidType(VoidType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Integer Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Integer Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIntegerType(IntegerType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>String Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>String Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStringType(StringType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Boolean Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Boolean Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBooleanType(BooleanType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Unit Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Unit Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUnitType(UnitType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Data Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Data Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDataType(DataType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Effect Full Data Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Effect Full Data Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEffectFullDataType(EffectFullDataType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Pure Function Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Pure Function Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePureFunctionType(PureFunctionType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Effect Full Function Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Effect Full Function Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEffectFullFunctionType(EffectFullFunctionType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Pure Algebraic Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Pure Algebraic Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePureAlgebraicType(PureAlgebraicType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Pure Sum Type Factor</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Pure Sum Type Factor</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePureSumTypeFactor(PureSumTypeFactor object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Pure Prod Type Factor</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Pure Prod Type Factor</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePureProdTypeFactor(PureProdTypeFactor object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Effect Full Algebraic Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Effect Full Algebraic Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEffectFullAlgebraicType(EffectFullAlgebraicType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Effect Full Sum Type Factor</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Effect Full Sum Type Factor</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEffectFullSumTypeFactor(EffectFullSumTypeFactor object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Effect Full Prod Type Factor</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Effect Full Prod Type Factor</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEffectFullProdTypeFactor(EffectFullProdTypeFactor object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Effect Full Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Effect Full Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEffectFullExpression(EffectFullExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Effect Full Value Ref</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Effect Full Value Ref</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEffectFullValueRef(EffectFullValueRef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpression(Expression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Pure Value Ref</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Pure Value Ref</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePureValueRef(PureValueRef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Primitive Pure Function</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Primitive Pure Function</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePrimitivePureFunction(PrimitivePureFunction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Int To String</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Int To String</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIntToString(IntToString object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Int Pow</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Int Pow</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIntPow(IntPow object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Plus</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Plus</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePlus(Plus object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Minus</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Minus</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMinus(Minus object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Times</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Times</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTimes(Times object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Mod</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Mod</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMod(Mod object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Left Pair</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Left Pair</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLeftPair(LeftPair object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Right Pair</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Right Pair</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRightPair(RightPair object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Apply F</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Apply F</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseApplyF(ApplyF object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Apply FFactor</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Apply FFactor</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseApplyFFactor(ApplyFFactor object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Equals</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Equals</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEquals(Equals object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Minor Equals</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Minor Equals</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMinorEquals(MinorEquals object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Major Equals</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Major Equals</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMajorEquals(MajorEquals object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Minor</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Minor</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMinor(Minor object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Major</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Major</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMajor(Major object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Logic And</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Logic And</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLogicAnd(LogicAnd object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Logic Or</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Logic Or</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLogicOr(LogicOr object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Extract Pure</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Extract Pure</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExtractPure(ExtractPure object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Primitive Effect Full Function</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Primitive Effect Full Function</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePrimitiveEffectFullFunction(PrimitiveEffectFullFunction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Primitive Print</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Primitive Print</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePrimitivePrint(PrimitivePrint object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Left Pair IO</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Left Pair IO</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLeftPairIO(LeftPairIO object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Right Pair IO</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Right Pair IO</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRightPairIO(RightPairIO object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Primitive Effect Full Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Primitive Effect Full Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePrimitiveEffectFullValue(PrimitiveEffectFullValue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Primitive Random</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Primitive Random</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePrimitiveRandom(PrimitiveRandom object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Primitive Return</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Primitive Return</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePrimitiveReturn(PrimitiveReturn object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Primitive Time</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Primitive Time</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePrimitiveTime(PrimitiveTime object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Apply FIO</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Apply FIO</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseApplyFIO(ApplyFIO object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Apply FIO Factor</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Apply FIO Factor</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseApplyFIOFactor(ApplyFIOFactor object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Extract Effect Full</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Extract Effect Full</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExtractEffectFull(ExtractEffectFull object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Pure Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Pure Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePureValue(PureValue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Effect Full Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Effect Full Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEffectFullValue(EffectFullValue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>IO Effect Full Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>IO Effect Full Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIOEffectFullExpression(IOEffectFullExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>IO Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>IO Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIOExpression(IOExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>IO Pure Function</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>IO Pure Function</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIOPureFunction(IOPureFunction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>IO Effect Full Function</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>IO Effect Full Function</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIOEffectFullFunction(IOEffectFullFunction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Effect Full Lambda</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Effect Full Lambda</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEffectFullLambda(EffectFullLambda object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Data Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Data Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDataValue(DataValue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Effect Full Data Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Effect Full Data Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEffectFullDataValue(EffectFullDataValue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Pure Lambda</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Pure Lambda</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePureLambda(PureLambda object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Pure Prod Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Pure Prod Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePureProdValue(PureProdValue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Pure Sum Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Pure Sum Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePureSumValue(PureSumValue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Effect Full Prod Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Effect Full Prod Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEffectFullProdValue(EffectFullProdValue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Effect Full Sum Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Effect Full Sum Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEffectFullSumValue(EffectFullSumValue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //FPMLSwitch
