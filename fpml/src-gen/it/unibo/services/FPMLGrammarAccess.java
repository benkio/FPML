/*
 * generated by Xtext 2.10.0
 */
package it.unibo.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class FPMLGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cElementsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cElementsPureBlockParserRuleCall_0_0 = (RuleCall)cElementsAssignment_0.eContents().get(0);
		private final Assignment cElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementsEffectFullBlockParserRuleCall_1_0 = (RuleCall)cElementsAssignment_1.eContents().get(0);
		
		/////////////////////////////////////////////////////////////////
		//// Entry element
		////////////////////////////////////////////////////////////////
		//Model:
		//	elements+=PureBlock
		//	elements+=EffectFullBlock;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=PureBlock elements+=EffectFullBlock
		public Group getGroup() { return cGroup; }
		
		//elements+=PureBlock
		public Assignment getElementsAssignment_0() { return cElementsAssignment_0; }
		
		//PureBlock
		public RuleCall getElementsPureBlockParserRuleCall_0_0() { return cElementsPureBlockParserRuleCall_0_0; }
		
		//elements+=EffectFullBlock
		public Assignment getElementsAssignment_1() { return cElementsAssignment_1; }
		
		//EffectFullBlock
		public RuleCall getElementsEffectFullBlockParserRuleCall_1_0() { return cElementsEffectFullBlockParserRuleCall_1_0; }
	}
	public class PureBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.PureBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsPureFunctionBlockParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		private final Assignment cElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementsDataBlockParserRuleCall_3_0 = (RuleCall)cElementsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////////////////////////////////////////////////////////////////
		//// Outer Blocks
		////////////////////////////////////////////////////////////////
		//PureBlock:
		//	'Pure' '{'
		//	elements+=PureFunctionBlock
		//	elements+=DataBlock
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Pure' '{' elements+=PureFunctionBlock elements+=DataBlock '}'
		public Group getGroup() { return cGroup; }
		
		//'Pure'
		public Keyword getPureKeyword_0() { return cPureKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//elements+=PureFunctionBlock
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }
		
		//PureFunctionBlock
		public RuleCall getElementsPureFunctionBlockParserRuleCall_2_0() { return cElementsPureFunctionBlockParserRuleCall_2_0; }
		
		//elements+=DataBlock
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }
		
		//DataBlock
		public RuleCall getElementsDataBlockParserRuleCall_3_0() { return cElementsDataBlockParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class PureFunctionBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.PureFunctionBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFeaturesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFeaturesPureFunctionParserRuleCall_2_0 = (RuleCall)cFeaturesAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//PureFunctionBlock:
		//	'Functions' '{'
		//	features+=PureFunction*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Functions' '{' features+=PureFunction* '}'
		public Group getGroup() { return cGroup; }
		
		//'Functions'
		public Keyword getFunctionsKeyword_0() { return cFunctionsKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//features+=PureFunction*
		public Assignment getFeaturesAssignment_2() { return cFeaturesAssignment_2; }
		
		//PureFunction
		public RuleCall getFeaturesPureFunctionParserRuleCall_2_0() { return cFeaturesPureFunctionParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class DataBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.DataBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDataKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsDataParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DataBlock:
		//	'Data' '{'
		//	elements+=Data*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Data' '{' elements+=Data* '}'
		public Group getGroup() { return cGroup; }
		
		//'Data'
		public Keyword getDataKeyword_0() { return cDataKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//elements+=Data*
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }
		
		//Data
		public RuleCall getElementsDataParserRuleCall_2_0() { return cElementsDataParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class EffectFullBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.EffectFullBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEffectsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFeaturesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFeaturesEffectFullFunctionParserRuleCall_2_0 = (RuleCall)cFeaturesAssignment_2.eContents().get(0);
		private final Assignment cMainAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMainMainFuncParserRuleCall_3_0 = (RuleCall)cMainAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//EffectFullBlock:
		//	'Effects' '{'
		//	features+=EffectFullFunction*
		//	main=MainFunc
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Effects' '{' features+=EffectFullFunction* main=MainFunc '}'
		public Group getGroup() { return cGroup; }
		
		//'Effects'
		public Keyword getEffectsKeyword_0() { return cEffectsKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//features+=EffectFullFunction*
		public Assignment getFeaturesAssignment_2() { return cFeaturesAssignment_2; }
		
		//EffectFullFunction
		public RuleCall getFeaturesEffectFullFunctionParserRuleCall_2_0() { return cFeaturesEffectFullFunctionParserRuleCall_2_0; }
		
		//main=MainFunc
		public Assignment getMainAssignment_3() { return cMainAssignment_3; }
		
		//MainFunc
		public RuleCall getMainMainFuncParserRuleCall_3_0() { return cMainMainFuncParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class DataElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.Data");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cContentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cContentAdtParserRuleCall_2_0 = (RuleCall)cContentAssignment_2.eContents().get(0);
		
		///////////////////////////////////////////////////////////////////
		//// Outer Block Elements
		///////////////////////////////////////////////////////////////////
		//Data:
		//	name=ID ':' content=Adt;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' content=Adt
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//content=Adt
		public Assignment getContentAssignment_2() { return cContentAssignment_2; }
		
		//Adt
		public RuleCall getContentAdtParserRuleCall_2_0() { return cContentAdtParserRuleCall_2_0; }
	}
	public class AdtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.Adt");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cArgumentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSumTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cProdTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Adt:
		//	Argument
		//	| Value
		//	| SumType
		//	| ProdType;
		@Override public ParserRule getRule() { return rule; }
		
		//Argument | Value | SumType | ProdType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Argument
		public RuleCall getArgumentParserRuleCall_0() { return cArgumentParserRuleCall_0; }
		
		//Value
		public RuleCall getValueParserRuleCall_1() { return cValueParserRuleCall_1; }
		
		//SumType
		public RuleCall getSumTypeParserRuleCall_2() { return cSumTypeParserRuleCall_2; }
		
		//ProdType
		public RuleCall getProdTypeParserRuleCall_3() { return cProdTypeParserRuleCall_3; }
	}
	public class SumTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.SumType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSumAdtElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cSumAdtElementsAlternatives_1_0 = (Alternatives)cSumAdtElementsAssignment_1.eContents().get(0);
		private final RuleCall cSumAdtElementsValueTypeParserRuleCall_1_0_0 = (RuleCall)cSumAdtElementsAlternatives_1_0.eContents().get(0);
		private final RuleCall cSumAdtElementsValueParserRuleCall_1_0_1 = (RuleCall)cSumAdtElementsAlternatives_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cPlusSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSumAdtElementsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Alternatives cSumAdtElementsAlternatives_2_1_0 = (Alternatives)cSumAdtElementsAssignment_2_1.eContents().get(0);
		private final RuleCall cSumAdtElementsValueTypeParserRuleCall_2_1_0_0 = (RuleCall)cSumAdtElementsAlternatives_2_1_0.eContents().get(0);
		private final RuleCall cSumAdtElementsValueParserRuleCall_2_1_0_1 = (RuleCall)cSumAdtElementsAlternatives_2_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SumType:
		//	'(' SumAdtElements+=(ValueType | Value) ('+' SumAdtElements+=(ValueType | Value))+ ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' SumAdtElements+=(ValueType | Value) ('+' SumAdtElements+=(ValueType | Value))+ ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//SumAdtElements+=(ValueType | Value)
		public Assignment getSumAdtElementsAssignment_1() { return cSumAdtElementsAssignment_1; }
		
		//(ValueType | Value)
		public Alternatives getSumAdtElementsAlternatives_1_0() { return cSumAdtElementsAlternatives_1_0; }
		
		//ValueType
		public RuleCall getSumAdtElementsValueTypeParserRuleCall_1_0_0() { return cSumAdtElementsValueTypeParserRuleCall_1_0_0; }
		
		//Value
		public RuleCall getSumAdtElementsValueParserRuleCall_1_0_1() { return cSumAdtElementsValueParserRuleCall_1_0_1; }
		
		//('+' SumAdtElements+=(ValueType | Value))+
		public Group getGroup_2() { return cGroup_2; }
		
		//'+'
		public Keyword getPlusSignKeyword_2_0() { return cPlusSignKeyword_2_0; }
		
		//SumAdtElements+=(ValueType | Value)
		public Assignment getSumAdtElementsAssignment_2_1() { return cSumAdtElementsAssignment_2_1; }
		
		//(ValueType | Value)
		public Alternatives getSumAdtElementsAlternatives_2_1_0() { return cSumAdtElementsAlternatives_2_1_0; }
		
		//ValueType
		public RuleCall getSumAdtElementsValueTypeParserRuleCall_2_1_0_0() { return cSumAdtElementsValueTypeParserRuleCall_2_1_0_0; }
		
		//Value
		public RuleCall getSumAdtElementsValueParserRuleCall_2_1_0_1() { return cSumAdtElementsValueParserRuleCall_2_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ProdTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.ProdType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cProdAdtElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cProdAdtElementsAlternatives_1_0 = (Alternatives)cProdAdtElementsAssignment_1.eContents().get(0);
		private final RuleCall cProdAdtElementsValueTypeParserRuleCall_1_0_0 = (RuleCall)cProdAdtElementsAlternatives_1_0.eContents().get(0);
		private final RuleCall cProdAdtElementsValueParserRuleCall_1_0_1 = (RuleCall)cProdAdtElementsAlternatives_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cAsteriskKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cProdAdtElementsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Alternatives cProdAdtElementsAlternatives_2_1_0 = (Alternatives)cProdAdtElementsAssignment_2_1.eContents().get(0);
		private final RuleCall cProdAdtElementsValueTypeParserRuleCall_2_1_0_0 = (RuleCall)cProdAdtElementsAlternatives_2_1_0.eContents().get(0);
		private final RuleCall cProdAdtElementsValueParserRuleCall_2_1_0_1 = (RuleCall)cProdAdtElementsAlternatives_2_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ProdType:
		//	'(' ProdAdtElements+=(ValueType | Value) ('*' ProdAdtElements+=(ValueType | Value))+ ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' ProdAdtElements+=(ValueType | Value) ('*' ProdAdtElements+=(ValueType | Value))+ ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//ProdAdtElements+=(ValueType | Value)
		public Assignment getProdAdtElementsAssignment_1() { return cProdAdtElementsAssignment_1; }
		
		//(ValueType | Value)
		public Alternatives getProdAdtElementsAlternatives_1_0() { return cProdAdtElementsAlternatives_1_0; }
		
		//ValueType
		public RuleCall getProdAdtElementsValueTypeParserRuleCall_1_0_0() { return cProdAdtElementsValueTypeParserRuleCall_1_0_0; }
		
		//Value
		public RuleCall getProdAdtElementsValueParserRuleCall_1_0_1() { return cProdAdtElementsValueParserRuleCall_1_0_1; }
		
		//('*' ProdAdtElements+=(ValueType | Value))+
		public Group getGroup_2() { return cGroup_2; }
		
		//'*'
		public Keyword getAsteriskKeyword_2_0() { return cAsteriskKeyword_2_0; }
		
		//ProdAdtElements+=(ValueType | Value)
		public Assignment getProdAdtElementsAssignment_2_1() { return cProdAdtElementsAssignment_2_1; }
		
		//(ValueType | Value)
		public Alternatives getProdAdtElementsAlternatives_2_1_0() { return cProdAdtElementsAlternatives_2_1_0; }
		
		//ValueType
		public RuleCall getProdAdtElementsValueTypeParserRuleCall_2_1_0_0() { return cProdAdtElementsValueTypeParserRuleCall_2_1_0_0; }
		
		//Value
		public RuleCall getProdAdtElementsValueParserRuleCall_2_1_0_1() { return cProdAdtElementsValueParserRuleCall_2_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class PureFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.PureFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReturnTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReturnTypeValueTypeParserRuleCall_1_0 = (RuleCall)cReturnTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cArgAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cArgArgumentParserRuleCall_4_0 = (RuleCall)cArgAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cColonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cLeftCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cFunctionBodyAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cFunctionBodyFunctionBodyPureParserRuleCall_8_0 = (RuleCall)cFunctionBodyAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//PureFunction:
		//	'def' returnType=ValueType name=ID '(' arg=Argument ')' ':' '{' functionBody=FunctionBodyPure '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'def' returnType=ValueType name=ID '(' arg=Argument ')' ':' '{' functionBody=FunctionBodyPure '}'
		public Group getGroup() { return cGroup; }
		
		//'def'
		public Keyword getDefKeyword_0() { return cDefKeyword_0; }
		
		//returnType=ValueType
		public Assignment getReturnTypeAssignment_1() { return cReturnTypeAssignment_1; }
		
		//ValueType
		public RuleCall getReturnTypeValueTypeParserRuleCall_1_0() { return cReturnTypeValueTypeParserRuleCall_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//arg=Argument
		public Assignment getArgAssignment_4() { return cArgAssignment_4; }
		
		//Argument
		public RuleCall getArgArgumentParserRuleCall_4_0() { return cArgArgumentParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//':'
		public Keyword getColonKeyword_6() { return cColonKeyword_6; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7() { return cLeftCurlyBracketKeyword_7; }
		
		//functionBody=FunctionBodyPure
		public Assignment getFunctionBodyAssignment_8() { return cFunctionBodyAssignment_8; }
		
		//FunctionBodyPure
		public RuleCall getFunctionBodyFunctionBodyPureParserRuleCall_8_0() { return cFunctionBodyFunctionBodyPureParserRuleCall_8_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class EffectFullFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.EffectFullFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReturnTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReturnTypeIOTypeParserRuleCall_1_0 = (RuleCall)cReturnTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cArgAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cArgEffectFullArgumentParserRuleCall_4_0 = (RuleCall)cArgAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cColonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cLeftCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cFunctionBodyAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cFunctionBodyFunctionBodyEffectFullParserRuleCall_8_0 = (RuleCall)cFunctionBodyAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//EffectFullFunction:
		//	'def' returnType=IOType name=ID '(' arg=EffectFullArgument ')' ':' '{' functionBody=FunctionBodyEffectFull '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'def' returnType=IOType name=ID '(' arg=EffectFullArgument ')' ':' '{' functionBody=FunctionBodyEffectFull '}'
		public Group getGroup() { return cGroup; }
		
		//'def'
		public Keyword getDefKeyword_0() { return cDefKeyword_0; }
		
		//returnType=IOType
		public Assignment getReturnTypeAssignment_1() { return cReturnTypeAssignment_1; }
		
		//IOType
		public RuleCall getReturnTypeIOTypeParserRuleCall_1_0() { return cReturnTypeIOTypeParserRuleCall_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//arg=EffectFullArgument
		public Assignment getArgAssignment_4() { return cArgAssignment_4; }
		
		//EffectFullArgument
		public RuleCall getArgEffectFullArgumentParserRuleCall_4_0() { return cArgEffectFullArgumentParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//':'
		public Keyword getColonKeyword_6() { return cColonKeyword_6; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7() { return cLeftCurlyBracketKeyword_7; }
		
		//functionBody=FunctionBodyEffectFull
		public Assignment getFunctionBodyAssignment_8() { return cFunctionBodyAssignment_8; }
		
		//FunctionBodyEffectFull
		public RuleCall getFunctionBodyFunctionBodyEffectFullParserRuleCall_8_0() { return cFunctionBodyFunctionBodyEffectFullParserRuleCall_8_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class MainFuncElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.MainFunc");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIOKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReturnTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReturnTypeUnitTypeParserRuleCall_1_0 = (RuleCall)cReturnTypeAssignment_1.eContents().get(0);
		private final Keyword cMainKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cFunctionBodyAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cFunctionBodyFunctionBodyEffectFullParserRuleCall_5_0 = (RuleCall)cFunctionBodyAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//MainFunc:
		//	'IO' returnType=UnitType 'main' ':' '{' functionBody=FunctionBodyEffectFull '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'IO' returnType=UnitType 'main' ':' '{' functionBody=FunctionBodyEffectFull '}'
		public Group getGroup() { return cGroup; }
		
		//'IO'
		public Keyword getIOKeyword_0() { return cIOKeyword_0; }
		
		//returnType=UnitType
		public Assignment getReturnTypeAssignment_1() { return cReturnTypeAssignment_1; }
		
		//UnitType
		public RuleCall getReturnTypeUnitTypeParserRuleCall_1_0() { return cReturnTypeUnitTypeParserRuleCall_1_0; }
		
		//'main'
		public Keyword getMainKeyword_2() { return cMainKeyword_2; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//functionBody=FunctionBodyEffectFull
		public Assignment getFunctionBodyAssignment_5() { return cFunctionBodyAssignment_5; }
		
		//FunctionBodyEffectFull
		public RuleCall getFunctionBodyFunctionBodyEffectFullParserRuleCall_5_0() { return cFunctionBodyFunctionBodyEffectFullParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class ChainElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.ChainElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFunctionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDataParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		/////////////////////////////////////////////////////////////////////
		//// Function Body Elements
		/////////////////////////////////////////////////////////////////////
		//ChainElement:
		//	Function | Data;
		@Override public ParserRule getRule() { return rule; }
		
		//Function | Data
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Function
		public RuleCall getFunctionParserRuleCall_0() { return cFunctionParserRuleCall_0; }
		
		//Data
		public RuleCall getDataParserRuleCall_1() { return cDataParserRuleCall_1; }
	}
	public class InitialPureChainElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.InitialPureChainElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPureFunctionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDataParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//InitialPureChainElement:
		//	PureFunction | Data;
		@Override public ParserRule getRule() { return rule; }
		
		//PureFunction | Data
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PureFunction
		public RuleCall getPureFunctionParserRuleCall_0() { return cPureFunctionParserRuleCall_0; }
		
		//Data
		public RuleCall getDataParserRuleCall_1() { return cDataParserRuleCall_1; }
	}
	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.Function");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPureFunctionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEffectFullFunctionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Function:
		//	PureFunction | EffectFullFunction;
		@Override public ParserRule getRule() { return rule; }
		
		//PureFunction | EffectFullFunction
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PureFunction
		public RuleCall getPureFunctionParserRuleCall_0() { return cPureFunctionParserRuleCall_0; }
		
		//EffectFullFunction
		public RuleCall getEffectFullFunctionParserRuleCall_1() { return cEffectFullFunctionParserRuleCall_1; }
	}
	public class EffectFullArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.EffectFullArgument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//EffectFullArgument:
		//	type=Type name=ID?;
		@Override public ParserRule getRule() { return rule; }
		
		//type=Type name=ID?
		public Group getGroup() { return cGroup; }
		
		//type=Type
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_0_0() { return cTypeTypeParserRuleCall_0_0; }
		
		//name=ID?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class ArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.Argument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeValueTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Argument:
		//	type=ValueType name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//type=ValueType name=ID
		public Group getGroup() { return cGroup; }
		
		//type=ValueType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//ValueType
		public RuleCall getTypeValueTypeParserRuleCall_0_0() { return cTypeValueTypeParserRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class FunctionBodyPureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.FunctionBodyPure");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEmptyFunctionBodyParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCompositionFunctionBodyPureParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//FunctionBodyPure:
		//	EmptyFunctionBody | CompositionFunctionBodyPure;
		@Override public ParserRule getRule() { return rule; }
		
		//EmptyFunctionBody | CompositionFunctionBodyPure
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EmptyFunctionBody
		public RuleCall getEmptyFunctionBodyParserRuleCall_0() { return cEmptyFunctionBodyParserRuleCall_0; }
		
		//CompositionFunctionBodyPure
		public RuleCall getCompositionFunctionBodyPureParserRuleCall_1() { return cCompositionFunctionBodyPureParserRuleCall_1; }
	}
	public class FunctionBodyEffectFullElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.FunctionBodyEffectFull");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEmptyFunctionBodyParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCompositionFunctionBodyEffectParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//FunctionBodyEffectFull:
		//	EmptyFunctionBody | CompositionFunctionBodyEffect;
		@Override public ParserRule getRule() { return rule; }
		
		//EmptyFunctionBody | CompositionFunctionBodyEffect
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EmptyFunctionBody
		public RuleCall getEmptyFunctionBodyParserRuleCall_0() { return cEmptyFunctionBodyParserRuleCall_0; }
		
		//CompositionFunctionBodyEffect
		public RuleCall getCompositionFunctionBodyEffectParserRuleCall_1() { return cCompositionFunctionBodyEffectParserRuleCall_1; }
	}
	public class EmptyFunctionBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.EmptyFunctionBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEmptyFunctionBodyAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cUndefinedKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//EmptyFunctionBody:
		//	{EmptyFunctionBody} 'Undefined';
		@Override public ParserRule getRule() { return rule; }
		
		//{EmptyFunctionBody} 'Undefined'
		public Group getGroup() { return cGroup; }
		
		//{EmptyFunctionBody}
		public Action getEmptyFunctionBodyAction_0() { return cEmptyFunctionBodyAction_0; }
		
		//'Undefined'
		public Keyword getUndefinedKeyword_1() { return cUndefinedKeyword_1; }
	}
	public class CompositionFunctionBodyPureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.CompositionFunctionBodyPure");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cFunctionChainAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final CrossReference cFunctionChainInitialPureChainElementCrossReference_0_0_0 = (CrossReference)cFunctionChainAssignment_0_0.eContents().get(0);
		private final RuleCall cFunctionChainInitialPureChainElementIDTerminalRuleCall_0_0_0_1 = (RuleCall)cFunctionChainInitialPureChainElementCrossReference_0_0_0.eContents().get(1);
		private final Keyword cVerticalLineGreaterThanSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cFunctionChainAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final CrossReference cFunctionChainPureFunctionCrossReference_0_2_0 = (CrossReference)cFunctionChainAssignment_0_2.eContents().get(0);
		private final RuleCall cFunctionChainPureFunctionIDTerminalRuleCall_0_2_0_1 = (RuleCall)cFunctionChainPureFunctionCrossReference_0_2_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cVerticalLineGreaterThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cFunctionChainAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cFunctionChainPureFunctionCrossReference_1_1_0 = (CrossReference)cFunctionChainAssignment_1_1.eContents().get(0);
		private final RuleCall cFunctionChainPureFunctionIDTerminalRuleCall_1_1_0_1 = (RuleCall)cFunctionChainPureFunctionCrossReference_1_1_0.eContents().get(1);
		
		//CompositionFunctionBodyPure:
		//	(functionChain+=[InitialPureChainElement] '|>' functionChain+=[PureFunction]) ('|>' functionChain+=[PureFunction])*;
		@Override public ParserRule getRule() { return rule; }
		
		//(functionChain+=[InitialPureChainElement] '|>' functionChain+=[PureFunction]) ('|>' functionChain+=[PureFunction])*
		public Group getGroup() { return cGroup; }
		
		//(functionChain+=[InitialPureChainElement] '|>' functionChain+=[PureFunction])
		public Group getGroup_0() { return cGroup_0; }
		
		//functionChain+=[InitialPureChainElement]
		public Assignment getFunctionChainAssignment_0_0() { return cFunctionChainAssignment_0_0; }
		
		//[InitialPureChainElement]
		public CrossReference getFunctionChainInitialPureChainElementCrossReference_0_0_0() { return cFunctionChainInitialPureChainElementCrossReference_0_0_0; }
		
		//ID
		public RuleCall getFunctionChainInitialPureChainElementIDTerminalRuleCall_0_0_0_1() { return cFunctionChainInitialPureChainElementIDTerminalRuleCall_0_0_0_1; }
		
		//'|>'
		public Keyword getVerticalLineGreaterThanSignKeyword_0_1() { return cVerticalLineGreaterThanSignKeyword_0_1; }
		
		//functionChain+=[PureFunction]
		public Assignment getFunctionChainAssignment_0_2() { return cFunctionChainAssignment_0_2; }
		
		//[PureFunction]
		public CrossReference getFunctionChainPureFunctionCrossReference_0_2_0() { return cFunctionChainPureFunctionCrossReference_0_2_0; }
		
		//ID
		public RuleCall getFunctionChainPureFunctionIDTerminalRuleCall_0_2_0_1() { return cFunctionChainPureFunctionIDTerminalRuleCall_0_2_0_1; }
		
		//('|>' functionChain+=[PureFunction])*
		public Group getGroup_1() { return cGroup_1; }
		
		//'|>'
		public Keyword getVerticalLineGreaterThanSignKeyword_1_0() { return cVerticalLineGreaterThanSignKeyword_1_0; }
		
		//functionChain+=[PureFunction]
		public Assignment getFunctionChainAssignment_1_1() { return cFunctionChainAssignment_1_1; }
		
		//[PureFunction]
		public CrossReference getFunctionChainPureFunctionCrossReference_1_1_0() { return cFunctionChainPureFunctionCrossReference_1_1_0; }
		
		//ID
		public RuleCall getFunctionChainPureFunctionIDTerminalRuleCall_1_1_0_1() { return cFunctionChainPureFunctionIDTerminalRuleCall_1_1_0_1; }
	}
	public class CompositionFunctionBodyEffectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.CompositionFunctionBodyEffect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cFunctionChainAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final CrossReference cFunctionChainChainElementCrossReference_0_0_0 = (CrossReference)cFunctionChainAssignment_0_0.eContents().get(0);
		private final RuleCall cFunctionChainChainElementIDTerminalRuleCall_0_0_0_1 = (RuleCall)cFunctionChainChainElementCrossReference_0_0_0.eContents().get(1);
		private final Keyword cGreaterThanSignGreaterThanSignEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cFunctionChainAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final CrossReference cFunctionChainChainElementCrossReference_0_2_0 = (CrossReference)cFunctionChainAssignment_0_2.eContents().get(0);
		private final RuleCall cFunctionChainChainElementIDTerminalRuleCall_0_2_0_1 = (RuleCall)cFunctionChainChainElementCrossReference_0_2_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cGreaterThanSignGreaterThanSignEqualsSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cFunctionChainAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cFunctionChainChainElementCrossReference_1_1_0 = (CrossReference)cFunctionChainAssignment_1_1.eContents().get(0);
		private final RuleCall cFunctionChainChainElementIDTerminalRuleCall_1_1_0_1 = (RuleCall)cFunctionChainChainElementCrossReference_1_1_0.eContents().get(1);
		
		//CompositionFunctionBodyEffect:
		//	(functionChain+=[ChainElement] '>>=' functionChain+=[ChainElement]) ('>>=' functionChain+=[ChainElement])*;
		@Override public ParserRule getRule() { return rule; }
		
		//(functionChain+=[ChainElement] '>>=' functionChain+=[ChainElement]) ('>>=' functionChain+=[ChainElement])*
		public Group getGroup() { return cGroup; }
		
		//(functionChain+=[ChainElement] '>>=' functionChain+=[ChainElement])
		public Group getGroup_0() { return cGroup_0; }
		
		//functionChain+=[ChainElement]
		public Assignment getFunctionChainAssignment_0_0() { return cFunctionChainAssignment_0_0; }
		
		//[ChainElement]
		public CrossReference getFunctionChainChainElementCrossReference_0_0_0() { return cFunctionChainChainElementCrossReference_0_0_0; }
		
		//ID
		public RuleCall getFunctionChainChainElementIDTerminalRuleCall_0_0_0_1() { return cFunctionChainChainElementIDTerminalRuleCall_0_0_0_1; }
		
		//'>>='
		public Keyword getGreaterThanSignGreaterThanSignEqualsSignKeyword_0_1() { return cGreaterThanSignGreaterThanSignEqualsSignKeyword_0_1; }
		
		//functionChain+=[ChainElement]
		public Assignment getFunctionChainAssignment_0_2() { return cFunctionChainAssignment_0_2; }
		
		//[ChainElement]
		public CrossReference getFunctionChainChainElementCrossReference_0_2_0() { return cFunctionChainChainElementCrossReference_0_2_0; }
		
		//ID
		public RuleCall getFunctionChainChainElementIDTerminalRuleCall_0_2_0_1() { return cFunctionChainChainElementIDTerminalRuleCall_0_2_0_1; }
		
		//('>>=' functionChain+=[ChainElement])*
		public Group getGroup_1() { return cGroup_1; }
		
		//'>>='
		public Keyword getGreaterThanSignGreaterThanSignEqualsSignKeyword_1_0() { return cGreaterThanSignGreaterThanSignEqualsSignKeyword_1_0; }
		
		//functionChain+=[ChainElement]
		public Assignment getFunctionChainAssignment_1_1() { return cFunctionChainAssignment_1_1; }
		
		//[ChainElement]
		public CrossReference getFunctionChainChainElementCrossReference_1_1_0() { return cFunctionChainChainElementCrossReference_1_1_0; }
		
		//ID
		public RuleCall getFunctionChainChainElementIDTerminalRuleCall_1_1_0_1() { return cFunctionChainChainElementIDTerminalRuleCall_1_1_0_1; }
	}
	public class IOTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.IOType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIOKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		
		////////////////////////////////////////////////////////////////////////
		//// Types
		////////////////////////////////////////////////////////////////////////
		//IOType:
		//	'IO' type=Type;
		@Override public ParserRule getRule() { return rule; }
		
		//'IO' type=Type
		public Group getGroup() { return cGroup; }
		
		//'IO'
		public Keyword getIOKeyword_0() { return cIOKeyword_0; }
		
		//type=Type
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_1_0() { return cTypeTypeParserRuleCall_1_0; }
	}
	public class ValueTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.ValueType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntegerTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStringTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDataTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ValueType:
		//	IntegerType | StringType | DataType;
		@Override public ParserRule getRule() { return rule; }
		
		//IntegerType | StringType | DataType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IntegerType
		public RuleCall getIntegerTypeParserRuleCall_0() { return cIntegerTypeParserRuleCall_0; }
		
		//StringType
		public RuleCall getStringTypeParserRuleCall_1() { return cStringTypeParserRuleCall_1; }
		
		//DataType
		public RuleCall getDataTypeParserRuleCall_2() { return cDataTypeParserRuleCall_2; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cValueTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUnitTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Type:
		//	ValueType | UnitType;
		@Override public ParserRule getRule() { return rule; }
		
		//ValueType | UnitType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ValueType
		public RuleCall getValueTypeParserRuleCall_0() { return cValueTypeParserRuleCall_0; }
		
		//UnitType
		public RuleCall getUnitTypeParserRuleCall_1() { return cUnitTypeParserRuleCall_1; }
	}
	public class IntegerTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.IntegerType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIntegerTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cTypeIntKeyword_1_0 = (Keyword)cTypeAssignment_1.eContents().get(0);
		
		//IntegerType:
		//	{IntegerType} type="int";
		@Override public ParserRule getRule() { return rule; }
		
		//{IntegerType} type="int"
		public Group getGroup() { return cGroup; }
		
		//{IntegerType}
		public Action getIntegerTypeAction_0() { return cIntegerTypeAction_0; }
		
		//type="int"
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//"int"
		public Keyword getTypeIntKeyword_1_0() { return cTypeIntKeyword_1_0; }
	}
	public class StringTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.StringType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStringTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cTypeStringKeyword_1_0 = (Keyword)cTypeAssignment_1.eContents().get(0);
		
		//StringType:
		//	{StringType} type="String";
		@Override public ParserRule getRule() { return rule; }
		
		//{StringType} type="String"
		public Group getGroup() { return cGroup; }
		
		//{StringType}
		public Action getStringTypeAction_0() { return cStringTypeAction_0; }
		
		//type="String"
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//"String"
		public Keyword getTypeStringKeyword_1_0() { return cTypeStringKeyword_1_0; }
	}
	public class UnitTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.UnitType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUnitTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cTypeUnitKeyword_1_0 = (Keyword)cTypeAssignment_1.eContents().get(0);
		
		//UnitType:
		//	{UnitType} type="Unit";
		@Override public ParserRule getRule() { return rule; }
		
		//{UnitType} type="Unit"
		public Group getGroup() { return cGroup; }
		
		//{UnitType}
		public Action getUnitTypeAction_0() { return cUnitTypeAction_0; }
		
		//type="Unit"
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//"Unit"
		public Keyword getTypeUnitKeyword_1_0() { return cTypeUnitKeyword_1_0; }
	}
	public class DataTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.DataType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDataTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRefKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypeDataCrossReference_2_0 = (CrossReference)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypeDataIDTerminalRuleCall_2_0_1 = (RuleCall)cTypeDataCrossReference_2_0.eContents().get(1);
		
		//DataType:
		//	{DataType} 'ref' type=[Data];
		@Override public ParserRule getRule() { return rule; }
		
		//{DataType} 'ref' type=[Data]
		public Group getGroup() { return cGroup; }
		
		//{DataType}
		public Action getDataTypeAction_0() { return cDataTypeAction_0; }
		
		//'ref'
		public Keyword getRefKeyword_1() { return cRefKeyword_1; }
		
		//type=[Data]
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//[Data]
		public CrossReference getTypeDataCrossReference_2_0() { return cTypeDataCrossReference_2_0; }
		
		//ID
		public RuleCall getTypeDataIDTerminalRuleCall_2_0_1() { return cTypeDataIDTerminalRuleCall_2_0_1; }
	}
	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStringValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cUnitValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//////////////////////////////////////////////////////////////////////
		//// Values
		//////////////////////////////////////////////////////////////////////
		//Value ValueType:
		//	IntValue | StringValue | UnitValue
		@Override public ParserRule getRule() { return rule; }
		
		//IntValue | StringValue | UnitValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IntValue
		public RuleCall getIntValueParserRuleCall_0() { return cIntValueParserRuleCall_0; }
		
		//StringValue
		public RuleCall getStringValueParserRuleCall_1() { return cStringValueParserRuleCall_1; }
		
		//UnitValue
		public RuleCall getUnitValueParserRuleCall_2() { return cUnitValueParserRuleCall_2; }
	}
	public class IntValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.IntValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIntegerTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//IntValue IntegerType:
		//	{IntegerType} value=INT
		@Override public ParserRule getRule() { return rule; }
		
		//{IntegerType} value=INT
		public Group getGroup() { return cGroup; }
		
		//{IntegerType}
		public Action getIntegerTypeAction_0() { return cIntegerTypeAction_0; }
		
		//value=INT
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_1_0() { return cValueINTTerminalRuleCall_1_0; }
	}
	public class StringValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.StringValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStringTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//StringValue StringType:
		//	{StringType} value=STRING
		@Override public ParserRule getRule() { return rule; }
		
		//{StringType} value=STRING
		public Group getGroup() { return cGroup; }
		
		//{StringType}
		public Action getStringTypeAction_0() { return cStringTypeAction_0; }
		
		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
	}
	public class UnitValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.UnitValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUnitTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//UnitValue UnitType:
		//	{UnitType} '()'
		@Override public ParserRule getRule() { return rule; }
		
		//{UnitType} '()'
		public Group getGroup() { return cGroup; }
		
		//{UnitType}
		public Action getUnitTypeAction_0() { return cUnitTypeAction_0; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_1() { return cLeftParenthesisRightParenthesisKeyword_1; }
	}
	
	
	private final ModelElements pModel;
	private final PureBlockElements pPureBlock;
	private final PureFunctionBlockElements pPureFunctionBlock;
	private final DataBlockElements pDataBlock;
	private final EffectFullBlockElements pEffectFullBlock;
	private final DataElements pData;
	private final AdtElements pAdt;
	private final SumTypeElements pSumType;
	private final ProdTypeElements pProdType;
	private final PureFunctionElements pPureFunction;
	private final EffectFullFunctionElements pEffectFullFunction;
	private final MainFuncElements pMainFunc;
	private final ChainElementElements pChainElement;
	private final InitialPureChainElementElements pInitialPureChainElement;
	private final FunctionElements pFunction;
	private final EffectFullArgumentElements pEffectFullArgument;
	private final ArgumentElements pArgument;
	private final FunctionBodyPureElements pFunctionBodyPure;
	private final FunctionBodyEffectFullElements pFunctionBodyEffectFull;
	private final EmptyFunctionBodyElements pEmptyFunctionBody;
	private final CompositionFunctionBodyPureElements pCompositionFunctionBodyPure;
	private final CompositionFunctionBodyEffectElements pCompositionFunctionBodyEffect;
	private final IOTypeElements pIOType;
	private final ValueTypeElements pValueType;
	private final TypeElements pType;
	private final IntegerTypeElements pIntegerType;
	private final StringTypeElements pStringType;
	private final UnitTypeElements pUnitType;
	private final DataTypeElements pDataType;
	private final ValueElements pValue;
	private final IntValueElements pIntValue;
	private final StringValueElements pStringValue;
	private final UnitValueElements pUnitValue;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public FPMLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pPureBlock = new PureBlockElements();
		this.pPureFunctionBlock = new PureFunctionBlockElements();
		this.pDataBlock = new DataBlockElements();
		this.pEffectFullBlock = new EffectFullBlockElements();
		this.pData = new DataElements();
		this.pAdt = new AdtElements();
		this.pSumType = new SumTypeElements();
		this.pProdType = new ProdTypeElements();
		this.pPureFunction = new PureFunctionElements();
		this.pEffectFullFunction = new EffectFullFunctionElements();
		this.pMainFunc = new MainFuncElements();
		this.pChainElement = new ChainElementElements();
		this.pInitialPureChainElement = new InitialPureChainElementElements();
		this.pFunction = new FunctionElements();
		this.pEffectFullArgument = new EffectFullArgumentElements();
		this.pArgument = new ArgumentElements();
		this.pFunctionBodyPure = new FunctionBodyPureElements();
		this.pFunctionBodyEffectFull = new FunctionBodyEffectFullElements();
		this.pEmptyFunctionBody = new EmptyFunctionBodyElements();
		this.pCompositionFunctionBodyPure = new CompositionFunctionBodyPureElements();
		this.pCompositionFunctionBodyEffect = new CompositionFunctionBodyEffectElements();
		this.pIOType = new IOTypeElements();
		this.pValueType = new ValueTypeElements();
		this.pType = new TypeElements();
		this.pIntegerType = new IntegerTypeElements();
		this.pStringType = new StringTypeElements();
		this.pUnitType = new UnitTypeElements();
		this.pDataType = new DataTypeElements();
		this.pValue = new ValueElements();
		this.pIntValue = new IntValueElements();
		this.pStringValue = new StringValueElements();
		this.pUnitValue = new UnitValueElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("it.unibo.FPML".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	/////////////////////////////////////////////////////////////////
	//// Entry element
	////////////////////////////////////////////////////////////////
	//Model:
	//	elements+=PureBlock
	//	elements+=EffectFullBlock;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	////////////////////////////////////////////////////////////////
	//// Outer Blocks
	////////////////////////////////////////////////////////////////
	//PureBlock:
	//	'Pure' '{'
	//	elements+=PureFunctionBlock
	//	elements+=DataBlock
	//	'}';
	public PureBlockElements getPureBlockAccess() {
		return pPureBlock;
	}
	
	public ParserRule getPureBlockRule() {
		return getPureBlockAccess().getRule();
	}
	
	//PureFunctionBlock:
	//	'Functions' '{'
	//	features+=PureFunction*
	//	'}';
	public PureFunctionBlockElements getPureFunctionBlockAccess() {
		return pPureFunctionBlock;
	}
	
	public ParserRule getPureFunctionBlockRule() {
		return getPureFunctionBlockAccess().getRule();
	}
	
	//DataBlock:
	//	'Data' '{'
	//	elements+=Data*
	//	'}';
	public DataBlockElements getDataBlockAccess() {
		return pDataBlock;
	}
	
	public ParserRule getDataBlockRule() {
		return getDataBlockAccess().getRule();
	}
	
	//EffectFullBlock:
	//	'Effects' '{'
	//	features+=EffectFullFunction*
	//	main=MainFunc
	//	'}';
	public EffectFullBlockElements getEffectFullBlockAccess() {
		return pEffectFullBlock;
	}
	
	public ParserRule getEffectFullBlockRule() {
		return getEffectFullBlockAccess().getRule();
	}
	
	///////////////////////////////////////////////////////////////////
	//// Outer Block Elements
	///////////////////////////////////////////////////////////////////
	//Data:
	//	name=ID ':' content=Adt;
	public DataElements getDataAccess() {
		return pData;
	}
	
	public ParserRule getDataRule() {
		return getDataAccess().getRule();
	}
	
	//Adt:
	//	Argument
	//	| Value
	//	| SumType
	//	| ProdType;
	public AdtElements getAdtAccess() {
		return pAdt;
	}
	
	public ParserRule getAdtRule() {
		return getAdtAccess().getRule();
	}
	
	//SumType:
	//	'(' SumAdtElements+=(ValueType | Value) ('+' SumAdtElements+=(ValueType | Value))+ ')';
	public SumTypeElements getSumTypeAccess() {
		return pSumType;
	}
	
	public ParserRule getSumTypeRule() {
		return getSumTypeAccess().getRule();
	}
	
	//ProdType:
	//	'(' ProdAdtElements+=(ValueType | Value) ('*' ProdAdtElements+=(ValueType | Value))+ ')';
	public ProdTypeElements getProdTypeAccess() {
		return pProdType;
	}
	
	public ParserRule getProdTypeRule() {
		return getProdTypeAccess().getRule();
	}
	
	//PureFunction:
	//	'def' returnType=ValueType name=ID '(' arg=Argument ')' ':' '{' functionBody=FunctionBodyPure '}';
	public PureFunctionElements getPureFunctionAccess() {
		return pPureFunction;
	}
	
	public ParserRule getPureFunctionRule() {
		return getPureFunctionAccess().getRule();
	}
	
	//EffectFullFunction:
	//	'def' returnType=IOType name=ID '(' arg=EffectFullArgument ')' ':' '{' functionBody=FunctionBodyEffectFull '}';
	public EffectFullFunctionElements getEffectFullFunctionAccess() {
		return pEffectFullFunction;
	}
	
	public ParserRule getEffectFullFunctionRule() {
		return getEffectFullFunctionAccess().getRule();
	}
	
	//MainFunc:
	//	'IO' returnType=UnitType 'main' ':' '{' functionBody=FunctionBodyEffectFull '}';
	public MainFuncElements getMainFuncAccess() {
		return pMainFunc;
	}
	
	public ParserRule getMainFuncRule() {
		return getMainFuncAccess().getRule();
	}
	
	/////////////////////////////////////////////////////////////////////
	//// Function Body Elements
	/////////////////////////////////////////////////////////////////////
	//ChainElement:
	//	Function | Data;
	public ChainElementElements getChainElementAccess() {
		return pChainElement;
	}
	
	public ParserRule getChainElementRule() {
		return getChainElementAccess().getRule();
	}
	
	//InitialPureChainElement:
	//	PureFunction | Data;
	public InitialPureChainElementElements getInitialPureChainElementAccess() {
		return pInitialPureChainElement;
	}
	
	public ParserRule getInitialPureChainElementRule() {
		return getInitialPureChainElementAccess().getRule();
	}
	
	//Function:
	//	PureFunction | EffectFullFunction;
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}
	
	//EffectFullArgument:
	//	type=Type name=ID?;
	public EffectFullArgumentElements getEffectFullArgumentAccess() {
		return pEffectFullArgument;
	}
	
	public ParserRule getEffectFullArgumentRule() {
		return getEffectFullArgumentAccess().getRule();
	}
	
	//Argument:
	//	type=ValueType name=ID;
	public ArgumentElements getArgumentAccess() {
		return pArgument;
	}
	
	public ParserRule getArgumentRule() {
		return getArgumentAccess().getRule();
	}
	
	//FunctionBodyPure:
	//	EmptyFunctionBody | CompositionFunctionBodyPure;
	public FunctionBodyPureElements getFunctionBodyPureAccess() {
		return pFunctionBodyPure;
	}
	
	public ParserRule getFunctionBodyPureRule() {
		return getFunctionBodyPureAccess().getRule();
	}
	
	//FunctionBodyEffectFull:
	//	EmptyFunctionBody | CompositionFunctionBodyEffect;
	public FunctionBodyEffectFullElements getFunctionBodyEffectFullAccess() {
		return pFunctionBodyEffectFull;
	}
	
	public ParserRule getFunctionBodyEffectFullRule() {
		return getFunctionBodyEffectFullAccess().getRule();
	}
	
	//EmptyFunctionBody:
	//	{EmptyFunctionBody} 'Undefined';
	public EmptyFunctionBodyElements getEmptyFunctionBodyAccess() {
		return pEmptyFunctionBody;
	}
	
	public ParserRule getEmptyFunctionBodyRule() {
		return getEmptyFunctionBodyAccess().getRule();
	}
	
	//CompositionFunctionBodyPure:
	//	(functionChain+=[InitialPureChainElement] '|>' functionChain+=[PureFunction]) ('|>' functionChain+=[PureFunction])*;
	public CompositionFunctionBodyPureElements getCompositionFunctionBodyPureAccess() {
		return pCompositionFunctionBodyPure;
	}
	
	public ParserRule getCompositionFunctionBodyPureRule() {
		return getCompositionFunctionBodyPureAccess().getRule();
	}
	
	//CompositionFunctionBodyEffect:
	//	(functionChain+=[ChainElement] '>>=' functionChain+=[ChainElement]) ('>>=' functionChain+=[ChainElement])*;
	public CompositionFunctionBodyEffectElements getCompositionFunctionBodyEffectAccess() {
		return pCompositionFunctionBodyEffect;
	}
	
	public ParserRule getCompositionFunctionBodyEffectRule() {
		return getCompositionFunctionBodyEffectAccess().getRule();
	}
	
	////////////////////////////////////////////////////////////////////////
	//// Types
	////////////////////////////////////////////////////////////////////////
	//IOType:
	//	'IO' type=Type;
	public IOTypeElements getIOTypeAccess() {
		return pIOType;
	}
	
	public ParserRule getIOTypeRule() {
		return getIOTypeAccess().getRule();
	}
	
	//ValueType:
	//	IntegerType | StringType | DataType;
	public ValueTypeElements getValueTypeAccess() {
		return pValueType;
	}
	
	public ParserRule getValueTypeRule() {
		return getValueTypeAccess().getRule();
	}
	
	//Type:
	//	ValueType | UnitType;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//IntegerType:
	//	{IntegerType} type="int";
	public IntegerTypeElements getIntegerTypeAccess() {
		return pIntegerType;
	}
	
	public ParserRule getIntegerTypeRule() {
		return getIntegerTypeAccess().getRule();
	}
	
	//StringType:
	//	{StringType} type="String";
	public StringTypeElements getStringTypeAccess() {
		return pStringType;
	}
	
	public ParserRule getStringTypeRule() {
		return getStringTypeAccess().getRule();
	}
	
	//UnitType:
	//	{UnitType} type="Unit";
	public UnitTypeElements getUnitTypeAccess() {
		return pUnitType;
	}
	
	public ParserRule getUnitTypeRule() {
		return getUnitTypeAccess().getRule();
	}
	
	//DataType:
	//	{DataType} 'ref' type=[Data];
	public DataTypeElements getDataTypeAccess() {
		return pDataType;
	}
	
	public ParserRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}
	
	//////////////////////////////////////////////////////////////////////
	//// Values
	//////////////////////////////////////////////////////////////////////
	//Value ValueType:
	//	IntValue | StringValue | UnitValue
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}
	
	//IntValue IntegerType:
	//	{IntegerType} value=INT
	public IntValueElements getIntValueAccess() {
		return pIntValue;
	}
	
	public ParserRule getIntValueRule() {
		return getIntValueAccess().getRule();
	}
	
	//StringValue StringType:
	//	{StringType} value=STRING
	public StringValueElements getStringValueAccess() {
		return pStringValue;
	}
	
	public ParserRule getStringValueRule() {
		return getStringValueAccess().getRule();
	}
	
	//UnitValue UnitType:
	//	{UnitType} '()'
	public UnitValueElements getUnitValueAccess() {
		return pUnitValue;
	}
	
	public ParserRule getUnitValueRule() {
		return getUnitValueAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
