/*
 * generated by Xtext 2.10.0
 */
package it.unibo.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class FPMLGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cElementsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cElementsPureBlockParserRuleCall_0_0 = (RuleCall)cElementsAssignment_0.eContents().get(0);
		private final Assignment cElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementsEffectFullBlockParserRuleCall_1_0 = (RuleCall)cElementsAssignment_1.eContents().get(0);
		
		/////////////////////////////////////////////////////////////////
		//// Entry element
		////////////////////////////////////////////////////////////////
		//Model:
		//	elements+=PureBlock
		//	elements+=EffectFullBlock;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=PureBlock elements+=EffectFullBlock
		public Group getGroup() { return cGroup; }
		
		//elements+=PureBlock
		public Assignment getElementsAssignment_0() { return cElementsAssignment_0; }
		
		//PureBlock
		public RuleCall getElementsPureBlockParserRuleCall_0_0() { return cElementsPureBlockParserRuleCall_0_0; }
		
		//elements+=EffectFullBlock
		public Assignment getElementsAssignment_1() { return cElementsAssignment_1; }
		
		//EffectFullBlock
		public RuleCall getElementsEffectFullBlockParserRuleCall_1_0() { return cElementsEffectFullBlockParserRuleCall_1_0; }
	}
	public class PureBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.PureBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsDataBlockParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		private final Assignment cElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementsPureFunctionBlockParserRuleCall_3_0 = (RuleCall)cElementsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////////////////////////////////////////////////////////////////
		//// Outer Blocks
		////////////////////////////////////////////////////////////////
		//PureBlock:
		//	'Pure' '{'
		//	elements+=DataBlock
		//	elements+=PureFunctionBlock
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Pure' '{' elements+=DataBlock elements+=PureFunctionBlock '}'
		public Group getGroup() { return cGroup; }
		
		//'Pure'
		public Keyword getPureKeyword_0() { return cPureKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//elements+=DataBlock
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }
		
		//DataBlock
		public RuleCall getElementsDataBlockParserRuleCall_2_0() { return cElementsDataBlockParserRuleCall_2_0; }
		
		//elements+=PureFunctionBlock
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }
		
		//PureFunctionBlock
		public RuleCall getElementsPureFunctionBlockParserRuleCall_3_0() { return cElementsPureFunctionBlockParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class PureFunctionBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.PureFunctionBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFeaturesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFeaturesPureFunctionDefinitionParserRuleCall_2_0 = (RuleCall)cFeaturesAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//PureFunctionBlock:
		//	'Functions' '{'
		//	features+=PureFunctionDefinition*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Functions' '{' features+=PureFunctionDefinition* '}'
		public Group getGroup() { return cGroup; }
		
		//'Functions'
		public Keyword getFunctionsKeyword_0() { return cFunctionsKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//features+=PureFunctionDefinition*
		public Assignment getFeaturesAssignment_2() { return cFeaturesAssignment_2; }
		
		//PureFunctionDefinition
		public RuleCall getFeaturesPureFunctionDefinitionParserRuleCall_2_0() { return cFeaturesPureFunctionDefinitionParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class DataBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.DataBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDataKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsDataParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueValueBlockParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DataBlock:
		//	'Data' '{'
		//	elements+=Data*
		//	value=ValueBlock
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Data' '{' elements+=Data* value=ValueBlock '}'
		public Group getGroup() { return cGroup; }
		
		//'Data'
		public Keyword getDataKeyword_0() { return cDataKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//elements+=Data*
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }
		
		//Data
		public RuleCall getElementsDataParserRuleCall_2_0() { return cElementsDataParserRuleCall_2_0; }
		
		//value=ValueBlock
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//ValueBlock
		public RuleCall getValueValueBlockParserRuleCall_3_0() { return cValueValueBlockParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ValueBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.ValueBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cValueKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsValueParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ValueBlock:
		//	'Value' '{'
		//	elements+=Value*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Value' '{' elements+=Value* '}'
		public Group getGroup() { return cGroup; }
		
		//'Value'
		public Keyword getValueKeyword_0() { return cValueKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//elements+=Value*
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }
		
		//Value
		public RuleCall getElementsValueParserRuleCall_2_0() { return cElementsValueParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class EffectFullBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.EffectFullBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEffectsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFeaturesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFeaturesEffectFullFunctionDefinitionParserRuleCall_2_0 = (RuleCall)cFeaturesAssignment_2.eContents().get(0);
		private final Assignment cMainAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMainMainFuncParserRuleCall_3_0 = (RuleCall)cMainAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//EffectFullBlock:
		//	'Effects' '{'
		//	features+=EffectFullFunctionDefinition*
		//	main=MainFunc
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Effects' '{' features+=EffectFullFunctionDefinition* main=MainFunc '}'
		public Group getGroup() { return cGroup; }
		
		//'Effects'
		public Keyword getEffectsKeyword_0() { return cEffectsKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//features+=EffectFullFunctionDefinition*
		public Assignment getFeaturesAssignment_2() { return cFeaturesAssignment_2; }
		
		//EffectFullFunctionDefinition
		public RuleCall getFeaturesEffectFullFunctionDefinitionParserRuleCall_2_0() { return cFeaturesEffectFullFunctionDefinitionParserRuleCall_2_0; }
		
		//main=MainFunc
		public Assignment getMainAssignment_3() { return cMainAssignment_3; }
		
		//MainFunc
		public RuleCall getMainMainFuncParserRuleCall_3_0() { return cMainMainFuncParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class DataElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.Data");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cContentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cContentAdtTypeParserRuleCall_2_0 = (RuleCall)cContentAssignment_2.eContents().get(0);
		
		///////////////////////////////////////////////////////////////////
		//// Outer Block Elements
		///////////////////////////////////////////////////////////////////
		//Data:
		//	name=ID ':' content=AdtType;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' content=AdtType
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//content=AdtType
		public Assignment getContentAssignment_2() { return cContentAssignment_2; }
		
		//AdtType
		public RuleCall getContentAdtTypeParserRuleCall_2_0() { return cContentAdtTypeParserRuleCall_2_0; }
	}
	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.Value");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueExpressionParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//Value PureFunctionDefinition:
		//	{Value} name=ID ':' value=Expression
		@Override public ParserRule getRule() { return rule; }
		
		//{Value} name=ID ':' value=Expression
		public Group getGroup() { return cGroup; }
		
		//{Value}
		public Action getValueAction_0() { return cValueAction_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//value=Expression
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_3_0() { return cValueExpressionParserRuleCall_3_0; }
	}
	public class AdtTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.AdtType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cValueTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAdtElement1Assignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAdtElement1AdtTypeParserRuleCall_1_1_0 = (RuleCall)cAdtElement1Assignment_1_1.eContents().get(0);
		private final Assignment cAdtElement2Assignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final Alternatives cAdtElement2Alternatives_1_2_0 = (Alternatives)cAdtElement2Assignment_1_2.eContents().get(0);
		private final RuleCall cAdtElement2SumTypeParserRuleCall_1_2_0_0 = (RuleCall)cAdtElement2Alternatives_1_2_0.eContents().get(0);
		private final RuleCall cAdtElement2ProdTypeParserRuleCall_1_2_0_1 = (RuleCall)cAdtElement2Alternatives_1_2_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//AdtType:
		//	ValueType
		//	| '[' adtElement1=AdtType adtElement2=(SumType | ProdType) ']';
		@Override public ParserRule getRule() { return rule; }
		
		//ValueType | '[' adtElement1=AdtType adtElement2=(SumType | ProdType) ']'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ValueType
		public RuleCall getValueTypeParserRuleCall_0() { return cValueTypeParserRuleCall_0; }
		
		//'[' adtElement1=AdtType adtElement2=(SumType | ProdType) ']'
		public Group getGroup_1() { return cGroup_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }
		
		//adtElement1=AdtType
		public Assignment getAdtElement1Assignment_1_1() { return cAdtElement1Assignment_1_1; }
		
		//AdtType
		public RuleCall getAdtElement1AdtTypeParserRuleCall_1_1_0() { return cAdtElement1AdtTypeParserRuleCall_1_1_0; }
		
		//adtElement2=(SumType | ProdType)
		public Assignment getAdtElement2Assignment_1_2() { return cAdtElement2Assignment_1_2; }
		
		//(SumType | ProdType)
		public Alternatives getAdtElement2Alternatives_1_2_0() { return cAdtElement2Alternatives_1_2_0; }
		
		//SumType
		public RuleCall getAdtElement2SumTypeParserRuleCall_1_2_0_0() { return cAdtElement2SumTypeParserRuleCall_1_2_0_0; }
		
		//ProdType
		public RuleCall getAdtElement2ProdTypeParserRuleCall_1_2_0_1() { return cAdtElement2ProdTypeParserRuleCall_1_2_0_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_3() { return cRightSquareBracketKeyword_1_3; }
	}
	public class SumTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.SumType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAdtElementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAdtElementAdtTypeParserRuleCall_1_0 = (RuleCall)cAdtElementAssignment_1.eContents().get(0);
		
		//SumType:
		//	'+' adtElement=AdtType;
		@Override public ParserRule getRule() { return rule; }
		
		//'+' adtElement=AdtType
		public Group getGroup() { return cGroup; }
		
		//'+'
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }
		
		//adtElement=AdtType
		public Assignment getAdtElementAssignment_1() { return cAdtElementAssignment_1; }
		
		//AdtType
		public RuleCall getAdtElementAdtTypeParserRuleCall_1_0() { return cAdtElementAdtTypeParserRuleCall_1_0; }
	}
	public class ProdTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.ProdType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAdtElementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAdtElementAdtTypeParserRuleCall_1_0 = (RuleCall)cAdtElementAssignment_1.eContents().get(0);
		
		//ProdType:
		//	'*' adtElement=AdtType;
		@Override public ParserRule getRule() { return rule; }
		
		//'*' adtElement=AdtType
		public Group getGroup() { return cGroup; }
		
		//'*'
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }
		
		//adtElement=AdtType
		public Assignment getAdtElementAssignment_1() { return cAdtElementAssignment_1; }
		
		//AdtType
		public RuleCall getAdtElementAdtTypeParserRuleCall_1_0() { return cAdtElementAdtTypeParserRuleCall_1_0; }
	}
	public class PureFunctionDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.PureFunctionDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReturnTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReturnTypeValueTypeParserRuleCall_1_0 = (RuleCall)cReturnTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cArgAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cArgArgumentParserRuleCall_4_0 = (RuleCall)cArgAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cArg2Assignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cArg2ArgumentParserRuleCall_5_1_0 = (RuleCall)cArg2Assignment_5_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cColonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cLeftCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cFunctionBodyAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cFunctionBodyFunctionBodyPureParserRuleCall_9_0 = (RuleCall)cFunctionBodyAssignment_9.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//PureFunctionDefinition:
		//	'def' returnType=ValueType name=ID '(' arg=Argument (',' arg2=Argument)? ')' ':' '{' functionBody=FunctionBodyPure
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'def' returnType=ValueType name=ID '(' arg=Argument (',' arg2=Argument)? ')' ':' '{' functionBody=FunctionBodyPure '}'
		public Group getGroup() { return cGroup; }
		
		//'def'
		public Keyword getDefKeyword_0() { return cDefKeyword_0; }
		
		//returnType=ValueType
		public Assignment getReturnTypeAssignment_1() { return cReturnTypeAssignment_1; }
		
		//ValueType
		public RuleCall getReturnTypeValueTypeParserRuleCall_1_0() { return cReturnTypeValueTypeParserRuleCall_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//arg=Argument
		public Assignment getArgAssignment_4() { return cArgAssignment_4; }
		
		//Argument
		public RuleCall getArgArgumentParserRuleCall_4_0() { return cArgArgumentParserRuleCall_4_0; }
		
		//(',' arg2=Argument)?
		public Group getGroup_5() { return cGroup_5; }
		
		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//arg2=Argument
		public Assignment getArg2Assignment_5_1() { return cArg2Assignment_5_1; }
		
		//Argument
		public RuleCall getArg2ArgumentParserRuleCall_5_1_0() { return cArg2ArgumentParserRuleCall_5_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
		
		//':'
		public Keyword getColonKeyword_7() { return cColonKeyword_7; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_8() { return cLeftCurlyBracketKeyword_8; }
		
		//functionBody=FunctionBodyPure
		public Assignment getFunctionBodyAssignment_9() { return cFunctionBodyAssignment_9; }
		
		//FunctionBodyPure
		public RuleCall getFunctionBodyFunctionBodyPureParserRuleCall_9_0() { return cFunctionBodyFunctionBodyPureParserRuleCall_9_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}
	public class EffectFullFunctionDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.EffectFullFunctionDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReturnTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReturnTypeIOTypeParserRuleCall_1_0 = (RuleCall)cReturnTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cArgAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cArgEffectFullArgumentParserRuleCall_4_0 = (RuleCall)cArgAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cArg2Assignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cArg2EffectFullArgumentParserRuleCall_5_1_0 = (RuleCall)cArg2Assignment_5_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cColonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cLeftCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cFunctionBodyAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cFunctionBodyFunctionBodyEffectFullParserRuleCall_9_0 = (RuleCall)cFunctionBodyAssignment_9.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//EffectFullFunctionDefinition:
		//	'def' returnType=IOType name=ID '(' arg=EffectFullArgument (',' arg2=EffectFullArgument)? ')' ':' '{'
		//	functionBody=FunctionBodyEffectFull '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'def' returnType=IOType name=ID '(' arg=EffectFullArgument (',' arg2=EffectFullArgument)? ')' ':' '{'
		//functionBody=FunctionBodyEffectFull '}'
		public Group getGroup() { return cGroup; }
		
		//'def'
		public Keyword getDefKeyword_0() { return cDefKeyword_0; }
		
		//returnType=IOType
		public Assignment getReturnTypeAssignment_1() { return cReturnTypeAssignment_1; }
		
		//IOType
		public RuleCall getReturnTypeIOTypeParserRuleCall_1_0() { return cReturnTypeIOTypeParserRuleCall_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//arg=EffectFullArgument
		public Assignment getArgAssignment_4() { return cArgAssignment_4; }
		
		//EffectFullArgument
		public RuleCall getArgEffectFullArgumentParserRuleCall_4_0() { return cArgEffectFullArgumentParserRuleCall_4_0; }
		
		//(',' arg2=EffectFullArgument)?
		public Group getGroup_5() { return cGroup_5; }
		
		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//arg2=EffectFullArgument
		public Assignment getArg2Assignment_5_1() { return cArg2Assignment_5_1; }
		
		//EffectFullArgument
		public RuleCall getArg2EffectFullArgumentParserRuleCall_5_1_0() { return cArg2EffectFullArgumentParserRuleCall_5_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
		
		//':'
		public Keyword getColonKeyword_7() { return cColonKeyword_7; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_8() { return cLeftCurlyBracketKeyword_8; }
		
		//functionBody=FunctionBodyEffectFull
		public Assignment getFunctionBodyAssignment_9() { return cFunctionBodyAssignment_9; }
		
		//FunctionBodyEffectFull
		public RuleCall getFunctionBodyFunctionBodyEffectFullParserRuleCall_9_0() { return cFunctionBodyFunctionBodyEffectFullParserRuleCall_9_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}
	public class MainFuncElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.MainFunc");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIOKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReturnTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReturnTypeUnitTypeParserRuleCall_1_0 = (RuleCall)cReturnTypeAssignment_1.eContents().get(0);
		private final Keyword cMainKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cFunctionBodyAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cFunctionBodyFunctionBodyEffectFullParserRuleCall_5_0 = (RuleCall)cFunctionBodyAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//MainFunc:
		//	'IO' returnType=UnitType 'main' ':' '{' functionBody=FunctionBodyEffectFull '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'IO' returnType=UnitType 'main' ':' '{' functionBody=FunctionBodyEffectFull '}'
		public Group getGroup() { return cGroup; }
		
		//'IO'
		public Keyword getIOKeyword_0() { return cIOKeyword_0; }
		
		//returnType=UnitType
		public Assignment getReturnTypeAssignment_1() { return cReturnTypeAssignment_1; }
		
		//UnitType
		public RuleCall getReturnTypeUnitTypeParserRuleCall_1_0() { return cReturnTypeUnitTypeParserRuleCall_1_0; }
		
		//'main'
		public Keyword getMainKeyword_2() { return cMainKeyword_2; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//functionBody=FunctionBodyEffectFull
		public Assignment getFunctionBodyAssignment_5() { return cFunctionBodyAssignment_5; }
		
		//FunctionBodyEffectFull
		public RuleCall getFunctionBodyFunctionBodyEffectFullParserRuleCall_5_0() { return cFunctionBodyFunctionBodyEffectFullParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.Function");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEffectFullFunctionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPureFunctionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Function:
		//	EffectFullFunction | PureFunction;
		@Override public ParserRule getRule() { return rule; }
		
		//EffectFullFunction | PureFunction
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EffectFullFunction
		public RuleCall getEffectFullFunctionParserRuleCall_0() { return cEffectFullFunctionParserRuleCall_0; }
		
		//PureFunction
		public RuleCall getPureFunctionParserRuleCall_1() { return cPureFunctionParserRuleCall_1; }
	}
	public class PureFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.PureFunction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPureFunctionDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPrimitivePureFunctionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PureFunction:
		//	PureFunctionDefinition | PrimitivePureFunction;
		@Override public ParserRule getRule() { return rule; }
		
		//PureFunctionDefinition | PrimitivePureFunction
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PureFunctionDefinition
		public RuleCall getPureFunctionDefinitionParserRuleCall_0() { return cPureFunctionDefinitionParserRuleCall_0; }
		
		//PrimitivePureFunction
		public RuleCall getPrimitivePureFunctionParserRuleCall_1() { return cPrimitivePureFunctionParserRuleCall_1; }
	}
	public class EffectFullFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.EffectFullFunction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEffectFullFunctionDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPrimitiveEffectFullFunctionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EffectFullFunction:
		//	EffectFullFunctionDefinition | PrimitiveEffectFullFunction;
		@Override public ParserRule getRule() { return rule; }
		
		//EffectFullFunctionDefinition | PrimitiveEffectFullFunction
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EffectFullFunctionDefinition
		public RuleCall getEffectFullFunctionDefinitionParserRuleCall_0() { return cEffectFullFunctionDefinitionParserRuleCall_0; }
		
		//PrimitiveEffectFullFunction
		public RuleCall getPrimitiveEffectFullFunctionParserRuleCall_1() { return cPrimitiveEffectFullFunctionParserRuleCall_1; }
	}
	public class EffectFullReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.EffectFullReference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFunctionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEffectFullArgumentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		/////////////////////////////////////////////////////////////////////
		//// Function Body Elements
		/////////////////////////////////////////////////////////////////////
		//EffectFullReference:
		//	Function | EffectFullArgument;
		@Override public ParserRule getRule() { return rule; }
		
		//Function | EffectFullArgument
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Function
		public RuleCall getFunctionParserRuleCall_0() { return cFunctionParserRuleCall_0; }
		
		//EffectFullArgument
		public RuleCall getEffectFullArgumentParserRuleCall_1() { return cEffectFullArgumentParserRuleCall_1; }
	}
	public class PureReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.PureReference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPureFunctionDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cArgumentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PureReference:
		//	PureFunctionDefinition | Argument;
		@Override public ParserRule getRule() { return rule; }
		
		//PureFunctionDefinition | Argument
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PureFunctionDefinition
		public RuleCall getPureFunctionDefinitionParserRuleCall_0() { return cPureFunctionDefinitionParserRuleCall_0; }
		
		//Argument
		public RuleCall getArgumentParserRuleCall_1() { return cArgumentParserRuleCall_1; }
	}
	public class EffectFullArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.EffectFullArgument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//EffectFullArgument:
		//	type=Type name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//type=Type name=ID
		public Group getGroup() { return cGroup; }
		
		//type=Type
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_0_0() { return cTypeTypeParserRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class ArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.Argument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeValueTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Argument:
		//	type=ValueType name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//type=ValueType name=ID
		public Group getGroup() { return cGroup; }
		
		//type=ValueType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//ValueType
		public RuleCall getTypeValueTypeParserRuleCall_0_0() { return cTypeValueTypeParserRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class FunctionBodyPureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.FunctionBodyPure");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEmptyFunctionBodyParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCompositionFunctionBodyPureParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//FunctionBodyPure:
		//	EmptyFunctionBody | CompositionFunctionBodyPure;
		@Override public ParserRule getRule() { return rule; }
		
		//EmptyFunctionBody | CompositionFunctionBodyPure
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EmptyFunctionBody
		public RuleCall getEmptyFunctionBodyParserRuleCall_0() { return cEmptyFunctionBodyParserRuleCall_0; }
		
		//CompositionFunctionBodyPure
		public RuleCall getCompositionFunctionBodyPureParserRuleCall_1() { return cCompositionFunctionBodyPureParserRuleCall_1; }
	}
	public class FunctionBodyEffectFullElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.FunctionBodyEffectFull");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEmptyFunctionBodyParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCompositionFunctionBodyEffectParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//FunctionBodyEffectFull:
		//	EmptyFunctionBody | CompositionFunctionBodyEffect;
		@Override public ParserRule getRule() { return rule; }
		
		//EmptyFunctionBody | CompositionFunctionBodyEffect
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EmptyFunctionBody
		public RuleCall getEmptyFunctionBodyParserRuleCall_0() { return cEmptyFunctionBodyParserRuleCall_0; }
		
		//CompositionFunctionBodyEffect
		public RuleCall getCompositionFunctionBodyEffectParserRuleCall_1() { return cCompositionFunctionBodyEffectParserRuleCall_1; }
	}
	public class EmptyFunctionBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.EmptyFunctionBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEmptyFunctionBodyAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cUndefinedKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//EmptyFunctionBody:
		//	{EmptyFunctionBody} 'Undefined';
		@Override public ParserRule getRule() { return rule; }
		
		//{EmptyFunctionBody} 'Undefined'
		public Group getGroup() { return cGroup; }
		
		//{EmptyFunctionBody}
		public Action getEmptyFunctionBodyAction_0() { return cEmptyFunctionBodyAction_0; }
		
		//'Undefined'
		public Keyword getUndefinedKeyword_1() { return cUndefinedKeyword_1; }
	}
	public class CompositionFunctionBodyPureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.CompositionFunctionBodyPure");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cReferenceElementAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final CrossReference cReferenceElementPureFunctionDefinitionCrossReference_0_0_0 = (CrossReference)cReferenceElementAssignment_0_0.eContents().get(0);
		private final RuleCall cReferenceElementPureFunctionDefinitionIDTerminalRuleCall_0_0_0_1 = (RuleCall)cReferenceElementPureFunctionDefinitionCrossReference_0_0_0.eContents().get(1);
		private final Assignment cFunctionChainAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cFunctionChainCompositionFunctionBodyPureFactorParserRuleCall_0_1_0 = (RuleCall)cFunctionChainAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cPrimitiveElementAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cPrimitiveElementPrimitivePureFunctionParserRuleCall_1_0_0 = (RuleCall)cPrimitiveElementAssignment_1_0.eContents().get(0);
		private final Assignment cFunctionChainAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFunctionChainCompositionFunctionBodyPureFactorParserRuleCall_1_1_0 = (RuleCall)cFunctionChainAssignment_1_1.eContents().get(0);
		
		//CompositionFunctionBodyPure:
		//	referenceElement=[PureFunctionDefinition] functionChain+=CompositionFunctionBodyPureFactor+
		//	| primitiveElement=PrimitivePureFunction functionChain+=CompositionFunctionBodyPureFactor+;
		@Override public ParserRule getRule() { return rule; }
		
		//referenceElement=[PureFunctionDefinition] functionChain+=CompositionFunctionBodyPureFactor+ |
		//primitiveElement=PrimitivePureFunction functionChain+=CompositionFunctionBodyPureFactor+
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//referenceElement=[PureFunctionDefinition] functionChain+=CompositionFunctionBodyPureFactor+
		public Group getGroup_0() { return cGroup_0; }
		
		//referenceElement=[PureFunctionDefinition]
		public Assignment getReferenceElementAssignment_0_0() { return cReferenceElementAssignment_0_0; }
		
		//[PureFunctionDefinition]
		public CrossReference getReferenceElementPureFunctionDefinitionCrossReference_0_0_0() { return cReferenceElementPureFunctionDefinitionCrossReference_0_0_0; }
		
		//ID
		public RuleCall getReferenceElementPureFunctionDefinitionIDTerminalRuleCall_0_0_0_1() { return cReferenceElementPureFunctionDefinitionIDTerminalRuleCall_0_0_0_1; }
		
		//functionChain+=CompositionFunctionBodyPureFactor+
		public Assignment getFunctionChainAssignment_0_1() { return cFunctionChainAssignment_0_1; }
		
		//CompositionFunctionBodyPureFactor
		public RuleCall getFunctionChainCompositionFunctionBodyPureFactorParserRuleCall_0_1_0() { return cFunctionChainCompositionFunctionBodyPureFactorParserRuleCall_0_1_0; }
		
		//primitiveElement=PrimitivePureFunction functionChain+=CompositionFunctionBodyPureFactor+
		public Group getGroup_1() { return cGroup_1; }
		
		//primitiveElement=PrimitivePureFunction
		public Assignment getPrimitiveElementAssignment_1_0() { return cPrimitiveElementAssignment_1_0; }
		
		//PrimitivePureFunction
		public RuleCall getPrimitiveElementPrimitivePureFunctionParserRuleCall_1_0_0() { return cPrimitiveElementPrimitivePureFunctionParserRuleCall_1_0_0; }
		
		//functionChain+=CompositionFunctionBodyPureFactor+
		public Assignment getFunctionChainAssignment_1_1() { return cFunctionChainAssignment_1_1; }
		
		//CompositionFunctionBodyPureFactor
		public RuleCall getFunctionChainCompositionFunctionBodyPureFactorParserRuleCall_1_1_0() { return cFunctionChainCompositionFunctionBodyPureFactorParserRuleCall_1_1_0; }
	}
	public class CompositionFunctionBodyPureFactorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.CompositionFunctionBodyPureFactor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cVerticalLineGreaterThanSignKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cReferenceElementAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cReferenceElementPureFunctionDefinitionCrossReference_0_1_0 = (CrossReference)cReferenceElementAssignment_0_1.eContents().get(0);
		private final RuleCall cReferenceElementPureFunctionDefinitionIDTerminalRuleCall_0_1_0_1 = (RuleCall)cReferenceElementPureFunctionDefinitionCrossReference_0_1_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cVerticalLineGreaterThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cPrimitiveElementAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPrimitiveElementPrimitivePureFunctionParserRuleCall_1_1_0 = (RuleCall)cPrimitiveElementAssignment_1_1.eContents().get(0);
		
		//CompositionFunctionBodyPureFactor:
		//	'|>' referenceElement=[PureFunctionDefinition] | '|>' PrimitiveElement=PrimitivePureFunction;
		@Override public ParserRule getRule() { return rule; }
		
		//'|>' referenceElement=[PureFunctionDefinition] | '|>' PrimitiveElement=PrimitivePureFunction
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'|>' referenceElement=[PureFunctionDefinition]
		public Group getGroup_0() { return cGroup_0; }
		
		//'|>'
		public Keyword getVerticalLineGreaterThanSignKeyword_0_0() { return cVerticalLineGreaterThanSignKeyword_0_0; }
		
		//referenceElement=[PureFunctionDefinition]
		public Assignment getReferenceElementAssignment_0_1() { return cReferenceElementAssignment_0_1; }
		
		//[PureFunctionDefinition]
		public CrossReference getReferenceElementPureFunctionDefinitionCrossReference_0_1_0() { return cReferenceElementPureFunctionDefinitionCrossReference_0_1_0; }
		
		//ID
		public RuleCall getReferenceElementPureFunctionDefinitionIDTerminalRuleCall_0_1_0_1() { return cReferenceElementPureFunctionDefinitionIDTerminalRuleCall_0_1_0_1; }
		
		//'|>' PrimitiveElement=PrimitivePureFunction
		public Group getGroup_1() { return cGroup_1; }
		
		//'|>'
		public Keyword getVerticalLineGreaterThanSignKeyword_1_0() { return cVerticalLineGreaterThanSignKeyword_1_0; }
		
		//PrimitiveElement=PrimitivePureFunction
		public Assignment getPrimitiveElementAssignment_1_1() { return cPrimitiveElementAssignment_1_1; }
		
		//PrimitivePureFunction
		public RuleCall getPrimitiveElementPrimitivePureFunctionParserRuleCall_1_1_0() { return cPrimitiveElementPrimitivePureFunctionParserRuleCall_1_1_0; }
	}
	public class CompositionFunctionBodyEffectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.CompositionFunctionBodyEffect");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cReferenceElementAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final CrossReference cReferenceElementEffectFullReferenceCrossReference_0_0_0 = (CrossReference)cReferenceElementAssignment_0_0.eContents().get(0);
		private final RuleCall cReferenceElementEffectFullReferenceIDTerminalRuleCall_0_0_0_1 = (RuleCall)cReferenceElementEffectFullReferenceCrossReference_0_0_0.eContents().get(1);
		private final Assignment cFunctionChainAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cFunctionChainCompositionFunctionBodyEffectFullFactorParserRuleCall_0_1_0 = (RuleCall)cFunctionChainAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cPrimitiveElementAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Alternatives cPrimitiveElementAlternatives_1_0_0 = (Alternatives)cPrimitiveElementAssignment_1_0.eContents().get(0);
		private final RuleCall cPrimitiveElementPrimitiveEffectFullFunctionParserRuleCall_1_0_0_0 = (RuleCall)cPrimitiveElementAlternatives_1_0_0.eContents().get(0);
		private final RuleCall cPrimitiveElementPrimitivePureFunctionParserRuleCall_1_0_0_1 = (RuleCall)cPrimitiveElementAlternatives_1_0_0.eContents().get(1);
		private final Assignment cFunctionChainAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFunctionChainCompositionFunctionBodyEffectFullFactorParserRuleCall_1_1_0 = (RuleCall)cFunctionChainAssignment_1_1.eContents().get(0);
		
		//CompositionFunctionBodyEffect:
		//	referenceElement=[EffectFullReference] functionChain+=CompositionFunctionBodyEffectFullFactor+
		//	| primitiveElement=(PrimitiveEffectFullFunction | PrimitivePureFunction)
		//	functionChain+=CompositionFunctionBodyEffectFullFactor+;
		@Override public ParserRule getRule() { return rule; }
		
		//referenceElement=[EffectFullReference] functionChain+=CompositionFunctionBodyEffectFullFactor+ |
		//primitiveElement=(PrimitiveEffectFullFunction | PrimitivePureFunction)
		//functionChain+=CompositionFunctionBodyEffectFullFactor+
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//referenceElement=[EffectFullReference] functionChain+=CompositionFunctionBodyEffectFullFactor+
		public Group getGroup_0() { return cGroup_0; }
		
		//referenceElement=[EffectFullReference]
		public Assignment getReferenceElementAssignment_0_0() { return cReferenceElementAssignment_0_0; }
		
		//[EffectFullReference]
		public CrossReference getReferenceElementEffectFullReferenceCrossReference_0_0_0() { return cReferenceElementEffectFullReferenceCrossReference_0_0_0; }
		
		//ID
		public RuleCall getReferenceElementEffectFullReferenceIDTerminalRuleCall_0_0_0_1() { return cReferenceElementEffectFullReferenceIDTerminalRuleCall_0_0_0_1; }
		
		//functionChain+=CompositionFunctionBodyEffectFullFactor+
		public Assignment getFunctionChainAssignment_0_1() { return cFunctionChainAssignment_0_1; }
		
		//CompositionFunctionBodyEffectFullFactor
		public RuleCall getFunctionChainCompositionFunctionBodyEffectFullFactorParserRuleCall_0_1_0() { return cFunctionChainCompositionFunctionBodyEffectFullFactorParserRuleCall_0_1_0; }
		
		//primitiveElement=(PrimitiveEffectFullFunction | PrimitivePureFunction)
		//functionChain+=CompositionFunctionBodyEffectFullFactor+
		public Group getGroup_1() { return cGroup_1; }
		
		//primitiveElement=(PrimitiveEffectFullFunction | PrimitivePureFunction)
		public Assignment getPrimitiveElementAssignment_1_0() { return cPrimitiveElementAssignment_1_0; }
		
		//(PrimitiveEffectFullFunction | PrimitivePureFunction)
		public Alternatives getPrimitiveElementAlternatives_1_0_0() { return cPrimitiveElementAlternatives_1_0_0; }
		
		//PrimitiveEffectFullFunction
		public RuleCall getPrimitiveElementPrimitiveEffectFullFunctionParserRuleCall_1_0_0_0() { return cPrimitiveElementPrimitiveEffectFullFunctionParserRuleCall_1_0_0_0; }
		
		//PrimitivePureFunction
		public RuleCall getPrimitiveElementPrimitivePureFunctionParserRuleCall_1_0_0_1() { return cPrimitiveElementPrimitivePureFunctionParserRuleCall_1_0_0_1; }
		
		//functionChain+=CompositionFunctionBodyEffectFullFactor+
		public Assignment getFunctionChainAssignment_1_1() { return cFunctionChainAssignment_1_1; }
		
		//CompositionFunctionBodyEffectFullFactor
		public RuleCall getFunctionChainCompositionFunctionBodyEffectFullFactorParserRuleCall_1_1_0() { return cFunctionChainCompositionFunctionBodyEffectFullFactorParserRuleCall_1_1_0; }
	}
	public class CompositionFunctionBodyEffectFullFactorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.CompositionFunctionBodyEffectFullFactor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cGreaterThanSignGreaterThanSignEqualsSignKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cReferenceElementAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cReferenceElementEffectFullReferenceCrossReference_0_1_0 = (CrossReference)cReferenceElementAssignment_0_1.eContents().get(0);
		private final RuleCall cReferenceElementEffectFullReferenceIDTerminalRuleCall_0_1_0_1 = (RuleCall)cReferenceElementEffectFullReferenceCrossReference_0_1_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cGreaterThanSignGreaterThanSignEqualsSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cPrimitiveElementAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cPrimitiveElementAlternatives_1_1_0 = (Alternatives)cPrimitiveElementAssignment_1_1.eContents().get(0);
		private final RuleCall cPrimitiveElementPrimitiveEffectFullFunctionParserRuleCall_1_1_0_0 = (RuleCall)cPrimitiveElementAlternatives_1_1_0.eContents().get(0);
		private final RuleCall cPrimitiveElementPrimitivePureFunctionParserRuleCall_1_1_0_1 = (RuleCall)cPrimitiveElementAlternatives_1_1_0.eContents().get(1);
		
		//CompositionFunctionBodyEffectFullFactor:
		//	'>>=' referenceElement=[EffectFullReference] | '>>=' PrimitiveElement=(PrimitiveEffectFullFunction |
		//	PrimitivePureFunction);
		@Override public ParserRule getRule() { return rule; }
		
		//'>>=' referenceElement=[EffectFullReference] | '>>=' PrimitiveElement=(PrimitiveEffectFullFunction |
		//PrimitivePureFunction)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'>>=' referenceElement=[EffectFullReference]
		public Group getGroup_0() { return cGroup_0; }
		
		//'>>='
		public Keyword getGreaterThanSignGreaterThanSignEqualsSignKeyword_0_0() { return cGreaterThanSignGreaterThanSignEqualsSignKeyword_0_0; }
		
		//referenceElement=[EffectFullReference]
		public Assignment getReferenceElementAssignment_0_1() { return cReferenceElementAssignment_0_1; }
		
		//[EffectFullReference]
		public CrossReference getReferenceElementEffectFullReferenceCrossReference_0_1_0() { return cReferenceElementEffectFullReferenceCrossReference_0_1_0; }
		
		//ID
		public RuleCall getReferenceElementEffectFullReferenceIDTerminalRuleCall_0_1_0_1() { return cReferenceElementEffectFullReferenceIDTerminalRuleCall_0_1_0_1; }
		
		//'>>=' PrimitiveElement=(PrimitiveEffectFullFunction | PrimitivePureFunction)
		public Group getGroup_1() { return cGroup_1; }
		
		//'>>='
		public Keyword getGreaterThanSignGreaterThanSignEqualsSignKeyword_1_0() { return cGreaterThanSignGreaterThanSignEqualsSignKeyword_1_0; }
		
		//PrimitiveElement=(PrimitiveEffectFullFunction | PrimitivePureFunction)
		public Assignment getPrimitiveElementAssignment_1_1() { return cPrimitiveElementAssignment_1_1; }
		
		//(PrimitiveEffectFullFunction | PrimitivePureFunction)
		public Alternatives getPrimitiveElementAlternatives_1_1_0() { return cPrimitiveElementAlternatives_1_1_0; }
		
		//PrimitiveEffectFullFunction
		public RuleCall getPrimitiveElementPrimitiveEffectFullFunctionParserRuleCall_1_1_0_0() { return cPrimitiveElementPrimitiveEffectFullFunctionParserRuleCall_1_1_0_0; }
		
		//PrimitivePureFunction
		public RuleCall getPrimitiveElementPrimitivePureFunctionParserRuleCall_1_1_0_1() { return cPrimitiveElementPrimitivePureFunctionParserRuleCall_1_1_0_1; }
	}
	public class IOTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.IOType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIOKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		
		////////////////////////////////////////////////////////////////////////
		//// Types
		////////////////////////////////////////////////////////////////////////
		//IOType:
		//	'IO' type=Type;
		@Override public ParserRule getRule() { return rule; }
		
		//'IO' type=Type
		public Group getGroup() { return cGroup; }
		
		//'IO'
		public Keyword getIOKeyword_0() { return cIOKeyword_0; }
		
		//type=Type
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_1_0() { return cTypeTypeParserRuleCall_1_0; }
	}
	public class ValueTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.ValueType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntegerTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStringTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDataTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPureFunctionTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//ValueType:
		//	IntegerType | StringType | DataType | PureFunctionType;
		@Override public ParserRule getRule() { return rule; }
		
		//IntegerType | StringType | DataType | PureFunctionType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IntegerType
		public RuleCall getIntegerTypeParserRuleCall_0() { return cIntegerTypeParserRuleCall_0; }
		
		//StringType
		public RuleCall getStringTypeParserRuleCall_1() { return cStringTypeParserRuleCall_1; }
		
		//DataType
		public RuleCall getDataTypeParserRuleCall_2() { return cDataTypeParserRuleCall_2; }
		
		//PureFunctionType
		public RuleCall getPureFunctionTypeParserRuleCall_3() { return cPureFunctionTypeParserRuleCall_3; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cValueTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUnitTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEffectFullFunctionTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Type:
		//	ValueType | UnitType | EffectFullFunctionType;
		@Override public ParserRule getRule() { return rule; }
		
		//ValueType | UnitType | EffectFullFunctionType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ValueType
		public RuleCall getValueTypeParserRuleCall_0() { return cValueTypeParserRuleCall_0; }
		
		//UnitType
		public RuleCall getUnitTypeParserRuleCall_1() { return cUnitTypeParserRuleCall_1; }
		
		//EffectFullFunctionType
		public RuleCall getEffectFullFunctionTypeParserRuleCall_2() { return cEffectFullFunctionTypeParserRuleCall_2; }
	}
	public class IntegerTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.IntegerType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIntegerTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cTypeIntKeyword_1_0 = (Keyword)cTypeAssignment_1.eContents().get(0);
		
		//IntegerType:
		//	{IntegerType} type="int";
		@Override public ParserRule getRule() { return rule; }
		
		//{IntegerType} type="int"
		public Group getGroup() { return cGroup; }
		
		//{IntegerType}
		public Action getIntegerTypeAction_0() { return cIntegerTypeAction_0; }
		
		//type="int"
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//"int"
		public Keyword getTypeIntKeyword_1_0() { return cTypeIntKeyword_1_0; }
	}
	public class StringTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.StringType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStringTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cTypeStringKeyword_1_0 = (Keyword)cTypeAssignment_1.eContents().get(0);
		
		//StringType:
		//	{StringType} type="String";
		@Override public ParserRule getRule() { return rule; }
		
		//{StringType} type="String"
		public Group getGroup() { return cGroup; }
		
		//{StringType}
		public Action getStringTypeAction_0() { return cStringTypeAction_0; }
		
		//type="String"
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//"String"
		public Keyword getTypeStringKeyword_1_0() { return cTypeStringKeyword_1_0; }
	}
	public class UnitTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.UnitType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUnitTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cTypeUnitKeyword_1_0 = (Keyword)cTypeAssignment_1.eContents().get(0);
		
		//UnitType:
		//	{UnitType} type="Unit";
		@Override public ParserRule getRule() { return rule; }
		
		//{UnitType} type="Unit"
		public Group getGroup() { return cGroup; }
		
		//{UnitType}
		public Action getUnitTypeAction_0() { return cUnitTypeAction_0; }
		
		//type="Unit"
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//"Unit"
		public Keyword getTypeUnitKeyword_1_0() { return cTypeUnitKeyword_1_0; }
	}
	public class DataTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.DataType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDataTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRefKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypeDataCrossReference_2_0 = (CrossReference)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypeDataIDTerminalRuleCall_2_0_1 = (RuleCall)cTypeDataCrossReference_2_0.eContents().get(1);
		
		//DataType:
		//	{DataType} 'ref' type=[Data];
		@Override public ParserRule getRule() { return rule; }
		
		//{DataType} 'ref' type=[Data]
		public Group getGroup() { return cGroup; }
		
		//{DataType}
		public Action getDataTypeAction_0() { return cDataTypeAction_0; }
		
		//'ref'
		public Keyword getRefKeyword_1() { return cRefKeyword_1; }
		
		//type=[Data]
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//[Data]
		public CrossReference getTypeDataCrossReference_2_0() { return cTypeDataCrossReference_2_0; }
		
		//ID
		public RuleCall getTypeDataIDTerminalRuleCall_2_0_1() { return cTypeDataIDTerminalRuleCall_2_0_1; }
	}
	public class PureFunctionTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.PureFunctionType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPureFunctionTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLessThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cArgTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cArgTypeValueTypeParserRuleCall_3_0 = (RuleCall)cArgTypeAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cReturnTypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cReturnTypeValueTypeParserRuleCall_5_0 = (RuleCall)cReturnTypeAssignment_5.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//PureFunctionType:
		//	{PureFunctionType} 'F' '<' argType=ValueType ',' returnType=ValueType '>';
		@Override public ParserRule getRule() { return rule; }
		
		//{PureFunctionType} 'F' '<' argType=ValueType ',' returnType=ValueType '>'
		public Group getGroup() { return cGroup; }
		
		//{PureFunctionType}
		public Action getPureFunctionTypeAction_0() { return cPureFunctionTypeAction_0; }
		
		//'F'
		public Keyword getFKeyword_1() { return cFKeyword_1; }
		
		//'<'
		public Keyword getLessThanSignKeyword_2() { return cLessThanSignKeyword_2; }
		
		//argType=ValueType
		public Assignment getArgTypeAssignment_3() { return cArgTypeAssignment_3; }
		
		//ValueType
		public RuleCall getArgTypeValueTypeParserRuleCall_3_0() { return cArgTypeValueTypeParserRuleCall_3_0; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//returnType=ValueType
		public Assignment getReturnTypeAssignment_5() { return cReturnTypeAssignment_5; }
		
		//ValueType
		public RuleCall getReturnTypeValueTypeParserRuleCall_5_0() { return cReturnTypeValueTypeParserRuleCall_5_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_6() { return cGreaterThanSignKeyword_6; }
	}
	public class EffectFullFunctionTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.EffectFullFunctionType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEffectFullFunctionTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFIOKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLessThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cArgTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cArgTypeIOTypeParserRuleCall_3_0 = (RuleCall)cArgTypeAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cReturnTypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cReturnTypeIOTypeParserRuleCall_5_0 = (RuleCall)cReturnTypeAssignment_5.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//EffectFullFunctionType:
		//	{EffectFullFunctionType} 'FIO' '<' argType=IOType ',' returnType=IOType '>';
		@Override public ParserRule getRule() { return rule; }
		
		//{EffectFullFunctionType} 'FIO' '<' argType=IOType ',' returnType=IOType '>'
		public Group getGroup() { return cGroup; }
		
		//{EffectFullFunctionType}
		public Action getEffectFullFunctionTypeAction_0() { return cEffectFullFunctionTypeAction_0; }
		
		//'FIO'
		public Keyword getFIOKeyword_1() { return cFIOKeyword_1; }
		
		//'<'
		public Keyword getLessThanSignKeyword_2() { return cLessThanSignKeyword_2; }
		
		//argType=IOType
		public Assignment getArgTypeAssignment_3() { return cArgTypeAssignment_3; }
		
		//IOType
		public RuleCall getArgTypeIOTypeParserRuleCall_3_0() { return cArgTypeIOTypeParserRuleCall_3_0; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//returnType=IOType
		public Assignment getReturnTypeAssignment_5() { return cReturnTypeAssignment_5; }
		
		//IOType
		public RuleCall getReturnTypeIOTypeParserRuleCall_5_0() { return cReturnTypeIOTypeParserRuleCall_5_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_6() { return cGreaterThanSignKeyword_6; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStringValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDataValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cFunctionValueParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//////////////////////////////////////////////////////////////////////
		//// Values
		//////////////////////////////////////////////////////////////////////
		//Expression:
		//	IntValue | StringValue | DataValue | FunctionValue;
		@Override public ParserRule getRule() { return rule; }
		
		//IntValue | StringValue | DataValue | FunctionValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IntValue
		public RuleCall getIntValueParserRuleCall_0() { return cIntValueParserRuleCall_0; }
		
		//StringValue
		public RuleCall getStringValueParserRuleCall_1() { return cStringValueParserRuleCall_1; }
		
		//DataValue
		public RuleCall getDataValueParserRuleCall_2() { return cDataValueParserRuleCall_2; }
		
		//FunctionValue
		public RuleCall getFunctionValueParserRuleCall_3() { return cFunctionValueParserRuleCall_3; }
	}
	public class IntValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.IntValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIntegerTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//IntValue IntegerType:
		//	{IntegerType} value=INT
		@Override public ParserRule getRule() { return rule; }
		
		//{IntegerType} value=INT
		public Group getGroup() { return cGroup; }
		
		//{IntegerType}
		public Action getIntegerTypeAction_0() { return cIntegerTypeAction_0; }
		
		//value=INT
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_1_0() { return cValueINTTerminalRuleCall_1_0; }
	}
	public class StringValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.StringValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStringTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//StringValue StringType:
		//	{StringType} value=STRING
		@Override public ParserRule getRule() { return rule; }
		
		//{StringType} value=STRING
		public Group getGroup() { return cGroup; }
		
		//{StringType}
		public Action getStringTypeAction_0() { return cStringTypeAction_0; }
		
		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
	}
	public class FunctionValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.FunctionValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValuePureLambdaParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//FunctionValue PureFunctionType:
		//	value=PureLambda
		@Override public ParserRule getRule() { return rule; }
		
		//value=PureLambda
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//PureLambda
		public RuleCall getValuePureLambdaParserRuleCall_0() { return cValuePureLambdaParserRuleCall_0; }
	}
	public class DataValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.DataValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDataValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeDataCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeDataIDTerminalRuleCall_1_0_1 = (RuleCall)cTypeDataCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueAdtValueParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DataValue DataType:
		//	{DataValue} type=[Data] '(' value=AdtValue ')'
		@Override public ParserRule getRule() { return rule; }
		
		//{DataValue} type=[Data] '(' value=AdtValue ')'
		public Group getGroup() { return cGroup; }
		
		//{DataValue}
		public Action getDataValueAction_0() { return cDataValueAction_0; }
		
		//type=[Data]
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//[Data]
		public CrossReference getTypeDataCrossReference_1_0() { return cTypeDataCrossReference_1_0; }
		
		//ID
		public RuleCall getTypeDataIDTerminalRuleCall_1_0_1() { return cTypeDataIDTerminalRuleCall_1_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//value=AdtValue
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//AdtValue
		public RuleCall getValueAdtValueParserRuleCall_3_0() { return cValueAdtValueParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ValueRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.ValueRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cValueRefAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cValueValueCrossReference_1_0 = (CrossReference)cValueAssignment_1.eContents().get(0);
		private final RuleCall cValueValueIDTerminalRuleCall_1_0_1 = (RuleCall)cValueValueCrossReference_1_0.eContents().get(1);
		
		//ValueRef:
		//	{ValueRef} value=[Value];
		@Override public ParserRule getRule() { return rule; }
		
		//{ValueRef} value=[Value]
		public Group getGroup() { return cGroup; }
		
		//{ValueRef}
		public Action getValueRefAction_0() { return cValueRefAction_0; }
		
		//value=[Value]
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//[Value]
		public CrossReference getValueValueCrossReference_1_0() { return cValueValueCrossReference_1_0; }
		
		//ID
		public RuleCall getValueValueIDTerminalRuleCall_1_0_1() { return cValueValueIDTerminalRuleCall_1_0_1; }
	}
	public class PureLambdaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.PureLambda");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPureLambdaAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArgAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgArgumentParserRuleCall_2_0 = (RuleCall)cArgAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cFunctionBodyAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cFunctionBodyFunctionBodyPureParserRuleCall_5_0 = (RuleCall)cFunctionBodyAssignment_5.eContents().get(0);
		
		//PureLambda PureFunctionDefinition:
		//	{PureLambda} '(' arg=Argument ')' ':' functionBody=FunctionBodyPure
		@Override public ParserRule getRule() { return rule; }
		
		//{PureLambda} '(' arg=Argument ')' ':' functionBody=FunctionBodyPure
		public Group getGroup() { return cGroup; }
		
		//{PureLambda}
		public Action getPureLambdaAction_0() { return cPureLambdaAction_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//arg=Argument
		public Assignment getArgAssignment_2() { return cArgAssignment_2; }
		
		//Argument
		public RuleCall getArgArgumentParserRuleCall_2_0() { return cArgArgumentParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//':'
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }
		
		//functionBody=FunctionBodyPure
		public Assignment getFunctionBodyAssignment_5() { return cFunctionBodyAssignment_5; }
		
		//FunctionBodyPure
		public RuleCall getFunctionBodyFunctionBodyPureParserRuleCall_5_0() { return cFunctionBodyFunctionBodyPureParserRuleCall_5_0; }
	}
	public class AdtValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.AdtValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStringValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cValueRefParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDataValueParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSumValueParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cFunctionValueParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cProdValueParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//AdtValue:
		//	IntValue
		//	| StringValue
		//	| ValueRef
		//	| DataValue
		//	| SumValue
		//	| FunctionValue
		//	| ProdValue;
		@Override public ParserRule getRule() { return rule; }
		
		//IntValue | StringValue | ValueRef | DataValue | SumValue | FunctionValue | ProdValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IntValue
		public RuleCall getIntValueParserRuleCall_0() { return cIntValueParserRuleCall_0; }
		
		//StringValue
		public RuleCall getStringValueParserRuleCall_1() { return cStringValueParserRuleCall_1; }
		
		//ValueRef
		public RuleCall getValueRefParserRuleCall_2() { return cValueRefParserRuleCall_2; }
		
		//DataValue
		public RuleCall getDataValueParserRuleCall_3() { return cDataValueParserRuleCall_3; }
		
		//SumValue
		public RuleCall getSumValueParserRuleCall_4() { return cSumValueParserRuleCall_4; }
		
		//FunctionValue
		public RuleCall getFunctionValueParserRuleCall_5() { return cFunctionValueParserRuleCall_5; }
		
		//ProdValue
		public RuleCall getProdValueParserRuleCall_6() { return cProdValueParserRuleCall_6; }
	}
	public class ProdValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.ProdValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cProdAdtElement1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cProdAdtElement1AdtValueParserRuleCall_1_0 = (RuleCall)cProdAdtElement1Assignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cProdAdtElement2Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cProdAdtElement2AdtValueParserRuleCall_3_0 = (RuleCall)cProdAdtElement2Assignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ProdValue:
		//	'(' prodAdtElement1=AdtValue ',' prodAdtElement2=AdtValue ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' prodAdtElement1=AdtValue ',' prodAdtElement2=AdtValue ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//prodAdtElement1=AdtValue
		public Assignment getProdAdtElement1Assignment_1() { return cProdAdtElement1Assignment_1; }
		
		//AdtValue
		public RuleCall getProdAdtElement1AdtValueParserRuleCall_1_0() { return cProdAdtElement1AdtValueParserRuleCall_1_0; }
		
		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//prodAdtElement2=AdtValue
		public Assignment getProdAdtElement2Assignment_3() { return cProdAdtElement2Assignment_3; }
		
		//AdtValue
		public RuleCall getProdAdtElement2AdtValueParserRuleCall_3_0() { return cProdAdtElement2AdtValueParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class SumValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.SumValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cSumAdtElement1Assignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cSumAdtElement1AdtValueParserRuleCall_0_2_0 = (RuleCall)cSumAdtElement1Assignment_0_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cRightKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cSumAdtElement2Assignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cSumAdtElement2AdtValueParserRuleCall_1_2_0 = (RuleCall)cSumAdtElement2Assignment_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//SumValue:
		//	'Left' '(' sumAdtElement1=AdtValue ')'
		//	| 'Right' '(' sumAdtElement2=AdtValue ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'Left' '(' sumAdtElement1=AdtValue ')' | 'Right' '(' sumAdtElement2=AdtValue ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'Left' '(' sumAdtElement1=AdtValue ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'Left'
		public Keyword getLeftKeyword_0_0() { return cLeftKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }
		
		//sumAdtElement1=AdtValue
		public Assignment getSumAdtElement1Assignment_0_2() { return cSumAdtElement1Assignment_0_2; }
		
		//AdtValue
		public RuleCall getSumAdtElement1AdtValueParserRuleCall_0_2_0() { return cSumAdtElement1AdtValueParserRuleCall_0_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_3() { return cRightParenthesisKeyword_0_3; }
		
		//'Right' '(' sumAdtElement2=AdtValue ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'Right'
		public Keyword getRightKeyword_1_0() { return cRightKeyword_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }
		
		//sumAdtElement2=AdtValue
		public Assignment getSumAdtElement2Assignment_1_2() { return cSumAdtElement2Assignment_1_2; }
		
		//AdtValue
		public RuleCall getSumAdtElement2AdtValueParserRuleCall_1_2_0() { return cSumAdtElement2AdtValueParserRuleCall_1_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
	}
	public class PrimitivePureFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.PrimitivePureFunction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntToStringParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntPowParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPlusParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cMinusParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cTimesParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cModParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cApplyFParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		///////////////////////////////////////////////////////////////////////
		//// Primitives
		///////////////////////////////////////////////////////////////////////
		//PrimitivePureFunction:
		//	IntToString | IntPow | Plus | Minus | Times | Mod | ApplyF;
		@Override public ParserRule getRule() { return rule; }
		
		//IntToString | IntPow | Plus | Minus | Times | Mod | ApplyF
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IntToString
		public RuleCall getIntToStringParserRuleCall_0() { return cIntToStringParserRuleCall_0; }
		
		//IntPow
		public RuleCall getIntPowParserRuleCall_1() { return cIntPowParserRuleCall_1; }
		
		//Plus
		public RuleCall getPlusParserRuleCall_2() { return cPlusParserRuleCall_2; }
		
		//Minus
		public RuleCall getMinusParserRuleCall_3() { return cMinusParserRuleCall_3; }
		
		//Times
		public RuleCall getTimesParserRuleCall_4() { return cTimesParserRuleCall_4; }
		
		//Mod
		public RuleCall getModParserRuleCall_5() { return cModParserRuleCall_5; }
		
		//ApplyF
		public RuleCall getApplyFParserRuleCall_6() { return cApplyFParserRuleCall_6; }
	}
	public class IntToStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.IntToString");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIntToStringAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIntToStringKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//IntToString:
		//	{IntToString} 'IntToString';
		@Override public ParserRule getRule() { return rule; }
		
		//{IntToString} 'IntToString'
		public Group getGroup() { return cGroup; }
		
		//{IntToString}
		public Action getIntToStringAction_0() { return cIntToStringAction_0; }
		
		//'IntToString'
		public Keyword getIntToStringKeyword_1() { return cIntToStringKeyword_1; }
	}
	public class IntPowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.IntPow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIntPowAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIntPowKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//IntPow:
		//	{IntPow} 'IntPow';
		@Override public ParserRule getRule() { return rule; }
		
		//{IntPow} 'IntPow'
		public Group getGroup() { return cGroup; }
		
		//{IntPow}
		public Action getIntPowAction_0() { return cIntPowAction_0; }
		
		//'IntPow'
		public Keyword getIntPowKeyword_1() { return cIntPowKeyword_1; }
	}
	public class PlusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.Plus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPlusAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPlusSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Plus:
		//	{Plus} '+';
		@Override public ParserRule getRule() { return rule; }
		
		//{Plus} '+'
		public Group getGroup() { return cGroup; }
		
		//{Plus}
		public Action getPlusAction_0() { return cPlusAction_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1() { return cPlusSignKeyword_1; }
	}
	public class MinusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.Minus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMinusAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Minus:
		//	{Minus} '-';
		@Override public ParserRule getRule() { return rule; }
		
		//{Minus} '-'
		public Group getGroup() { return cGroup; }
		
		//{Minus}
		public Action getMinusAction_0() { return cMinusAction_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
	}
	public class TimesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.Times");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTimesAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Times:
		//	{Times} '*';
		@Override public ParserRule getRule() { return rule; }
		
		//{Times} '*'
		public Group getGroup() { return cGroup; }
		
		//{Times}
		public Action getTimesAction_0() { return cTimesAction_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1() { return cAsteriskKeyword_1; }
	}
	public class ModElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.Mod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cModAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cModKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Mod:
		//	{Mod} 'mod';
		@Override public ParserRule getRule() { return rule; }
		
		//{Mod} 'mod'
		public Group getGroup() { return cGroup; }
		
		//{Mod}
		public Action getModAction_0() { return cModAction_0; }
		
		//'mod'
		public Keyword getModKeyword_1() { return cModKeyword_1; }
	}
	public class ApplyFElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.ApplyF");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cApplyFAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cApplyFKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFunctionTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFunctionTypePureFunctionTypeParserRuleCall_2_0 = (RuleCall)cFunctionTypeAssignment_2.eContents().get(0);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cValuePureReferenceCrossReference_3_0 = (CrossReference)cValueAssignment_3.eContents().get(0);
		private final RuleCall cValuePureReferenceIDTerminalRuleCall_3_0_1 = (RuleCall)cValuePureReferenceCrossReference_3_0.eContents().get(1);
		
		//ApplyF:
		//	{ApplyF} 'applyF' functionType=PureFunctionType value=[PureReference];
		@Override public ParserRule getRule() { return rule; }
		
		//{ApplyF} 'applyF' functionType=PureFunctionType value=[PureReference]
		public Group getGroup() { return cGroup; }
		
		//{ApplyF}
		public Action getApplyFAction_0() { return cApplyFAction_0; }
		
		//'applyF'
		public Keyword getApplyFKeyword_1() { return cApplyFKeyword_1; }
		
		//functionType=PureFunctionType
		public Assignment getFunctionTypeAssignment_2() { return cFunctionTypeAssignment_2; }
		
		//PureFunctionType
		public RuleCall getFunctionTypePureFunctionTypeParserRuleCall_2_0() { return cFunctionTypePureFunctionTypeParserRuleCall_2_0; }
		
		//value=[PureReference]
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//[PureReference]
		public CrossReference getValuePureReferenceCrossReference_3_0() { return cValuePureReferenceCrossReference_3_0; }
		
		//ID
		public RuleCall getValuePureReferenceIDTerminalRuleCall_3_0_1() { return cValuePureReferenceIDTerminalRuleCall_3_0_1; }
	}
	public class PrimitiveEffectFullFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.PrimitiveEffectFullFunction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimitivePrintParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPrimitiveRandomParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cApplyFIOParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//PrimitiveEffectFullFunction:
		//	PrimitivePrint | PrimitiveRandom | ApplyFIO;
		@Override public ParserRule getRule() { return rule; }
		
		//PrimitivePrint | PrimitiveRandom | ApplyFIO
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PrimitivePrint
		public RuleCall getPrimitivePrintParserRuleCall_0() { return cPrimitivePrintParserRuleCall_0; }
		
		//PrimitiveRandom
		public RuleCall getPrimitiveRandomParserRuleCall_1() { return cPrimitiveRandomParserRuleCall_1; }
		
		//ApplyFIO
		public RuleCall getApplyFIOParserRuleCall_2() { return cApplyFIOParserRuleCall_2; }
	}
	public class PrimitivePrintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.PrimitivePrint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPrimitivePrintAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPrintKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//PrimitivePrint:
		//	{PrimitivePrint} "print";
		@Override public ParserRule getRule() { return rule; }
		
		//{PrimitivePrint} "print"
		public Group getGroup() { return cGroup; }
		
		//{PrimitivePrint}
		public Action getPrimitivePrintAction_0() { return cPrimitivePrintAction_0; }
		
		//"print"
		public Keyword getPrintKeyword_1() { return cPrintKeyword_1; }
	}
	public class PrimitiveRandomElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.PrimitiveRandom");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPrimitiveRandomAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRandomIntKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//PrimitiveRandom:
		//	{PrimitiveRandom} "randomInt";
		@Override public ParserRule getRule() { return rule; }
		
		//{PrimitiveRandom} "randomInt"
		public Group getGroup() { return cGroup; }
		
		//{PrimitiveRandom}
		public Action getPrimitiveRandomAction_0() { return cPrimitiveRandomAction_0; }
		
		//"randomInt"
		public Keyword getRandomIntKeyword_1() { return cRandomIntKeyword_1; }
	}
	public class ApplyFIOElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.ApplyFIO");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cApplyFIOAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cApplyFIOKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFunctionTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFunctionTypeEffectFullFunctionTypeParserRuleCall_2_0 = (RuleCall)cFunctionTypeAssignment_2.eContents().get(0);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cValueEffectFullReferenceCrossReference_3_0 = (CrossReference)cValueAssignment_3.eContents().get(0);
		private final RuleCall cValueEffectFullReferenceIDTerminalRuleCall_3_0_1 = (RuleCall)cValueEffectFullReferenceCrossReference_3_0.eContents().get(1);
		
		//ApplyFIO:
		//	{ApplyFIO} 'applyFIO' functionType=EffectFullFunctionType value=[EffectFullReference];
		@Override public ParserRule getRule() { return rule; }
		
		//{ApplyFIO} 'applyFIO' functionType=EffectFullFunctionType value=[EffectFullReference]
		public Group getGroup() { return cGroup; }
		
		//{ApplyFIO}
		public Action getApplyFIOAction_0() { return cApplyFIOAction_0; }
		
		//'applyFIO'
		public Keyword getApplyFIOKeyword_1() { return cApplyFIOKeyword_1; }
		
		//functionType=EffectFullFunctionType
		public Assignment getFunctionTypeAssignment_2() { return cFunctionTypeAssignment_2; }
		
		//EffectFullFunctionType
		public RuleCall getFunctionTypeEffectFullFunctionTypeParserRuleCall_2_0() { return cFunctionTypeEffectFullFunctionTypeParserRuleCall_2_0; }
		
		//value=[EffectFullReference]
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//[EffectFullReference]
		public CrossReference getValueEffectFullReferenceCrossReference_3_0() { return cValueEffectFullReferenceCrossReference_3_0; }
		
		//ID
		public RuleCall getValueEffectFullReferenceIDTerminalRuleCall_3_0_1() { return cValueEffectFullReferenceIDTerminalRuleCall_3_0_1; }
	}
	
	
	private final ModelElements pModel;
	private final PureBlockElements pPureBlock;
	private final PureFunctionBlockElements pPureFunctionBlock;
	private final DataBlockElements pDataBlock;
	private final ValueBlockElements pValueBlock;
	private final EffectFullBlockElements pEffectFullBlock;
	private final DataElements pData;
	private final ValueElements pValue;
	private final AdtTypeElements pAdtType;
	private final SumTypeElements pSumType;
	private final ProdTypeElements pProdType;
	private final PureFunctionDefinitionElements pPureFunctionDefinition;
	private final EffectFullFunctionDefinitionElements pEffectFullFunctionDefinition;
	private final MainFuncElements pMainFunc;
	private final FunctionElements pFunction;
	private final PureFunctionElements pPureFunction;
	private final EffectFullFunctionElements pEffectFullFunction;
	private final EffectFullReferenceElements pEffectFullReference;
	private final PureReferenceElements pPureReference;
	private final EffectFullArgumentElements pEffectFullArgument;
	private final ArgumentElements pArgument;
	private final FunctionBodyPureElements pFunctionBodyPure;
	private final FunctionBodyEffectFullElements pFunctionBodyEffectFull;
	private final EmptyFunctionBodyElements pEmptyFunctionBody;
	private final CompositionFunctionBodyPureElements pCompositionFunctionBodyPure;
	private final CompositionFunctionBodyPureFactorElements pCompositionFunctionBodyPureFactor;
	private final CompositionFunctionBodyEffectElements pCompositionFunctionBodyEffect;
	private final CompositionFunctionBodyEffectFullFactorElements pCompositionFunctionBodyEffectFullFactor;
	private final IOTypeElements pIOType;
	private final ValueTypeElements pValueType;
	private final TypeElements pType;
	private final IntegerTypeElements pIntegerType;
	private final StringTypeElements pStringType;
	private final UnitTypeElements pUnitType;
	private final DataTypeElements pDataType;
	private final PureFunctionTypeElements pPureFunctionType;
	private final EffectFullFunctionTypeElements pEffectFullFunctionType;
	private final ExpressionElements pExpression;
	private final IntValueElements pIntValue;
	private final StringValueElements pStringValue;
	private final FunctionValueElements pFunctionValue;
	private final DataValueElements pDataValue;
	private final ValueRefElements pValueRef;
	private final PureLambdaElements pPureLambda;
	private final AdtValueElements pAdtValue;
	private final ProdValueElements pProdValue;
	private final SumValueElements pSumValue;
	private final PrimitivePureFunctionElements pPrimitivePureFunction;
	private final IntToStringElements pIntToString;
	private final IntPowElements pIntPow;
	private final PlusElements pPlus;
	private final MinusElements pMinus;
	private final TimesElements pTimes;
	private final ModElements pMod;
	private final ApplyFElements pApplyF;
	private final PrimitiveEffectFullFunctionElements pPrimitiveEffectFullFunction;
	private final PrimitivePrintElements pPrimitivePrint;
	private final PrimitiveRandomElements pPrimitiveRandom;
	private final ApplyFIOElements pApplyFIO;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public FPMLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pPureBlock = new PureBlockElements();
		this.pPureFunctionBlock = new PureFunctionBlockElements();
		this.pDataBlock = new DataBlockElements();
		this.pValueBlock = new ValueBlockElements();
		this.pEffectFullBlock = new EffectFullBlockElements();
		this.pData = new DataElements();
		this.pValue = new ValueElements();
		this.pAdtType = new AdtTypeElements();
		this.pSumType = new SumTypeElements();
		this.pProdType = new ProdTypeElements();
		this.pPureFunctionDefinition = new PureFunctionDefinitionElements();
		this.pEffectFullFunctionDefinition = new EffectFullFunctionDefinitionElements();
		this.pMainFunc = new MainFuncElements();
		this.pFunction = new FunctionElements();
		this.pPureFunction = new PureFunctionElements();
		this.pEffectFullFunction = new EffectFullFunctionElements();
		this.pEffectFullReference = new EffectFullReferenceElements();
		this.pPureReference = new PureReferenceElements();
		this.pEffectFullArgument = new EffectFullArgumentElements();
		this.pArgument = new ArgumentElements();
		this.pFunctionBodyPure = new FunctionBodyPureElements();
		this.pFunctionBodyEffectFull = new FunctionBodyEffectFullElements();
		this.pEmptyFunctionBody = new EmptyFunctionBodyElements();
		this.pCompositionFunctionBodyPure = new CompositionFunctionBodyPureElements();
		this.pCompositionFunctionBodyPureFactor = new CompositionFunctionBodyPureFactorElements();
		this.pCompositionFunctionBodyEffect = new CompositionFunctionBodyEffectElements();
		this.pCompositionFunctionBodyEffectFullFactor = new CompositionFunctionBodyEffectFullFactorElements();
		this.pIOType = new IOTypeElements();
		this.pValueType = new ValueTypeElements();
		this.pType = new TypeElements();
		this.pIntegerType = new IntegerTypeElements();
		this.pStringType = new StringTypeElements();
		this.pUnitType = new UnitTypeElements();
		this.pDataType = new DataTypeElements();
		this.pPureFunctionType = new PureFunctionTypeElements();
		this.pEffectFullFunctionType = new EffectFullFunctionTypeElements();
		this.pExpression = new ExpressionElements();
		this.pIntValue = new IntValueElements();
		this.pStringValue = new StringValueElements();
		this.pFunctionValue = new FunctionValueElements();
		this.pDataValue = new DataValueElements();
		this.pValueRef = new ValueRefElements();
		this.pPureLambda = new PureLambdaElements();
		this.pAdtValue = new AdtValueElements();
		this.pProdValue = new ProdValueElements();
		this.pSumValue = new SumValueElements();
		this.pPrimitivePureFunction = new PrimitivePureFunctionElements();
		this.pIntToString = new IntToStringElements();
		this.pIntPow = new IntPowElements();
		this.pPlus = new PlusElements();
		this.pMinus = new MinusElements();
		this.pTimes = new TimesElements();
		this.pMod = new ModElements();
		this.pApplyF = new ApplyFElements();
		this.pPrimitiveEffectFullFunction = new PrimitiveEffectFullFunctionElements();
		this.pPrimitivePrint = new PrimitivePrintElements();
		this.pPrimitiveRandom = new PrimitiveRandomElements();
		this.pApplyFIO = new ApplyFIOElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("it.unibo.FPML".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	/////////////////////////////////////////////////////////////////
	//// Entry element
	////////////////////////////////////////////////////////////////
	//Model:
	//	elements+=PureBlock
	//	elements+=EffectFullBlock;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	////////////////////////////////////////////////////////////////
	//// Outer Blocks
	////////////////////////////////////////////////////////////////
	//PureBlock:
	//	'Pure' '{'
	//	elements+=DataBlock
	//	elements+=PureFunctionBlock
	//	'}';
	public PureBlockElements getPureBlockAccess() {
		return pPureBlock;
	}
	
	public ParserRule getPureBlockRule() {
		return getPureBlockAccess().getRule();
	}
	
	//PureFunctionBlock:
	//	'Functions' '{'
	//	features+=PureFunctionDefinition*
	//	'}';
	public PureFunctionBlockElements getPureFunctionBlockAccess() {
		return pPureFunctionBlock;
	}
	
	public ParserRule getPureFunctionBlockRule() {
		return getPureFunctionBlockAccess().getRule();
	}
	
	//DataBlock:
	//	'Data' '{'
	//	elements+=Data*
	//	value=ValueBlock
	//	'}';
	public DataBlockElements getDataBlockAccess() {
		return pDataBlock;
	}
	
	public ParserRule getDataBlockRule() {
		return getDataBlockAccess().getRule();
	}
	
	//ValueBlock:
	//	'Value' '{'
	//	elements+=Value*
	//	'}';
	public ValueBlockElements getValueBlockAccess() {
		return pValueBlock;
	}
	
	public ParserRule getValueBlockRule() {
		return getValueBlockAccess().getRule();
	}
	
	//EffectFullBlock:
	//	'Effects' '{'
	//	features+=EffectFullFunctionDefinition*
	//	main=MainFunc
	//	'}';
	public EffectFullBlockElements getEffectFullBlockAccess() {
		return pEffectFullBlock;
	}
	
	public ParserRule getEffectFullBlockRule() {
		return getEffectFullBlockAccess().getRule();
	}
	
	///////////////////////////////////////////////////////////////////
	//// Outer Block Elements
	///////////////////////////////////////////////////////////////////
	//Data:
	//	name=ID ':' content=AdtType;
	public DataElements getDataAccess() {
		return pData;
	}
	
	public ParserRule getDataRule() {
		return getDataAccess().getRule();
	}
	
	//Value PureFunctionDefinition:
	//	{Value} name=ID ':' value=Expression
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}
	
	//AdtType:
	//	ValueType
	//	| '[' adtElement1=AdtType adtElement2=(SumType | ProdType) ']';
	public AdtTypeElements getAdtTypeAccess() {
		return pAdtType;
	}
	
	public ParserRule getAdtTypeRule() {
		return getAdtTypeAccess().getRule();
	}
	
	//SumType:
	//	'+' adtElement=AdtType;
	public SumTypeElements getSumTypeAccess() {
		return pSumType;
	}
	
	public ParserRule getSumTypeRule() {
		return getSumTypeAccess().getRule();
	}
	
	//ProdType:
	//	'*' adtElement=AdtType;
	public ProdTypeElements getProdTypeAccess() {
		return pProdType;
	}
	
	public ParserRule getProdTypeRule() {
		return getProdTypeAccess().getRule();
	}
	
	//PureFunctionDefinition:
	//	'def' returnType=ValueType name=ID '(' arg=Argument (',' arg2=Argument)? ')' ':' '{' functionBody=FunctionBodyPure
	//	'}';
	public PureFunctionDefinitionElements getPureFunctionDefinitionAccess() {
		return pPureFunctionDefinition;
	}
	
	public ParserRule getPureFunctionDefinitionRule() {
		return getPureFunctionDefinitionAccess().getRule();
	}
	
	//EffectFullFunctionDefinition:
	//	'def' returnType=IOType name=ID '(' arg=EffectFullArgument (',' arg2=EffectFullArgument)? ')' ':' '{'
	//	functionBody=FunctionBodyEffectFull '}';
	public EffectFullFunctionDefinitionElements getEffectFullFunctionDefinitionAccess() {
		return pEffectFullFunctionDefinition;
	}
	
	public ParserRule getEffectFullFunctionDefinitionRule() {
		return getEffectFullFunctionDefinitionAccess().getRule();
	}
	
	//MainFunc:
	//	'IO' returnType=UnitType 'main' ':' '{' functionBody=FunctionBodyEffectFull '}';
	public MainFuncElements getMainFuncAccess() {
		return pMainFunc;
	}
	
	public ParserRule getMainFuncRule() {
		return getMainFuncAccess().getRule();
	}
	
	//Function:
	//	EffectFullFunction | PureFunction;
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}
	
	//PureFunction:
	//	PureFunctionDefinition | PrimitivePureFunction;
	public PureFunctionElements getPureFunctionAccess() {
		return pPureFunction;
	}
	
	public ParserRule getPureFunctionRule() {
		return getPureFunctionAccess().getRule();
	}
	
	//EffectFullFunction:
	//	EffectFullFunctionDefinition | PrimitiveEffectFullFunction;
	public EffectFullFunctionElements getEffectFullFunctionAccess() {
		return pEffectFullFunction;
	}
	
	public ParserRule getEffectFullFunctionRule() {
		return getEffectFullFunctionAccess().getRule();
	}
	
	/////////////////////////////////////////////////////////////////////
	//// Function Body Elements
	/////////////////////////////////////////////////////////////////////
	//EffectFullReference:
	//	Function | EffectFullArgument;
	public EffectFullReferenceElements getEffectFullReferenceAccess() {
		return pEffectFullReference;
	}
	
	public ParserRule getEffectFullReferenceRule() {
		return getEffectFullReferenceAccess().getRule();
	}
	
	//PureReference:
	//	PureFunctionDefinition | Argument;
	public PureReferenceElements getPureReferenceAccess() {
		return pPureReference;
	}
	
	public ParserRule getPureReferenceRule() {
		return getPureReferenceAccess().getRule();
	}
	
	//EffectFullArgument:
	//	type=Type name=ID;
	public EffectFullArgumentElements getEffectFullArgumentAccess() {
		return pEffectFullArgument;
	}
	
	public ParserRule getEffectFullArgumentRule() {
		return getEffectFullArgumentAccess().getRule();
	}
	
	//Argument:
	//	type=ValueType name=ID;
	public ArgumentElements getArgumentAccess() {
		return pArgument;
	}
	
	public ParserRule getArgumentRule() {
		return getArgumentAccess().getRule();
	}
	
	//FunctionBodyPure:
	//	EmptyFunctionBody | CompositionFunctionBodyPure;
	public FunctionBodyPureElements getFunctionBodyPureAccess() {
		return pFunctionBodyPure;
	}
	
	public ParserRule getFunctionBodyPureRule() {
		return getFunctionBodyPureAccess().getRule();
	}
	
	//FunctionBodyEffectFull:
	//	EmptyFunctionBody | CompositionFunctionBodyEffect;
	public FunctionBodyEffectFullElements getFunctionBodyEffectFullAccess() {
		return pFunctionBodyEffectFull;
	}
	
	public ParserRule getFunctionBodyEffectFullRule() {
		return getFunctionBodyEffectFullAccess().getRule();
	}
	
	//EmptyFunctionBody:
	//	{EmptyFunctionBody} 'Undefined';
	public EmptyFunctionBodyElements getEmptyFunctionBodyAccess() {
		return pEmptyFunctionBody;
	}
	
	public ParserRule getEmptyFunctionBodyRule() {
		return getEmptyFunctionBodyAccess().getRule();
	}
	
	//CompositionFunctionBodyPure:
	//	referenceElement=[PureFunctionDefinition] functionChain+=CompositionFunctionBodyPureFactor+
	//	| primitiveElement=PrimitivePureFunction functionChain+=CompositionFunctionBodyPureFactor+;
	public CompositionFunctionBodyPureElements getCompositionFunctionBodyPureAccess() {
		return pCompositionFunctionBodyPure;
	}
	
	public ParserRule getCompositionFunctionBodyPureRule() {
		return getCompositionFunctionBodyPureAccess().getRule();
	}
	
	//CompositionFunctionBodyPureFactor:
	//	'|>' referenceElement=[PureFunctionDefinition] | '|>' PrimitiveElement=PrimitivePureFunction;
	public CompositionFunctionBodyPureFactorElements getCompositionFunctionBodyPureFactorAccess() {
		return pCompositionFunctionBodyPureFactor;
	}
	
	public ParserRule getCompositionFunctionBodyPureFactorRule() {
		return getCompositionFunctionBodyPureFactorAccess().getRule();
	}
	
	//CompositionFunctionBodyEffect:
	//	referenceElement=[EffectFullReference] functionChain+=CompositionFunctionBodyEffectFullFactor+
	//	| primitiveElement=(PrimitiveEffectFullFunction | PrimitivePureFunction)
	//	functionChain+=CompositionFunctionBodyEffectFullFactor+;
	public CompositionFunctionBodyEffectElements getCompositionFunctionBodyEffectAccess() {
		return pCompositionFunctionBodyEffect;
	}
	
	public ParserRule getCompositionFunctionBodyEffectRule() {
		return getCompositionFunctionBodyEffectAccess().getRule();
	}
	
	//CompositionFunctionBodyEffectFullFactor:
	//	'>>=' referenceElement=[EffectFullReference] | '>>=' PrimitiveElement=(PrimitiveEffectFullFunction |
	//	PrimitivePureFunction);
	public CompositionFunctionBodyEffectFullFactorElements getCompositionFunctionBodyEffectFullFactorAccess() {
		return pCompositionFunctionBodyEffectFullFactor;
	}
	
	public ParserRule getCompositionFunctionBodyEffectFullFactorRule() {
		return getCompositionFunctionBodyEffectFullFactorAccess().getRule();
	}
	
	////////////////////////////////////////////////////////////////////////
	//// Types
	////////////////////////////////////////////////////////////////////////
	//IOType:
	//	'IO' type=Type;
	public IOTypeElements getIOTypeAccess() {
		return pIOType;
	}
	
	public ParserRule getIOTypeRule() {
		return getIOTypeAccess().getRule();
	}
	
	//ValueType:
	//	IntegerType | StringType | DataType | PureFunctionType;
	public ValueTypeElements getValueTypeAccess() {
		return pValueType;
	}
	
	public ParserRule getValueTypeRule() {
		return getValueTypeAccess().getRule();
	}
	
	//Type:
	//	ValueType | UnitType | EffectFullFunctionType;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//IntegerType:
	//	{IntegerType} type="int";
	public IntegerTypeElements getIntegerTypeAccess() {
		return pIntegerType;
	}
	
	public ParserRule getIntegerTypeRule() {
		return getIntegerTypeAccess().getRule();
	}
	
	//StringType:
	//	{StringType} type="String";
	public StringTypeElements getStringTypeAccess() {
		return pStringType;
	}
	
	public ParserRule getStringTypeRule() {
		return getStringTypeAccess().getRule();
	}
	
	//UnitType:
	//	{UnitType} type="Unit";
	public UnitTypeElements getUnitTypeAccess() {
		return pUnitType;
	}
	
	public ParserRule getUnitTypeRule() {
		return getUnitTypeAccess().getRule();
	}
	
	//DataType:
	//	{DataType} 'ref' type=[Data];
	public DataTypeElements getDataTypeAccess() {
		return pDataType;
	}
	
	public ParserRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}
	
	//PureFunctionType:
	//	{PureFunctionType} 'F' '<' argType=ValueType ',' returnType=ValueType '>';
	public PureFunctionTypeElements getPureFunctionTypeAccess() {
		return pPureFunctionType;
	}
	
	public ParserRule getPureFunctionTypeRule() {
		return getPureFunctionTypeAccess().getRule();
	}
	
	//EffectFullFunctionType:
	//	{EffectFullFunctionType} 'FIO' '<' argType=IOType ',' returnType=IOType '>';
	public EffectFullFunctionTypeElements getEffectFullFunctionTypeAccess() {
		return pEffectFullFunctionType;
	}
	
	public ParserRule getEffectFullFunctionTypeRule() {
		return getEffectFullFunctionTypeAccess().getRule();
	}
	
	//////////////////////////////////////////////////////////////////////
	//// Values
	//////////////////////////////////////////////////////////////////////
	//Expression:
	//	IntValue | StringValue | DataValue | FunctionValue;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//IntValue IntegerType:
	//	{IntegerType} value=INT
	public IntValueElements getIntValueAccess() {
		return pIntValue;
	}
	
	public ParserRule getIntValueRule() {
		return getIntValueAccess().getRule();
	}
	
	//StringValue StringType:
	//	{StringType} value=STRING
	public StringValueElements getStringValueAccess() {
		return pStringValue;
	}
	
	public ParserRule getStringValueRule() {
		return getStringValueAccess().getRule();
	}
	
	//FunctionValue PureFunctionType:
	//	value=PureLambda
	public FunctionValueElements getFunctionValueAccess() {
		return pFunctionValue;
	}
	
	public ParserRule getFunctionValueRule() {
		return getFunctionValueAccess().getRule();
	}
	
	//DataValue DataType:
	//	{DataValue} type=[Data] '(' value=AdtValue ')'
	public DataValueElements getDataValueAccess() {
		return pDataValue;
	}
	
	public ParserRule getDataValueRule() {
		return getDataValueAccess().getRule();
	}
	
	//ValueRef:
	//	{ValueRef} value=[Value];
	public ValueRefElements getValueRefAccess() {
		return pValueRef;
	}
	
	public ParserRule getValueRefRule() {
		return getValueRefAccess().getRule();
	}
	
	//PureLambda PureFunctionDefinition:
	//	{PureLambda} '(' arg=Argument ')' ':' functionBody=FunctionBodyPure
	public PureLambdaElements getPureLambdaAccess() {
		return pPureLambda;
	}
	
	public ParserRule getPureLambdaRule() {
		return getPureLambdaAccess().getRule();
	}
	
	//AdtValue:
	//	IntValue
	//	| StringValue
	//	| ValueRef
	//	| DataValue
	//	| SumValue
	//	| FunctionValue
	//	| ProdValue;
	public AdtValueElements getAdtValueAccess() {
		return pAdtValue;
	}
	
	public ParserRule getAdtValueRule() {
		return getAdtValueAccess().getRule();
	}
	
	//ProdValue:
	//	'(' prodAdtElement1=AdtValue ',' prodAdtElement2=AdtValue ')';
	public ProdValueElements getProdValueAccess() {
		return pProdValue;
	}
	
	public ParserRule getProdValueRule() {
		return getProdValueAccess().getRule();
	}
	
	//SumValue:
	//	'Left' '(' sumAdtElement1=AdtValue ')'
	//	| 'Right' '(' sumAdtElement2=AdtValue ')';
	public SumValueElements getSumValueAccess() {
		return pSumValue;
	}
	
	public ParserRule getSumValueRule() {
		return getSumValueAccess().getRule();
	}
	
	///////////////////////////////////////////////////////////////////////
	//// Primitives
	///////////////////////////////////////////////////////////////////////
	//PrimitivePureFunction:
	//	IntToString | IntPow | Plus | Minus | Times | Mod | ApplyF;
	public PrimitivePureFunctionElements getPrimitivePureFunctionAccess() {
		return pPrimitivePureFunction;
	}
	
	public ParserRule getPrimitivePureFunctionRule() {
		return getPrimitivePureFunctionAccess().getRule();
	}
	
	//IntToString:
	//	{IntToString} 'IntToString';
	public IntToStringElements getIntToStringAccess() {
		return pIntToString;
	}
	
	public ParserRule getIntToStringRule() {
		return getIntToStringAccess().getRule();
	}
	
	//IntPow:
	//	{IntPow} 'IntPow';
	public IntPowElements getIntPowAccess() {
		return pIntPow;
	}
	
	public ParserRule getIntPowRule() {
		return getIntPowAccess().getRule();
	}
	
	//Plus:
	//	{Plus} '+';
	public PlusElements getPlusAccess() {
		return pPlus;
	}
	
	public ParserRule getPlusRule() {
		return getPlusAccess().getRule();
	}
	
	//Minus:
	//	{Minus} '-';
	public MinusElements getMinusAccess() {
		return pMinus;
	}
	
	public ParserRule getMinusRule() {
		return getMinusAccess().getRule();
	}
	
	//Times:
	//	{Times} '*';
	public TimesElements getTimesAccess() {
		return pTimes;
	}
	
	public ParserRule getTimesRule() {
		return getTimesAccess().getRule();
	}
	
	//Mod:
	//	{Mod} 'mod';
	public ModElements getModAccess() {
		return pMod;
	}
	
	public ParserRule getModRule() {
		return getModAccess().getRule();
	}
	
	//ApplyF:
	//	{ApplyF} 'applyF' functionType=PureFunctionType value=[PureReference];
	public ApplyFElements getApplyFAccess() {
		return pApplyF;
	}
	
	public ParserRule getApplyFRule() {
		return getApplyFAccess().getRule();
	}
	
	//PrimitiveEffectFullFunction:
	//	PrimitivePrint | PrimitiveRandom | ApplyFIO;
	public PrimitiveEffectFullFunctionElements getPrimitiveEffectFullFunctionAccess() {
		return pPrimitiveEffectFullFunction;
	}
	
	public ParserRule getPrimitiveEffectFullFunctionRule() {
		return getPrimitiveEffectFullFunctionAccess().getRule();
	}
	
	//PrimitivePrint:
	//	{PrimitivePrint} "print";
	public PrimitivePrintElements getPrimitivePrintAccess() {
		return pPrimitivePrint;
	}
	
	public ParserRule getPrimitivePrintRule() {
		return getPrimitivePrintAccess().getRule();
	}
	
	//PrimitiveRandom:
	//	{PrimitiveRandom} "randomInt";
	public PrimitiveRandomElements getPrimitiveRandomAccess() {
		return pPrimitiveRandom;
	}
	
	public ParserRule getPrimitiveRandomRule() {
		return getPrimitiveRandomAccess().getRule();
	}
	
	//ApplyFIO:
	//	{ApplyFIO} 'applyFIO' functionType=EffectFullFunctionType value=[EffectFullReference];
	public ApplyFIOElements getApplyFIOAccess() {
		return pApplyFIO;
	}
	
	public ParserRule getApplyFIORule() {
		return getApplyFIOAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
