/*
 * generated by Xtext 2.10.0
 */
package it.unibo.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class FPMLGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cElementsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cElementsPureBlockParserRuleCall_0_0 = (RuleCall)cElementsAssignment_0.eContents().get(0);
		private final Assignment cElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementsEffectFullBlockParserRuleCall_1_0 = (RuleCall)cElementsAssignment_1.eContents().get(0);
		
		/////////////////////////////////////////////////////////////////
		//// Entry element
		////////////////////////////////////////////////////////////////
		//Model:
		//	elements+=PureBlock
		//	elements+=EffectFullBlock;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=PureBlock elements+=EffectFullBlock
		public Group getGroup() { return cGroup; }
		
		//elements+=PureBlock
		public Assignment getElementsAssignment_0() { return cElementsAssignment_0; }
		
		//PureBlock
		public RuleCall getElementsPureBlockParserRuleCall_0_0() { return cElementsPureBlockParserRuleCall_0_0; }
		
		//elements+=EffectFullBlock
		public Assignment getElementsAssignment_1() { return cElementsAssignment_1; }
		
		//EffectFullBlock
		public RuleCall getElementsEffectFullBlockParserRuleCall_1_0() { return cElementsEffectFullBlockParserRuleCall_1_0; }
	}
	public class PureBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.PureBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsPureDataBlockParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		private final Assignment cElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementsPureFunctionBlockParserRuleCall_3_0 = (RuleCall)cElementsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////////////////////////////////////////////////////////////////
		//// Outer Blocks
		////////////////////////////////////////////////////////////////
		//PureBlock:
		//	'Pure' '{'
		//	elements+=PureDataBlock
		//	elements+=PureFunctionBlock
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Pure' '{' elements+=PureDataBlock elements+=PureFunctionBlock '}'
		public Group getGroup() { return cGroup; }
		
		//'Pure'
		public Keyword getPureKeyword_0() { return cPureKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//elements+=PureDataBlock
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }
		
		//PureDataBlock
		public RuleCall getElementsPureDataBlockParserRuleCall_2_0() { return cElementsPureDataBlockParserRuleCall_2_0; }
		
		//elements+=PureFunctionBlock
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }
		
		//PureFunctionBlock
		public RuleCall getElementsPureFunctionBlockParserRuleCall_3_0() { return cElementsPureFunctionBlockParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class PureFunctionBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.PureFunctionBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFeaturesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFeaturesPureFunctionDefinitionParserRuleCall_2_0 = (RuleCall)cFeaturesAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//PureFunctionBlock:
		//	'Functions' '{'
		//	features+=PureFunctionDefinition*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Functions' '{' features+=PureFunctionDefinition* '}'
		public Group getGroup() { return cGroup; }
		
		//'Functions'
		public Keyword getFunctionsKeyword_0() { return cFunctionsKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//features+=PureFunctionDefinition*
		public Assignment getFeaturesAssignment_2() { return cFeaturesAssignment_2; }
		
		//PureFunctionDefinition
		public RuleCall getFeaturesPureFunctionDefinitionParserRuleCall_2_0() { return cFeaturesPureFunctionDefinitionParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class PureDataBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.PureDataBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDataKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsPureDataParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValuePureValueBlockParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//PureDataBlock:
		//	'Data' '{'
		//	elements+=PureData*
		//	value=PureValueBlock
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Data' '{' elements+=PureData* value=PureValueBlock '}'
		public Group getGroup() { return cGroup; }
		
		//'Data'
		public Keyword getDataKeyword_0() { return cDataKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//elements+=PureData*
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }
		
		//PureData
		public RuleCall getElementsPureDataParserRuleCall_2_0() { return cElementsPureDataParserRuleCall_2_0; }
		
		//value=PureValueBlock
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//PureValueBlock
		public RuleCall getValuePureValueBlockParserRuleCall_3_0() { return cValuePureValueBlockParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class PureValueBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.PureValueBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cValueKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsPureValueParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//PureValueBlock:
		//	'Value' '{'
		//	elements+=PureValue*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Value' '{' elements+=PureValue* '}'
		public Group getGroup() { return cGroup; }
		
		//'Value'
		public Keyword getValueKeyword_0() { return cValueKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//elements+=PureValue*
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }
		
		//PureValue
		public RuleCall getElementsPureValueParserRuleCall_2_0() { return cElementsPureValueParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class EffectFullBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.EffectFullBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEffectsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsEffectFullDataBlockParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		private final Assignment cElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementsEffectFullFunctionBlockParserRuleCall_3_0 = (RuleCall)cElementsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//EffectFullBlock:
		//	'Effects' '{'
		//	elements+=EffectFullDataBlock
		//	elements+=EffectFullFunctionBlock
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Effects' '{' elements+=EffectFullDataBlock elements+=EffectFullFunctionBlock '}'
		public Group getGroup() { return cGroup; }
		
		//'Effects'
		public Keyword getEffectsKeyword_0() { return cEffectsKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//elements+=EffectFullDataBlock
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }
		
		//EffectFullDataBlock
		public RuleCall getElementsEffectFullDataBlockParserRuleCall_2_0() { return cElementsEffectFullDataBlockParserRuleCall_2_0; }
		
		//elements+=EffectFullFunctionBlock
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }
		
		//EffectFullFunctionBlock
		public RuleCall getElementsEffectFullFunctionBlockParserRuleCall_3_0() { return cElementsEffectFullFunctionBlockParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class EffectFullDataBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.EffectFullDataBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDataKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsEffectFullDataParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueEffectFullValueBlockParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//EffectFullDataBlock:
		//	'Data' '{'
		//	elements+=EffectFullData*
		//	value=EffectFullValueBlock
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Data' '{' elements+=EffectFullData* value=EffectFullValueBlock '}'
		public Group getGroup() { return cGroup; }
		
		//'Data'
		public Keyword getDataKeyword_0() { return cDataKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//elements+=EffectFullData*
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }
		
		//EffectFullData
		public RuleCall getElementsEffectFullDataParserRuleCall_2_0() { return cElementsEffectFullDataParserRuleCall_2_0; }
		
		//value=EffectFullValueBlock
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//EffectFullValueBlock
		public RuleCall getValueEffectFullValueBlockParserRuleCall_3_0() { return cValueEffectFullValueBlockParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class EffectFullValueBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.EffectFullValueBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cValueKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsEffectFullValueParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//EffectFullValueBlock:
		//	'Value' '{'
		//	elements+=EffectFullValue*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Value' '{' elements+=EffectFullValue* '}'
		public Group getGroup() { return cGroup; }
		
		//'Value'
		public Keyword getValueKeyword_0() { return cValueKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//elements+=EffectFullValue*
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }
		
		//EffectFullValue
		public RuleCall getElementsEffectFullValueParserRuleCall_2_0() { return cElementsEffectFullValueParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class EffectFullFunctionBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.EffectFullFunctionBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFeaturesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFeaturesEffectFullFunctionDefinitionParserRuleCall_2_0 = (RuleCall)cFeaturesAssignment_2.eContents().get(0);
		private final Assignment cMainAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMainMainFuncParserRuleCall_3_0 = (RuleCall)cMainAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//EffectFullFunctionBlock:
		//	'Functions' '{'
		//	features+=EffectFullFunctionDefinition*
		//	main=MainFunc
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Functions' '{' features+=EffectFullFunctionDefinition* main=MainFunc '}'
		public Group getGroup() { return cGroup; }
		
		//'Functions'
		public Keyword getFunctionsKeyword_0() { return cFunctionsKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//features+=EffectFullFunctionDefinition*
		public Assignment getFeaturesAssignment_2() { return cFeaturesAssignment_2; }
		
		//EffectFullFunctionDefinition
		public RuleCall getFeaturesEffectFullFunctionDefinitionParserRuleCall_2_0() { return cFeaturesEffectFullFunctionDefinitionParserRuleCall_2_0; }
		
		//main=MainFunc
		public Assignment getMainAssignment_3() { return cMainAssignment_3; }
		
		//MainFunc
		public RuleCall getMainMainFuncParserRuleCall_3_0() { return cMainMainFuncParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class PureDataElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.PureData");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cContentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cContentValueTypeParserRuleCall_2_0 = (RuleCall)cContentAssignment_2.eContents().get(0);
		
		///////////////////////////////////////////////////////////////////
		//// Outer Block Elements
		///////////////////////////////////////////////////////////////////
		//PureData:
		//	name=ID ':' content=ValueType;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' content=ValueType
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//content=ValueType
		public Assignment getContentAssignment_2() { return cContentAssignment_2; }
		
		//ValueType
		public RuleCall getContentValueTypeParserRuleCall_2_0() { return cContentValueTypeParserRuleCall_2_0; }
	}
	public class PureValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.PureValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPureValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueExpressionParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//PureValue PureFunctionDefinition:
		//	{PureValue} name=ID ':' value=Expression
		@Override public ParserRule getRule() { return rule; }
		
		//{PureValue} name=ID ':' value=Expression
		public Group getGroup() { return cGroup; }
		
		//{PureValue}
		public Action getPureValueAction_0() { return cPureValueAction_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//value=Expression
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_3_0() { return cValueExpressionParserRuleCall_3_0; }
	}
	public class EffectFullDataElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.EffectFullData");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cContentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cContentEffectFullTypeParserRuleCall_2_0 = (RuleCall)cContentAssignment_2.eContents().get(0);
		
		//EffectFullData:
		//	name=ID ':' content=EffectFullType;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' content=EffectFullType
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//content=EffectFullType
		public Assignment getContentAssignment_2() { return cContentAssignment_2; }
		
		//EffectFullType
		public RuleCall getContentEffectFullTypeParserRuleCall_2_0() { return cContentEffectFullTypeParserRuleCall_2_0; }
	}
	public class EffectFullValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.EffectFullValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEffectFullValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueEffectFullExpressionParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//EffectFullValue EffectFullFunctionDefinition:
		//	{EffectFullValue} name=ID ':' value=EffectFullExpression
		@Override public ParserRule getRule() { return rule; }
		
		//{EffectFullValue} name=ID ':' value=EffectFullExpression
		public Group getGroup() { return cGroup; }
		
		//{EffectFullValue}
		public Action getEffectFullValueAction_0() { return cEffectFullValueAction_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//value=EffectFullExpression
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//EffectFullExpression
		public RuleCall getValueEffectFullExpressionParserRuleCall_3_0() { return cValueEffectFullExpressionParserRuleCall_3_0; }
	}
	public class PureFunctionDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.PureFunctionDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReturnTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReturnTypeValueTypeParserRuleCall_1_0 = (RuleCall)cReturnTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cArgAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cArgArgumentParserRuleCall_4_0 = (RuleCall)cArgAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cHigherOrderArgAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cHigherOrderArgAdditionalPureArgumentParserRuleCall_5_1_0 = (RuleCall)cHigherOrderArgAssignment_5_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cColonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cLeftCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cFunctionBodyAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cFunctionBodyFunctionBodyPureParserRuleCall_9_0 = (RuleCall)cFunctionBodyAssignment_9.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//PureFunctionDefinition:
		//	'def' returnType=ValueType name=ID '(' arg=Argument (',' higherOrderArg=AdditionalPureArgument)? ')' ':' '{'
		//	functionBody=FunctionBodyPure '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'def' returnType=ValueType name=ID '(' arg=Argument (',' higherOrderArg=AdditionalPureArgument)? ')' ':' '{'
		//functionBody=FunctionBodyPure '}'
		public Group getGroup() { return cGroup; }
		
		//'def'
		public Keyword getDefKeyword_0() { return cDefKeyword_0; }
		
		//returnType=ValueType
		public Assignment getReturnTypeAssignment_1() { return cReturnTypeAssignment_1; }
		
		//ValueType
		public RuleCall getReturnTypeValueTypeParserRuleCall_1_0() { return cReturnTypeValueTypeParserRuleCall_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//arg=Argument
		public Assignment getArgAssignment_4() { return cArgAssignment_4; }
		
		//Argument
		public RuleCall getArgArgumentParserRuleCall_4_0() { return cArgArgumentParserRuleCall_4_0; }
		
		//(',' higherOrderArg=AdditionalPureArgument)?
		public Group getGroup_5() { return cGroup_5; }
		
		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//higherOrderArg=AdditionalPureArgument
		public Assignment getHigherOrderArgAssignment_5_1() { return cHigherOrderArgAssignment_5_1; }
		
		//AdditionalPureArgument
		public RuleCall getHigherOrderArgAdditionalPureArgumentParserRuleCall_5_1_0() { return cHigherOrderArgAdditionalPureArgumentParserRuleCall_5_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
		
		//':'
		public Keyword getColonKeyword_7() { return cColonKeyword_7; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_8() { return cLeftCurlyBracketKeyword_8; }
		
		//functionBody=FunctionBodyPure
		public Assignment getFunctionBodyAssignment_9() { return cFunctionBodyAssignment_9; }
		
		//FunctionBodyPure
		public RuleCall getFunctionBodyFunctionBodyPureParserRuleCall_9_0() { return cFunctionBodyFunctionBodyPureParserRuleCall_9_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}
	public class EffectFullFunctionDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.EffectFullFunctionDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReturnTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReturnTypeIOTypeParserRuleCall_1_0 = (RuleCall)cReturnTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cArgAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cArgEffectFullArgumentParserRuleCall_4_0 = (RuleCall)cArgAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cHigherOrderArgAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cHigherOrderArgAdditionalEffectFullArgumentParserRuleCall_5_1_0 = (RuleCall)cHigherOrderArgAssignment_5_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cColonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cLeftCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cFunctionBodyAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cFunctionBodyFunctionBodyEffectFullParserRuleCall_9_0 = (RuleCall)cFunctionBodyAssignment_9.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//EffectFullFunctionDefinition:
		//	'def' returnType=IOType name=ID '(' arg=EffectFullArgument (',' higherOrderArg=AdditionalEffectFullArgument)? ')' ':'
		//	'{' functionBody=FunctionBodyEffectFull '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'def' returnType=IOType name=ID '(' arg=EffectFullArgument (',' higherOrderArg=AdditionalEffectFullArgument)? ')' ':'
		//'{' functionBody=FunctionBodyEffectFull '}'
		public Group getGroup() { return cGroup; }
		
		//'def'
		public Keyword getDefKeyword_0() { return cDefKeyword_0; }
		
		//returnType=IOType
		public Assignment getReturnTypeAssignment_1() { return cReturnTypeAssignment_1; }
		
		//IOType
		public RuleCall getReturnTypeIOTypeParserRuleCall_1_0() { return cReturnTypeIOTypeParserRuleCall_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//arg=EffectFullArgument
		public Assignment getArgAssignment_4() { return cArgAssignment_4; }
		
		//EffectFullArgument
		public RuleCall getArgEffectFullArgumentParserRuleCall_4_0() { return cArgEffectFullArgumentParserRuleCall_4_0; }
		
		//(',' higherOrderArg=AdditionalEffectFullArgument)?
		public Group getGroup_5() { return cGroup_5; }
		
		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//higherOrderArg=AdditionalEffectFullArgument
		public Assignment getHigherOrderArgAssignment_5_1() { return cHigherOrderArgAssignment_5_1; }
		
		//AdditionalEffectFullArgument
		public RuleCall getHigherOrderArgAdditionalEffectFullArgumentParserRuleCall_5_1_0() { return cHigherOrderArgAdditionalEffectFullArgumentParserRuleCall_5_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
		
		//':'
		public Keyword getColonKeyword_7() { return cColonKeyword_7; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_8() { return cLeftCurlyBracketKeyword_8; }
		
		//functionBody=FunctionBodyEffectFull
		public Assignment getFunctionBodyAssignment_9() { return cFunctionBodyAssignment_9; }
		
		//FunctionBodyEffectFull
		public RuleCall getFunctionBodyFunctionBodyEffectFullParserRuleCall_9_0() { return cFunctionBodyFunctionBodyEffectFullParserRuleCall_9_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}
	public class MainFuncElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.MainFunc");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIOKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReturnTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReturnTypeUnitTypeParserRuleCall_1_0 = (RuleCall)cReturnTypeAssignment_1.eContents().get(0);
		private final Keyword cMainKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cFunctionBodyAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cFunctionBodyFunctionBodyEffectFullParserRuleCall_5_0 = (RuleCall)cFunctionBodyAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//MainFunc:
		//	'IO' returnType=UnitType 'main' ':' '{' functionBody=FunctionBodyEffectFull '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'IO' returnType=UnitType 'main' ':' '{' functionBody=FunctionBodyEffectFull '}'
		public Group getGroup() { return cGroup; }
		
		//'IO'
		public Keyword getIOKeyword_0() { return cIOKeyword_0; }
		
		//returnType=UnitType
		public Assignment getReturnTypeAssignment_1() { return cReturnTypeAssignment_1; }
		
		//UnitType
		public RuleCall getReturnTypeUnitTypeParserRuleCall_1_0() { return cReturnTypeUnitTypeParserRuleCall_1_0; }
		
		//'main'
		public Keyword getMainKeyword_2() { return cMainKeyword_2; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//functionBody=FunctionBodyEffectFull
		public Assignment getFunctionBodyAssignment_5() { return cFunctionBodyAssignment_5; }
		
		//FunctionBodyEffectFull
		public RuleCall getFunctionBodyFunctionBodyEffectFullParserRuleCall_5_0() { return cFunctionBodyFunctionBodyEffectFullParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class AdditionalPureArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.AdditionalPureArgument");
		private final Assignment cArg2Assignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cArg2ArgumentParserRuleCall_0 = (RuleCall)cArg2Assignment.eContents().get(0);
		
		//AdditionalPureArgument:
		//	arg2=Argument;
		@Override public ParserRule getRule() { return rule; }
		
		//arg2=Argument
		public Assignment getArg2Assignment() { return cArg2Assignment; }
		
		//Argument
		public RuleCall getArg2ArgumentParserRuleCall_0() { return cArg2ArgumentParserRuleCall_0; }
	}
	public class AdditionalEffectFullArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.AdditionalEffectFullArgument");
		private final Assignment cArg2Assignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cArg2EffectFullArgumentParserRuleCall_0 = (RuleCall)cArg2Assignment.eContents().get(0);
		
		//AdditionalEffectFullArgument:
		//	arg2=EffectFullArgument;
		@Override public ParserRule getRule() { return rule; }
		
		//arg2=EffectFullArgument
		public Assignment getArg2Assignment() { return cArg2Assignment; }
		
		//EffectFullArgument
		public RuleCall getArg2EffectFullArgumentParserRuleCall_0() { return cArg2EffectFullArgumentParserRuleCall_0; }
	}
	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.Function");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEffectFullFunctionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPureFunctionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		/////////////////////////////////////////////////////////////////////////////////////////////////
		//// Aggregate Types
		/////////////////////////////////////////////////////////////////////////////////////////////////
		//Function:
		//	EffectFullFunction | PureFunction;
		@Override public ParserRule getRule() { return rule; }
		
		//EffectFullFunction | PureFunction
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EffectFullFunction
		public RuleCall getEffectFullFunctionParserRuleCall_0() { return cEffectFullFunctionParserRuleCall_0; }
		
		//PureFunction
		public RuleCall getPureFunctionParserRuleCall_1() { return cPureFunctionParserRuleCall_1; }
	}
	public class PureFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.PureFunction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPureFunctionDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPrimitivePureFunctionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PureFunction:
		//	PureFunctionDefinition | PrimitivePureFunction;
		@Override public ParserRule getRule() { return rule; }
		
		//PureFunctionDefinition | PrimitivePureFunction
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PureFunctionDefinition
		public RuleCall getPureFunctionDefinitionParserRuleCall_0() { return cPureFunctionDefinitionParserRuleCall_0; }
		
		//PrimitivePureFunction
		public RuleCall getPrimitivePureFunctionParserRuleCall_1() { return cPrimitivePureFunctionParserRuleCall_1; }
	}
	public class EffectFullFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.EffectFullFunction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEffectFullFunctionDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPrimitiveEffectFullFunctionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EffectFullFunction:
		//	EffectFullFunctionDefinition | PrimitiveEffectFullFunction;
		@Override public ParserRule getRule() { return rule; }
		
		//EffectFullFunctionDefinition | PrimitiveEffectFullFunction
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EffectFullFunctionDefinition
		public RuleCall getEffectFullFunctionDefinitionParserRuleCall_0() { return cEffectFullFunctionDefinitionParserRuleCall_0; }
		
		//PrimitiveEffectFullFunction
		public RuleCall getPrimitiveEffectFullFunctionParserRuleCall_1() { return cPrimitiveEffectFullFunctionParserRuleCall_1; }
	}
	public class EffectFullReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.EffectFullReference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEffectFullValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEffectFullArgumentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPureValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPrimitiveEffectFullValueParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cPrimitiveFunctionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cFunctionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		/// *
		// *  Tricky aggregate: is used in reference [] but has addictional components in order to 
		// * 	facilitate the validation, those components suck as PrimitiveEffectFullValue or PrimitiveFunction
		// * 	cannot be referenced because of no ids, but where the effectfullReference is used them are also allowed(not as reference).
		// * / EffectFullReference:
		//	EffectFullValue | EffectFullArgument | PureValue | PrimitiveEffectFullValue | PrimitiveFunction | Function;
		@Override public ParserRule getRule() { return rule; }
		
		//EffectFullValue | EffectFullArgument | PureValue | PrimitiveEffectFullValue | PrimitiveFunction | Function
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EffectFullValue
		public RuleCall getEffectFullValueParserRuleCall_0() { return cEffectFullValueParserRuleCall_0; }
		
		//EffectFullArgument
		public RuleCall getEffectFullArgumentParserRuleCall_1() { return cEffectFullArgumentParserRuleCall_1; }
		
		//PureValue
		public RuleCall getPureValueParserRuleCall_2() { return cPureValueParserRuleCall_2; }
		
		//PrimitiveEffectFullValue
		public RuleCall getPrimitiveEffectFullValueParserRuleCall_3() { return cPrimitiveEffectFullValueParserRuleCall_3; }
		
		//PrimitiveFunction
		public RuleCall getPrimitiveFunctionParserRuleCall_4() { return cPrimitiveFunctionParserRuleCall_4; }
		
		//Function
		public RuleCall getFunctionParserRuleCall_5() { return cFunctionParserRuleCall_5; }
	}
	public class PureReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.PureReference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPureValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cArgumentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PureReference:
		//	PureValue | Argument;
		@Override public ParserRule getRule() { return rule; }
		
		//PureValue | Argument
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PureValue
		public RuleCall getPureValueParserRuleCall_0() { return cPureValueParserRuleCall_0; }
		
		//Argument
		public RuleCall getArgumentParserRuleCall_1() { return cArgumentParserRuleCall_1; }
	}
	public class PrimitiveFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.PrimitiveFunction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimitiveEffectFullFunctionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPrimitivePureFunctionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPrimitiveEffectFullValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//PrimitiveFunction:
		//	PrimitiveEffectFullFunction | PrimitivePureFunction | PrimitiveEffectFullValue;
		@Override public ParserRule getRule() { return rule; }
		
		//PrimitiveEffectFullFunction | PrimitivePureFunction | PrimitiveEffectFullValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PrimitiveEffectFullFunction
		public RuleCall getPrimitiveEffectFullFunctionParserRuleCall_0() { return cPrimitiveEffectFullFunctionParserRuleCall_0; }
		
		//PrimitivePureFunction
		public RuleCall getPrimitivePureFunctionParserRuleCall_1() { return cPrimitivePureFunctionParserRuleCall_1; }
		
		//PrimitiveEffectFullValue
		public RuleCall getPrimitiveEffectFullValueParserRuleCall_2() { return cPrimitiveEffectFullValueParserRuleCall_2; }
	}
	public class EffectFullArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.EffectFullArgument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		/////////////////////////////////////////////////////////////////////
		//// Function Body Elements
		/////////////////////////////////////////////////////////////////////
		//EffectFullArgument:
		//	type=Type name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//type=Type name=ID
		public Group getGroup() { return cGroup; }
		
		//type=Type
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_0_0() { return cTypeTypeParserRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class ArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.Argument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeValueTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Argument:
		//	type=ValueType name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//type=ValueType name=ID
		public Group getGroup() { return cGroup; }
		
		//type=ValueType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//ValueType
		public RuleCall getTypeValueTypeParserRuleCall_0_0() { return cTypeValueTypeParserRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class FunctionBodyPureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.FunctionBodyPure");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEmptyFunctionBodyParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCompositionFunctionBodyPureParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//FunctionBodyPure:
		//	EmptyFunctionBody | CompositionFunctionBodyPure;
		@Override public ParserRule getRule() { return rule; }
		
		//EmptyFunctionBody | CompositionFunctionBodyPure
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EmptyFunctionBody
		public RuleCall getEmptyFunctionBodyParserRuleCall_0() { return cEmptyFunctionBodyParserRuleCall_0; }
		
		//CompositionFunctionBodyPure
		public RuleCall getCompositionFunctionBodyPureParserRuleCall_1() { return cCompositionFunctionBodyPureParserRuleCall_1; }
	}
	public class FunctionBodyEffectFullElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.FunctionBodyEffectFull");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEmptyFunctionBodyParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCompositionFunctionBodyEffectParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//FunctionBodyEffectFull:
		//	EmptyFunctionBody | CompositionFunctionBodyEffect;
		@Override public ParserRule getRule() { return rule; }
		
		//EmptyFunctionBody | CompositionFunctionBodyEffect
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EmptyFunctionBody
		public RuleCall getEmptyFunctionBodyParserRuleCall_0() { return cEmptyFunctionBodyParserRuleCall_0; }
		
		//CompositionFunctionBodyEffect
		public RuleCall getCompositionFunctionBodyEffectParserRuleCall_1() { return cCompositionFunctionBodyEffectParserRuleCall_1; }
	}
	public class EmptyFunctionBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.EmptyFunctionBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEmptyFunctionBodyAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cUndefinedKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//EmptyFunctionBody:
		//	{EmptyFunctionBody} 'Undefined';
		@Override public ParserRule getRule() { return rule; }
		
		//{EmptyFunctionBody} 'Undefined'
		public Group getGroup() { return cGroup; }
		
		//{EmptyFunctionBody}
		public Action getEmptyFunctionBodyAction_0() { return cEmptyFunctionBodyAction_0; }
		
		//'Undefined'
		public Keyword getUndefinedKeyword_1() { return cUndefinedKeyword_1; }
	}
	public class CompositionFunctionBodyPureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.CompositionFunctionBodyPure");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cReferenceElementAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final CrossReference cReferenceElementPureFunctionDefinitionCrossReference_0_0_0 = (CrossReference)cReferenceElementAssignment_0_0.eContents().get(0);
		private final RuleCall cReferenceElementPureFunctionDefinitionIDTerminalRuleCall_0_0_0_1 = (RuleCall)cReferenceElementPureFunctionDefinitionCrossReference_0_0_0.eContents().get(1);
		private final Assignment cFunctionChainAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cFunctionChainCompositionFunctionBodyPureFactorParserRuleCall_0_1_0 = (RuleCall)cFunctionChainAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cPrimitiveElementAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cPrimitiveElementPrimitivePureFunctionParserRuleCall_1_0_0 = (RuleCall)cPrimitiveElementAssignment_1_0.eContents().get(0);
		private final Assignment cFunctionChainAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFunctionChainCompositionFunctionBodyPureFactorParserRuleCall_1_1_0 = (RuleCall)cFunctionChainAssignment_1_1.eContents().get(0);
		
		//CompositionFunctionBodyPure:
		//	referenceElement=[PureFunctionDefinition] functionChain+=CompositionFunctionBodyPureFactor+
		//	| primitiveElement=PrimitivePureFunction functionChain+=CompositionFunctionBodyPureFactor+;
		@Override public ParserRule getRule() { return rule; }
		
		//referenceElement=[PureFunctionDefinition] functionChain+=CompositionFunctionBodyPureFactor+ |
		//primitiveElement=PrimitivePureFunction functionChain+=CompositionFunctionBodyPureFactor+
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//referenceElement=[PureFunctionDefinition] functionChain+=CompositionFunctionBodyPureFactor+
		public Group getGroup_0() { return cGroup_0; }
		
		//referenceElement=[PureFunctionDefinition]
		public Assignment getReferenceElementAssignment_0_0() { return cReferenceElementAssignment_0_0; }
		
		//[PureFunctionDefinition]
		public CrossReference getReferenceElementPureFunctionDefinitionCrossReference_0_0_0() { return cReferenceElementPureFunctionDefinitionCrossReference_0_0_0; }
		
		//ID
		public RuleCall getReferenceElementPureFunctionDefinitionIDTerminalRuleCall_0_0_0_1() { return cReferenceElementPureFunctionDefinitionIDTerminalRuleCall_0_0_0_1; }
		
		//functionChain+=CompositionFunctionBodyPureFactor+
		public Assignment getFunctionChainAssignment_0_1() { return cFunctionChainAssignment_0_1; }
		
		//CompositionFunctionBodyPureFactor
		public RuleCall getFunctionChainCompositionFunctionBodyPureFactorParserRuleCall_0_1_0() { return cFunctionChainCompositionFunctionBodyPureFactorParserRuleCall_0_1_0; }
		
		//primitiveElement=PrimitivePureFunction functionChain+=CompositionFunctionBodyPureFactor+
		public Group getGroup_1() { return cGroup_1; }
		
		//primitiveElement=PrimitivePureFunction
		public Assignment getPrimitiveElementAssignment_1_0() { return cPrimitiveElementAssignment_1_0; }
		
		//PrimitivePureFunction
		public RuleCall getPrimitiveElementPrimitivePureFunctionParserRuleCall_1_0_0() { return cPrimitiveElementPrimitivePureFunctionParserRuleCall_1_0_0; }
		
		//functionChain+=CompositionFunctionBodyPureFactor+
		public Assignment getFunctionChainAssignment_1_1() { return cFunctionChainAssignment_1_1; }
		
		//CompositionFunctionBodyPureFactor
		public RuleCall getFunctionChainCompositionFunctionBodyPureFactorParserRuleCall_1_1_0() { return cFunctionChainCompositionFunctionBodyPureFactorParserRuleCall_1_1_0; }
	}
	public class CompositionFunctionBodyPureFactorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.CompositionFunctionBodyPureFactor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cVerticalLineGreaterThanSignKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cReferenceElementAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cReferenceElementPureFunctionDefinitionCrossReference_0_1_0 = (CrossReference)cReferenceElementAssignment_0_1.eContents().get(0);
		private final RuleCall cReferenceElementPureFunctionDefinitionIDTerminalRuleCall_0_1_0_1 = (RuleCall)cReferenceElementPureFunctionDefinitionCrossReference_0_1_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cVerticalLineGreaterThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cPrimitiveElementAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPrimitiveElementPrimitivePureFunctionParserRuleCall_1_1_0 = (RuleCall)cPrimitiveElementAssignment_1_1.eContents().get(0);
		
		//CompositionFunctionBodyPureFactor:
		//	'|>' referenceElement=[PureFunctionDefinition] | '|>' PrimitiveElement=PrimitivePureFunction;
		@Override public ParserRule getRule() { return rule; }
		
		//'|>' referenceElement=[PureFunctionDefinition] | '|>' PrimitiveElement=PrimitivePureFunction
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'|>' referenceElement=[PureFunctionDefinition]
		public Group getGroup_0() { return cGroup_0; }
		
		//'|>'
		public Keyword getVerticalLineGreaterThanSignKeyword_0_0() { return cVerticalLineGreaterThanSignKeyword_0_0; }
		
		//referenceElement=[PureFunctionDefinition]
		public Assignment getReferenceElementAssignment_0_1() { return cReferenceElementAssignment_0_1; }
		
		//[PureFunctionDefinition]
		public CrossReference getReferenceElementPureFunctionDefinitionCrossReference_0_1_0() { return cReferenceElementPureFunctionDefinitionCrossReference_0_1_0; }
		
		//ID
		public RuleCall getReferenceElementPureFunctionDefinitionIDTerminalRuleCall_0_1_0_1() { return cReferenceElementPureFunctionDefinitionIDTerminalRuleCall_0_1_0_1; }
		
		//'|>' PrimitiveElement=PrimitivePureFunction
		public Group getGroup_1() { return cGroup_1; }
		
		//'|>'
		public Keyword getVerticalLineGreaterThanSignKeyword_1_0() { return cVerticalLineGreaterThanSignKeyword_1_0; }
		
		//PrimitiveElement=PrimitivePureFunction
		public Assignment getPrimitiveElementAssignment_1_1() { return cPrimitiveElementAssignment_1_1; }
		
		//PrimitivePureFunction
		public RuleCall getPrimitiveElementPrimitivePureFunctionParserRuleCall_1_1_0() { return cPrimitiveElementPrimitivePureFunctionParserRuleCall_1_1_0; }
	}
	public class CompositionFunctionBodyEffectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.CompositionFunctionBodyEffect");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cReferenceElementAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final CrossReference cReferenceElementEffectFullReferenceCrossReference_0_0_0 = (CrossReference)cReferenceElementAssignment_0_0.eContents().get(0);
		private final RuleCall cReferenceElementEffectFullReferenceIDTerminalRuleCall_0_0_0_1 = (RuleCall)cReferenceElementEffectFullReferenceCrossReference_0_0_0.eContents().get(1);
		private final Assignment cFunctionChainAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cFunctionChainCompositionFunctionBodyEffectFullFactorParserRuleCall_0_1_0 = (RuleCall)cFunctionChainAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cPrimitiveElementAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cPrimitiveElementPrimitiveFunctionParserRuleCall_1_0_0 = (RuleCall)cPrimitiveElementAssignment_1_0.eContents().get(0);
		private final Assignment cFunctionChainAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFunctionChainCompositionFunctionBodyEffectFullFactorParserRuleCall_1_1_0 = (RuleCall)cFunctionChainAssignment_1_1.eContents().get(0);
		
		//CompositionFunctionBodyEffect:
		//	referenceElement=[EffectFullReference] functionChain+=CompositionFunctionBodyEffectFullFactor+
		//	| primitiveElement=PrimitiveFunction functionChain+=CompositionFunctionBodyEffectFullFactor+;
		@Override public ParserRule getRule() { return rule; }
		
		//referenceElement=[EffectFullReference] functionChain+=CompositionFunctionBodyEffectFullFactor+ |
		//primitiveElement=PrimitiveFunction functionChain+=CompositionFunctionBodyEffectFullFactor+
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//referenceElement=[EffectFullReference] functionChain+=CompositionFunctionBodyEffectFullFactor+
		public Group getGroup_0() { return cGroup_0; }
		
		//referenceElement=[EffectFullReference]
		public Assignment getReferenceElementAssignment_0_0() { return cReferenceElementAssignment_0_0; }
		
		//[EffectFullReference]
		public CrossReference getReferenceElementEffectFullReferenceCrossReference_0_0_0() { return cReferenceElementEffectFullReferenceCrossReference_0_0_0; }
		
		//ID
		public RuleCall getReferenceElementEffectFullReferenceIDTerminalRuleCall_0_0_0_1() { return cReferenceElementEffectFullReferenceIDTerminalRuleCall_0_0_0_1; }
		
		//functionChain+=CompositionFunctionBodyEffectFullFactor+
		public Assignment getFunctionChainAssignment_0_1() { return cFunctionChainAssignment_0_1; }
		
		//CompositionFunctionBodyEffectFullFactor
		public RuleCall getFunctionChainCompositionFunctionBodyEffectFullFactorParserRuleCall_0_1_0() { return cFunctionChainCompositionFunctionBodyEffectFullFactorParserRuleCall_0_1_0; }
		
		//primitiveElement=PrimitiveFunction functionChain+=CompositionFunctionBodyEffectFullFactor+
		public Group getGroup_1() { return cGroup_1; }
		
		//primitiveElement=PrimitiveFunction
		public Assignment getPrimitiveElementAssignment_1_0() { return cPrimitiveElementAssignment_1_0; }
		
		//PrimitiveFunction
		public RuleCall getPrimitiveElementPrimitiveFunctionParserRuleCall_1_0_0() { return cPrimitiveElementPrimitiveFunctionParserRuleCall_1_0_0; }
		
		//functionChain+=CompositionFunctionBodyEffectFullFactor+
		public Assignment getFunctionChainAssignment_1_1() { return cFunctionChainAssignment_1_1; }
		
		//CompositionFunctionBodyEffectFullFactor
		public RuleCall getFunctionChainCompositionFunctionBodyEffectFullFactorParserRuleCall_1_1_0() { return cFunctionChainCompositionFunctionBodyEffectFullFactorParserRuleCall_1_1_0; }
	}
	public class CompositionFunctionBodyEffectFullFactorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.CompositionFunctionBodyEffectFullFactor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cGreaterThanSignGreaterThanSignEqualsSignKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cReferenceElementAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cReferenceElementEffectFullReferenceCrossReference_0_1_0 = (CrossReference)cReferenceElementAssignment_0_1.eContents().get(0);
		private final RuleCall cReferenceElementEffectFullReferenceIDTerminalRuleCall_0_1_0_1 = (RuleCall)cReferenceElementEffectFullReferenceCrossReference_0_1_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cGreaterThanSignGreaterThanSignEqualsSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cPrimitiveElementAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPrimitiveElementPrimitiveFunctionParserRuleCall_1_1_0 = (RuleCall)cPrimitiveElementAssignment_1_1.eContents().get(0);
		
		//CompositionFunctionBodyEffectFullFactor:
		//	'>>=' referenceElement=[EffectFullReference] | '>>=' PrimitiveElement=PrimitiveFunction;
		@Override public ParserRule getRule() { return rule; }
		
		//'>>=' referenceElement=[EffectFullReference] | '>>=' PrimitiveElement=PrimitiveFunction
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'>>=' referenceElement=[EffectFullReference]
		public Group getGroup_0() { return cGroup_0; }
		
		//'>>='
		public Keyword getGreaterThanSignGreaterThanSignEqualsSignKeyword_0_0() { return cGreaterThanSignGreaterThanSignEqualsSignKeyword_0_0; }
		
		//referenceElement=[EffectFullReference]
		public Assignment getReferenceElementAssignment_0_1() { return cReferenceElementAssignment_0_1; }
		
		//[EffectFullReference]
		public CrossReference getReferenceElementEffectFullReferenceCrossReference_0_1_0() { return cReferenceElementEffectFullReferenceCrossReference_0_1_0; }
		
		//ID
		public RuleCall getReferenceElementEffectFullReferenceIDTerminalRuleCall_0_1_0_1() { return cReferenceElementEffectFullReferenceIDTerminalRuleCall_0_1_0_1; }
		
		//'>>=' PrimitiveElement=PrimitiveFunction
		public Group getGroup_1() { return cGroup_1; }
		
		//'>>='
		public Keyword getGreaterThanSignGreaterThanSignEqualsSignKeyword_1_0() { return cGreaterThanSignGreaterThanSignEqualsSignKeyword_1_0; }
		
		//PrimitiveElement=PrimitiveFunction
		public Assignment getPrimitiveElementAssignment_1_1() { return cPrimitiveElementAssignment_1_1; }
		
		//PrimitiveFunction
		public RuleCall getPrimitiveElementPrimitiveFunctionParserRuleCall_1_1_0() { return cPrimitiveElementPrimitiveFunctionParserRuleCall_1_1_0; }
	}
	public class IOTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.IOType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIOKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		
		////////////////////////////////////////////////////////////////////////
		//// Types
		////////////////////////////////////////////////////////////////////////
		//IOType:
		//	'IO' type=Type;
		@Override public ParserRule getRule() { return rule; }
		
		//'IO' type=Type
		public Group getGroup() { return cGroup; }
		
		//'IO'
		public Keyword getIOKeyword_0() { return cIOKeyword_0; }
		
		//type=Type
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_1_0() { return cTypeTypeParserRuleCall_1_0; }
	}
	public class ValueTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.ValueType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntegerTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStringTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDataTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPureFunctionTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cPureAlgebraicTypeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//ValueType:
		//	IntegerType | StringType | DataType | PureFunctionType | PureAlgebraicType;
		@Override public ParserRule getRule() { return rule; }
		
		//IntegerType | StringType | DataType | PureFunctionType | PureAlgebraicType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IntegerType
		public RuleCall getIntegerTypeParserRuleCall_0() { return cIntegerTypeParserRuleCall_0; }
		
		//StringType
		public RuleCall getStringTypeParserRuleCall_1() { return cStringTypeParserRuleCall_1; }
		
		//DataType
		public RuleCall getDataTypeParserRuleCall_2() { return cDataTypeParserRuleCall_2; }
		
		//PureFunctionType
		public RuleCall getPureFunctionTypeParserRuleCall_3() { return cPureFunctionTypeParserRuleCall_3; }
		
		//PureAlgebraicType
		public RuleCall getPureAlgebraicTypeParserRuleCall_4() { return cPureAlgebraicTypeParserRuleCall_4; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cValueTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEffectFullTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Type:
		//	ValueType | EffectFullType;
		@Override public ParserRule getRule() { return rule; }
		
		//ValueType | EffectFullType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ValueType
		public RuleCall getValueTypeParserRuleCall_0() { return cValueTypeParserRuleCall_0; }
		
		//EffectFullType
		public RuleCall getEffectFullTypeParserRuleCall_1() { return cEffectFullTypeParserRuleCall_1; }
	}
	public class EffectFullTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.EffectFullType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUnitTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEffectFullFunctionTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEffectFullDataTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cEffectFullAlgebraicTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cIOTypeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cVoidTypeParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//EffectFullType:
		//	UnitType | EffectFullFunctionType | EffectFullDataType | EffectFullAlgebraicType | IOType | VoidType;
		@Override public ParserRule getRule() { return rule; }
		
		//UnitType | EffectFullFunctionType | EffectFullDataType | EffectFullAlgebraicType | IOType | VoidType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//UnitType
		public RuleCall getUnitTypeParserRuleCall_0() { return cUnitTypeParserRuleCall_0; }
		
		//EffectFullFunctionType
		public RuleCall getEffectFullFunctionTypeParserRuleCall_1() { return cEffectFullFunctionTypeParserRuleCall_1; }
		
		//EffectFullDataType
		public RuleCall getEffectFullDataTypeParserRuleCall_2() { return cEffectFullDataTypeParserRuleCall_2; }
		
		//EffectFullAlgebraicType
		public RuleCall getEffectFullAlgebraicTypeParserRuleCall_3() { return cEffectFullAlgebraicTypeParserRuleCall_3; }
		
		//IOType
		public RuleCall getIOTypeParserRuleCall_4() { return cIOTypeParserRuleCall_4; }
		
		//VoidType
		public RuleCall getVoidTypeParserRuleCall_5() { return cVoidTypeParserRuleCall_5; }
	}
	public class VoidTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.VoidType");
		private final Action cVoidTypeAction = (Action)rule.eContents().get(1);
		
		//VoidType:
		//	{VoidType};
		@Override public ParserRule getRule() { return rule; }
		
		//{VoidType}
		public Action getVoidTypeAction() { return cVoidTypeAction; }
	}
	public class IntegerTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.IntegerType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIntegerTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cTypeIntKeyword_1_0 = (Keyword)cTypeAssignment_1.eContents().get(0);
		
		//IntegerType:
		//	{IntegerType} type="int";
		@Override public ParserRule getRule() { return rule; }
		
		//{IntegerType} type="int"
		public Group getGroup() { return cGroup; }
		
		//{IntegerType}
		public Action getIntegerTypeAction_0() { return cIntegerTypeAction_0; }
		
		//type="int"
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//"int"
		public Keyword getTypeIntKeyword_1_0() { return cTypeIntKeyword_1_0; }
	}
	public class StringTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.StringType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStringTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cTypeStringKeyword_1_0 = (Keyword)cTypeAssignment_1.eContents().get(0);
		
		//StringType:
		//	{StringType} type="String";
		@Override public ParserRule getRule() { return rule; }
		
		//{StringType} type="String"
		public Group getGroup() { return cGroup; }
		
		//{StringType}
		public Action getStringTypeAction_0() { return cStringTypeAction_0; }
		
		//type="String"
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//"String"
		public Keyword getTypeStringKeyword_1_0() { return cTypeStringKeyword_1_0; }
	}
	public class UnitTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.UnitType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUnitTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cTypeUnitKeyword_1_0 = (Keyword)cTypeAssignment_1.eContents().get(0);
		
		//UnitType:
		//	{UnitType} type="Unit";
		@Override public ParserRule getRule() { return rule; }
		
		//{UnitType} type="Unit"
		public Group getGroup() { return cGroup; }
		
		//{UnitType}
		public Action getUnitTypeAction_0() { return cUnitTypeAction_0; }
		
		//type="Unit"
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//"Unit"
		public Keyword getTypeUnitKeyword_1_0() { return cTypeUnitKeyword_1_0; }
	}
	public class DataTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.DataType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDataTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRefKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypePureDataCrossReference_2_0 = (CrossReference)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypePureDataIDTerminalRuleCall_2_0_1 = (RuleCall)cTypePureDataCrossReference_2_0.eContents().get(1);
		
		//DataType:
		//	{DataType} 'ref' type=[PureData];
		@Override public ParserRule getRule() { return rule; }
		
		//{DataType} 'ref' type=[PureData]
		public Group getGroup() { return cGroup; }
		
		//{DataType}
		public Action getDataTypeAction_0() { return cDataTypeAction_0; }
		
		//'ref'
		public Keyword getRefKeyword_1() { return cRefKeyword_1; }
		
		//type=[PureData]
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//[PureData]
		public CrossReference getTypePureDataCrossReference_2_0() { return cTypePureDataCrossReference_2_0; }
		
		//ID
		public RuleCall getTypePureDataIDTerminalRuleCall_2_0_1() { return cTypePureDataIDTerminalRuleCall_2_0_1; }
	}
	public class EffectFullDataTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.EffectFullDataType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEffectFullDataTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRefIOKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypeEffectFullDataCrossReference_2_0 = (CrossReference)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypeEffectFullDataIDTerminalRuleCall_2_0_1 = (RuleCall)cTypeEffectFullDataCrossReference_2_0.eContents().get(1);
		
		//EffectFullDataType:
		//	{EffectFullDataType} 'refIO' type=[EffectFullData];
		@Override public ParserRule getRule() { return rule; }
		
		//{EffectFullDataType} 'refIO' type=[EffectFullData]
		public Group getGroup() { return cGroup; }
		
		//{EffectFullDataType}
		public Action getEffectFullDataTypeAction_0() { return cEffectFullDataTypeAction_0; }
		
		//'refIO'
		public Keyword getRefIOKeyword_1() { return cRefIOKeyword_1; }
		
		//type=[EffectFullData]
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//[EffectFullData]
		public CrossReference getTypeEffectFullDataCrossReference_2_0() { return cTypeEffectFullDataCrossReference_2_0; }
		
		//ID
		public RuleCall getTypeEffectFullDataIDTerminalRuleCall_2_0_1() { return cTypeEffectFullDataIDTerminalRuleCall_2_0_1; }
	}
	public class PureFunctionTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.PureFunctionType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPureFunctionTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLessThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cArgTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cArgTypeValueTypeParserRuleCall_3_0 = (RuleCall)cArgTypeAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cReturnTypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cReturnTypeValueTypeParserRuleCall_5_0 = (RuleCall)cReturnTypeAssignment_5.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//PureFunctionType:
		//	{PureFunctionType} 'F' '<' argType=ValueType ',' returnType=ValueType '>';
		@Override public ParserRule getRule() { return rule; }
		
		//{PureFunctionType} 'F' '<' argType=ValueType ',' returnType=ValueType '>'
		public Group getGroup() { return cGroup; }
		
		//{PureFunctionType}
		public Action getPureFunctionTypeAction_0() { return cPureFunctionTypeAction_0; }
		
		//'F'
		public Keyword getFKeyword_1() { return cFKeyword_1; }
		
		//'<'
		public Keyword getLessThanSignKeyword_2() { return cLessThanSignKeyword_2; }
		
		//argType=ValueType
		public Assignment getArgTypeAssignment_3() { return cArgTypeAssignment_3; }
		
		//ValueType
		public RuleCall getArgTypeValueTypeParserRuleCall_3_0() { return cArgTypeValueTypeParserRuleCall_3_0; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//returnType=ValueType
		public Assignment getReturnTypeAssignment_5() { return cReturnTypeAssignment_5; }
		
		//ValueType
		public RuleCall getReturnTypeValueTypeParserRuleCall_5_0() { return cReturnTypeValueTypeParserRuleCall_5_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_6() { return cGreaterThanSignKeyword_6; }
	}
	public class EffectFullFunctionTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.EffectFullFunctionType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEffectFullFunctionTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFIOKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLessThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cArgTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cArgTypeTypeParserRuleCall_3_0 = (RuleCall)cArgTypeAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cReturnTypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cReturnTypeIOTypeParserRuleCall_5_0 = (RuleCall)cReturnTypeAssignment_5.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//EffectFullFunctionType:
		//	{EffectFullFunctionType} 'FIO' '<' argType=Type ',' returnType=IOType '>';
		@Override public ParserRule getRule() { return rule; }
		
		//{EffectFullFunctionType} 'FIO' '<' argType=Type ',' returnType=IOType '>'
		public Group getGroup() { return cGroup; }
		
		//{EffectFullFunctionType}
		public Action getEffectFullFunctionTypeAction_0() { return cEffectFullFunctionTypeAction_0; }
		
		//'FIO'
		public Keyword getFIOKeyword_1() { return cFIOKeyword_1; }
		
		//'<'
		public Keyword getLessThanSignKeyword_2() { return cLessThanSignKeyword_2; }
		
		//argType=Type
		public Assignment getArgTypeAssignment_3() { return cArgTypeAssignment_3; }
		
		//Type
		public RuleCall getArgTypeTypeParserRuleCall_3_0() { return cArgTypeTypeParserRuleCall_3_0; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//returnType=IOType
		public Assignment getReturnTypeAssignment_5() { return cReturnTypeAssignment_5; }
		
		//IOType
		public RuleCall getReturnTypeIOTypeParserRuleCall_5_0() { return cReturnTypeIOTypeParserRuleCall_5_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_6() { return cGreaterThanSignKeyword_6; }
	}
	public class PureAlgebraicTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.PureAlgebraicType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPureAdtElement1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPureAdtElement1ValueTypeParserRuleCall_1_0 = (RuleCall)cPureAdtElement1Assignment_1.eContents().get(0);
		private final Assignment cPureAdtElement2Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cPureAdtElement2Alternatives_2_0 = (Alternatives)cPureAdtElement2Assignment_2.eContents().get(0);
		private final RuleCall cPureAdtElement2PureSumTypeFactorParserRuleCall_2_0_0 = (RuleCall)cPureAdtElement2Alternatives_2_0.eContents().get(0);
		private final RuleCall cPureAdtElement2PureProdTypeFactorParserRuleCall_2_0_1 = (RuleCall)cPureAdtElement2Alternatives_2_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//PureAlgebraicType:
		//	'[' pureAdtElement1=ValueType pureAdtElement2=(PureSumTypeFactor | PureProdTypeFactor) ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' pureAdtElement1=ValueType pureAdtElement2=(PureSumTypeFactor | PureProdTypeFactor) ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//pureAdtElement1=ValueType
		public Assignment getPureAdtElement1Assignment_1() { return cPureAdtElement1Assignment_1; }
		
		//ValueType
		public RuleCall getPureAdtElement1ValueTypeParserRuleCall_1_0() { return cPureAdtElement1ValueTypeParserRuleCall_1_0; }
		
		//pureAdtElement2=(PureSumTypeFactor | PureProdTypeFactor)
		public Assignment getPureAdtElement2Assignment_2() { return cPureAdtElement2Assignment_2; }
		
		//(PureSumTypeFactor | PureProdTypeFactor)
		public Alternatives getPureAdtElement2Alternatives_2_0() { return cPureAdtElement2Alternatives_2_0; }
		
		//PureSumTypeFactor
		public RuleCall getPureAdtElement2PureSumTypeFactorParserRuleCall_2_0_0() { return cPureAdtElement2PureSumTypeFactorParserRuleCall_2_0_0; }
		
		//PureProdTypeFactor
		public RuleCall getPureAdtElement2PureProdTypeFactorParserRuleCall_2_0_1() { return cPureAdtElement2PureProdTypeFactorParserRuleCall_2_0_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class PureSumTypeFactorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.PureSumTypeFactor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAdtElementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAdtElementValueTypeParserRuleCall_1_0 = (RuleCall)cAdtElementAssignment_1.eContents().get(0);
		
		//PureSumTypeFactor:
		//	'+' adtElement=ValueType;
		@Override public ParserRule getRule() { return rule; }
		
		//'+' adtElement=ValueType
		public Group getGroup() { return cGroup; }
		
		//'+'
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }
		
		//adtElement=ValueType
		public Assignment getAdtElementAssignment_1() { return cAdtElementAssignment_1; }
		
		//ValueType
		public RuleCall getAdtElementValueTypeParserRuleCall_1_0() { return cAdtElementValueTypeParserRuleCall_1_0; }
	}
	public class PureProdTypeFactorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.PureProdTypeFactor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAdtElementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAdtElementValueTypeParserRuleCall_1_0 = (RuleCall)cAdtElementAssignment_1.eContents().get(0);
		
		//PureProdTypeFactor:
		//	'*' adtElement=ValueType;
		@Override public ParserRule getRule() { return rule; }
		
		//'*' adtElement=ValueType
		public Group getGroup() { return cGroup; }
		
		//'*'
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }
		
		//adtElement=ValueType
		public Assignment getAdtElementAssignment_1() { return cAdtElementAssignment_1; }
		
		//ValueType
		public RuleCall getAdtElementValueTypeParserRuleCall_1_0() { return cAdtElementValueTypeParserRuleCall_1_0; }
	}
	public class EffectFullAlgebraicTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.EffectFullAlgebraicType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEffectFullAdtElement1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEffectFullAdtElement1IOTypeParserRuleCall_1_0 = (RuleCall)cEffectFullAdtElement1Assignment_1.eContents().get(0);
		private final Assignment cEffectFullAdtElement2Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cEffectFullAdtElement2Alternatives_2_0 = (Alternatives)cEffectFullAdtElement2Assignment_2.eContents().get(0);
		private final RuleCall cEffectFullAdtElement2EffectFullSumTypeFactorParserRuleCall_2_0_0 = (RuleCall)cEffectFullAdtElement2Alternatives_2_0.eContents().get(0);
		private final RuleCall cEffectFullAdtElement2EffectFullProdTypeFactorParserRuleCall_2_0_1 = (RuleCall)cEffectFullAdtElement2Alternatives_2_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//EffectFullAlgebraicType:
		//	'[' effectFullAdtElement1=IOType effectFullAdtElement2=(EffectFullSumTypeFactor | EffectFullProdTypeFactor) ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' effectFullAdtElement1=IOType effectFullAdtElement2=(EffectFullSumTypeFactor | EffectFullProdTypeFactor) ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//effectFullAdtElement1=IOType
		public Assignment getEffectFullAdtElement1Assignment_1() { return cEffectFullAdtElement1Assignment_1; }
		
		//IOType
		public RuleCall getEffectFullAdtElement1IOTypeParserRuleCall_1_0() { return cEffectFullAdtElement1IOTypeParserRuleCall_1_0; }
		
		//effectFullAdtElement2=(EffectFullSumTypeFactor | EffectFullProdTypeFactor)
		public Assignment getEffectFullAdtElement2Assignment_2() { return cEffectFullAdtElement2Assignment_2; }
		
		//(EffectFullSumTypeFactor | EffectFullProdTypeFactor)
		public Alternatives getEffectFullAdtElement2Alternatives_2_0() { return cEffectFullAdtElement2Alternatives_2_0; }
		
		//EffectFullSumTypeFactor
		public RuleCall getEffectFullAdtElement2EffectFullSumTypeFactorParserRuleCall_2_0_0() { return cEffectFullAdtElement2EffectFullSumTypeFactorParserRuleCall_2_0_0; }
		
		//EffectFullProdTypeFactor
		public RuleCall getEffectFullAdtElement2EffectFullProdTypeFactorParserRuleCall_2_0_1() { return cEffectFullAdtElement2EffectFullProdTypeFactorParserRuleCall_2_0_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class EffectFullSumTypeFactorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.EffectFullSumTypeFactor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAdtElementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAdtElementIOTypeParserRuleCall_1_0 = (RuleCall)cAdtElementAssignment_1.eContents().get(0);
		
		//EffectFullSumTypeFactor:
		//	'+' adtElement=IOType;
		@Override public ParserRule getRule() { return rule; }
		
		//'+' adtElement=IOType
		public Group getGroup() { return cGroup; }
		
		//'+'
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }
		
		//adtElement=IOType
		public Assignment getAdtElementAssignment_1() { return cAdtElementAssignment_1; }
		
		//IOType
		public RuleCall getAdtElementIOTypeParserRuleCall_1_0() { return cAdtElementIOTypeParserRuleCall_1_0; }
	}
	public class EffectFullProdTypeFactorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.EffectFullProdTypeFactor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAdtElementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAdtElementIOTypeParserRuleCall_1_0 = (RuleCall)cAdtElementAssignment_1.eContents().get(0);
		
		//EffectFullProdTypeFactor:
		//	'*' adtElement=IOType;
		@Override public ParserRule getRule() { return rule; }
		
		//'*' adtElement=IOType
		public Group getGroup() { return cGroup; }
		
		//'*'
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }
		
		//adtElement=IOType
		public Assignment getAdtElementAssignment_1() { return cAdtElementAssignment_1; }
		
		//IOType
		public RuleCall getAdtElementIOTypeParserRuleCall_1_0() { return cAdtElementIOTypeParserRuleCall_1_0; }
	}
	public class EffectFullExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.EffectFullExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cRecursiveEffectFullExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cIOKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cExpAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cExpEffectFullExpressionParserRuleCall_0_3_0 = (RuleCall)cExpAssignment_0_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cIOKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final RuleCall cUnitValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cEffectFullFunctionValueParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cEffectFullDataValueParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//////////////////////////////////////////////////////////////////////
		//// Values
		//////////////////////////////////////////////////////////////////////
		//EffectFullExpression:
		//	{RecursiveEffectFullExpression} 'IO' '[' exp=EffectFullExpression ']'
		//	| 'IO' '(' Expression ')'
		//	| UnitValue
		//	| EffectFullFunctionValue
		//	| EffectFullDataValue;
		@Override public ParserRule getRule() { return rule; }
		
		//{RecursiveEffectFullExpression} 'IO' '[' exp=EffectFullExpression ']' | 'IO' '(' Expression ')' | UnitValue |
		//EffectFullFunctionValue | EffectFullDataValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{RecursiveEffectFullExpression} 'IO' '[' exp=EffectFullExpression ']'
		public Group getGroup_0() { return cGroup_0; }
		
		//{RecursiveEffectFullExpression}
		public Action getRecursiveEffectFullExpressionAction_0_0() { return cRecursiveEffectFullExpressionAction_0_0; }
		
		//'IO'
		public Keyword getIOKeyword_0_1() { return cIOKeyword_0_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0_2() { return cLeftSquareBracketKeyword_0_2; }
		
		//exp=EffectFullExpression
		public Assignment getExpAssignment_0_3() { return cExpAssignment_0_3; }
		
		//EffectFullExpression
		public RuleCall getExpEffectFullExpressionParserRuleCall_0_3_0() { return cExpEffectFullExpressionParserRuleCall_0_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_0_4() { return cRightSquareBracketKeyword_0_4; }
		
		//'IO' '(' Expression ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'IO'
		public Keyword getIOKeyword_1_0() { return cIOKeyword_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_1_2() { return cExpressionParserRuleCall_1_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
		
		//UnitValue
		public RuleCall getUnitValueParserRuleCall_2() { return cUnitValueParserRuleCall_2; }
		
		//EffectFullFunctionValue
		public RuleCall getEffectFullFunctionValueParserRuleCall_3() { return cEffectFullFunctionValueParserRuleCall_3; }
		
		//EffectFullDataValue
		public RuleCall getEffectFullDataValueParserRuleCall_4() { return cEffectFullDataValueParserRuleCall_4; }
	}
	public class UnitValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.UnitValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUnitTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//UnitValue UnitType:
		//	{UnitType} '()'
		@Override public ParserRule getRule() { return rule; }
		
		//{UnitType} '()'
		public Group getGroup() { return cGroup; }
		
		//{UnitType}
		public Action getUnitTypeAction_0() { return cUnitTypeAction_0; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_1() { return cLeftParenthesisRightParenthesisKeyword_1; }
	}
	public class EffectFullFunctionValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.EffectFullFunctionValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueEffectFullLambdaParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//EffectFullFunctionValue EffectFullFunctionType:
		//	value=EffectFullLambda
		@Override public ParserRule getRule() { return rule; }
		
		//value=EffectFullLambda
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//EffectFullLambda
		public RuleCall getValueEffectFullLambdaParserRuleCall_0() { return cValueEffectFullLambdaParserRuleCall_0; }
	}
	public class EffectFullValueRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.EffectFullValueRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEffectFullValueRefAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cValueEffectFullValueCrossReference_1_0 = (CrossReference)cValueAssignment_1.eContents().get(0);
		private final RuleCall cValueEffectFullValueIDTerminalRuleCall_1_0_1 = (RuleCall)cValueEffectFullValueCrossReference_1_0.eContents().get(1);
		
		//EffectFullValueRef:
		//	{EffectFullValueRef} value=[EffectFullValue];
		@Override public ParserRule getRule() { return rule; }
		
		//{EffectFullValueRef} value=[EffectFullValue]
		public Group getGroup() { return cGroup; }
		
		//{EffectFullValueRef}
		public Action getEffectFullValueRefAction_0() { return cEffectFullValueRefAction_0; }
		
		//value=[EffectFullValue]
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//[EffectFullValue]
		public CrossReference getValueEffectFullValueCrossReference_1_0() { return cValueEffectFullValueCrossReference_1_0; }
		
		//ID
		public RuleCall getValueEffectFullValueIDTerminalRuleCall_1_0_1() { return cValueEffectFullValueIDTerminalRuleCall_1_0_1; }
	}
	public class EffectFullLambdaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.EffectFullLambda");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cEffectFullLambdaAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cArgAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cArgEffectFullArgumentParserRuleCall_0_2_0 = (RuleCall)cArgAssignment_0_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Keyword cColonKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Assignment cFunctionBodyAssignment_0_6 = (Assignment)cGroup_0.eContents().get(6);
		private final RuleCall cFunctionBodyCompositionFunctionBodyEffectParserRuleCall_0_6_0 = (RuleCall)cFunctionBodyAssignment_0_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_7 = (Keyword)cGroup_0.eContents().get(7);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cEffectFullLambdaAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cColonKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Assignment cFunctionBodyAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cFunctionBodyCompositionFunctionBodyEffectParserRuleCall_1_5_0 = (RuleCall)cFunctionBodyAssignment_1_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		
		//EffectFullLambda EffectFullFunctionDefinition:
		//	{EffectFullLambda} '[' arg=EffectFullArgument ']' ':' '{' functionBody=CompositionFunctionBodyEffect '}'
		//	| {EffectFullLambda} '[' ']' ':' '{' functionBody=CompositionFunctionBodyEffect '}'
		@Override public ParserRule getRule() { return rule; }
		
		//{EffectFullLambda} '[' arg=EffectFullArgument ']' ':' '{' functionBody=CompositionFunctionBodyEffect '}' |
		//{EffectFullLambda} '[' ']' ':' '{' functionBody=CompositionFunctionBodyEffect '}'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{EffectFullLambda} '[' arg=EffectFullArgument ']' ':' '{' functionBody=CompositionFunctionBodyEffect '}'
		public Group getGroup_0() { return cGroup_0; }
		
		//{EffectFullLambda}
		public Action getEffectFullLambdaAction_0_0() { return cEffectFullLambdaAction_0_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0_1() { return cLeftSquareBracketKeyword_0_1; }
		
		//arg=EffectFullArgument
		public Assignment getArgAssignment_0_2() { return cArgAssignment_0_2; }
		
		//EffectFullArgument
		public RuleCall getArgEffectFullArgumentParserRuleCall_0_2_0() { return cArgEffectFullArgumentParserRuleCall_0_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_0_3() { return cRightSquareBracketKeyword_0_3; }
		
		//':'
		public Keyword getColonKeyword_0_4() { return cColonKeyword_0_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0_5() { return cLeftCurlyBracketKeyword_0_5; }
		
		//functionBody=CompositionFunctionBodyEffect
		public Assignment getFunctionBodyAssignment_0_6() { return cFunctionBodyAssignment_0_6; }
		
		//CompositionFunctionBodyEffect
		public RuleCall getFunctionBodyCompositionFunctionBodyEffectParserRuleCall_0_6_0() { return cFunctionBodyCompositionFunctionBodyEffectParserRuleCall_0_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_0_7() { return cRightCurlyBracketKeyword_0_7; }
		
		//{EffectFullLambda} '[' ']' ':' '{' functionBody=CompositionFunctionBodyEffect '}'
		public Group getGroup_1() { return cGroup_1; }
		
		//{EffectFullLambda}
		public Action getEffectFullLambdaAction_1_0() { return cEffectFullLambdaAction_1_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_1() { return cLeftSquareBracketKeyword_1_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
		
		//':'
		public Keyword getColonKeyword_1_3() { return cColonKeyword_1_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_4() { return cLeftCurlyBracketKeyword_1_4; }
		
		//functionBody=CompositionFunctionBodyEffect
		public Assignment getFunctionBodyAssignment_1_5() { return cFunctionBodyAssignment_1_5; }
		
		//CompositionFunctionBodyEffect
		public RuleCall getFunctionBodyCompositionFunctionBodyEffectParserRuleCall_1_5_0() { return cFunctionBodyCompositionFunctionBodyEffectParserRuleCall_1_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_6() { return cRightCurlyBracketKeyword_1_6; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStringValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDataValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cFunctionValueParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Expression:
		//	IntValue
		//	| StringValue
		//	| DataValue
		//	| FunctionValue;
		@Override public ParserRule getRule() { return rule; }
		
		//IntValue | StringValue | DataValue | FunctionValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IntValue
		public RuleCall getIntValueParserRuleCall_0() { return cIntValueParserRuleCall_0; }
		
		//StringValue
		public RuleCall getStringValueParserRuleCall_1() { return cStringValueParserRuleCall_1; }
		
		//DataValue
		public RuleCall getDataValueParserRuleCall_2() { return cDataValueParserRuleCall_2; }
		
		//FunctionValue
		public RuleCall getFunctionValueParserRuleCall_3() { return cFunctionValueParserRuleCall_3; }
	}
	public class IntValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.IntValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIntegerTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//IntValue IntegerType:
		//	{IntegerType} value=INT
		@Override public ParserRule getRule() { return rule; }
		
		//{IntegerType} value=INT
		public Group getGroup() { return cGroup; }
		
		//{IntegerType}
		public Action getIntegerTypeAction_0() { return cIntegerTypeAction_0; }
		
		//value=INT
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_1_0() { return cValueINTTerminalRuleCall_1_0; }
	}
	public class StringValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.StringValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStringTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//StringValue StringType:
		//	{StringType} value=STRING
		@Override public ParserRule getRule() { return rule; }
		
		//{StringType} value=STRING
		public Group getGroup() { return cGroup; }
		
		//{StringType}
		public Action getStringTypeAction_0() { return cStringTypeAction_0; }
		
		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
	}
	public class FunctionValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.FunctionValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValuePureLambdaParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//FunctionValue PureFunctionType:
		//	value=PureLambda
		@Override public ParserRule getRule() { return rule; }
		
		//value=PureLambda
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//PureLambda
		public RuleCall getValuePureLambdaParserRuleCall_0() { return cValuePureLambdaParserRuleCall_0; }
	}
	public class DataValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.DataValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDataValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypePureDataCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypePureDataIDTerminalRuleCall_1_0_1 = (RuleCall)cTypePureDataCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValuePureAdtValueParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DataValue DataType:
		//	{DataValue} type=[PureData] '(' value=PureAdtValue ')'
		@Override public ParserRule getRule() { return rule; }
		
		//{DataValue} type=[PureData] '(' value=PureAdtValue ')'
		public Group getGroup() { return cGroup; }
		
		//{DataValue}
		public Action getDataValueAction_0() { return cDataValueAction_0; }
		
		//type=[PureData]
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//[PureData]
		public CrossReference getTypePureDataCrossReference_1_0() { return cTypePureDataCrossReference_1_0; }
		
		//ID
		public RuleCall getTypePureDataIDTerminalRuleCall_1_0_1() { return cTypePureDataIDTerminalRuleCall_1_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//value=PureAdtValue
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//PureAdtValue
		public RuleCall getValuePureAdtValueParserRuleCall_3_0() { return cValuePureAdtValueParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class EffectFullDataValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.EffectFullDataValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEffectFullDataValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeEffectFullDataCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeEffectFullDataIDTerminalRuleCall_1_0_1 = (RuleCall)cTypeEffectFullDataCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueEffectFullAdtValueParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//EffectFullDataValue EffectFullDataType:
		//	{EffectFullDataValue} type=[EffectFullData] '(' value=EffectFullAdtValue ')'
		@Override public ParserRule getRule() { return rule; }
		
		//{EffectFullDataValue} type=[EffectFullData] '(' value=EffectFullAdtValue ')'
		public Group getGroup() { return cGroup; }
		
		//{EffectFullDataValue}
		public Action getEffectFullDataValueAction_0() { return cEffectFullDataValueAction_0; }
		
		//type=[EffectFullData]
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//[EffectFullData]
		public CrossReference getTypeEffectFullDataCrossReference_1_0() { return cTypeEffectFullDataCrossReference_1_0; }
		
		//ID
		public RuleCall getTypeEffectFullDataIDTerminalRuleCall_1_0_1() { return cTypeEffectFullDataIDTerminalRuleCall_1_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//value=EffectFullAdtValue
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//EffectFullAdtValue
		public RuleCall getValueEffectFullAdtValueParserRuleCall_3_0() { return cValueEffectFullAdtValueParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class PureValueRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.PureValueRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPureValueRefAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cValuePureValueCrossReference_1_0 = (CrossReference)cValueAssignment_1.eContents().get(0);
		private final RuleCall cValuePureValueIDTerminalRuleCall_1_0_1 = (RuleCall)cValuePureValueCrossReference_1_0.eContents().get(1);
		
		//PureValueRef:
		//	{PureValueRef} value=[PureValue];
		@Override public ParserRule getRule() { return rule; }
		
		//{PureValueRef} value=[PureValue]
		public Group getGroup() { return cGroup; }
		
		//{PureValueRef}
		public Action getPureValueRefAction_0() { return cPureValueRefAction_0; }
		
		//value=[PureValue]
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//[PureValue]
		public CrossReference getValuePureValueCrossReference_1_0() { return cValuePureValueCrossReference_1_0; }
		
		//ID
		public RuleCall getValuePureValueIDTerminalRuleCall_1_0_1() { return cValuePureValueIDTerminalRuleCall_1_0_1; }
	}
	public class PureLambdaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.PureLambda");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cPureLambdaAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cArgAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cArgArgumentParserRuleCall_0_2_0 = (RuleCall)cArgAssignment_0_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Keyword cColonKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Assignment cFunctionBodyAssignment_0_6 = (Assignment)cGroup_0.eContents().get(6);
		private final RuleCall cFunctionBodyCompositionFunctionBodyPureParserRuleCall_0_6_0 = (RuleCall)cFunctionBodyAssignment_0_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_7 = (Keyword)cGroup_0.eContents().get(7);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cPureLambdaAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cColonKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Assignment cFunctionBodyAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cFunctionBodyCompositionFunctionBodyPureParserRuleCall_1_5_0 = (RuleCall)cFunctionBodyAssignment_1_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		
		//PureLambda PureFunctionDefinition:
		//	{PureLambda} '(' arg=Argument ')' ':' '{' functionBody=CompositionFunctionBodyPure '}'
		//	| {PureLambda} '(' ')' ':' '{' functionBody=CompositionFunctionBodyPure '}'
		@Override public ParserRule getRule() { return rule; }
		
		//{PureLambda} '(' arg=Argument ')' ':' '{' functionBody=CompositionFunctionBodyPure '}' | {PureLambda} '(' ')' ':' '{'
		//functionBody=CompositionFunctionBodyPure '}'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{PureLambda} '(' arg=Argument ')' ':' '{' functionBody=CompositionFunctionBodyPure '}'
		public Group getGroup_0() { return cGroup_0; }
		
		//{PureLambda}
		public Action getPureLambdaAction_0_0() { return cPureLambdaAction_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }
		
		//arg=Argument
		public Assignment getArgAssignment_0_2() { return cArgAssignment_0_2; }
		
		//Argument
		public RuleCall getArgArgumentParserRuleCall_0_2_0() { return cArgArgumentParserRuleCall_0_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_3() { return cRightParenthesisKeyword_0_3; }
		
		//':'
		public Keyword getColonKeyword_0_4() { return cColonKeyword_0_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0_5() { return cLeftCurlyBracketKeyword_0_5; }
		
		//functionBody=CompositionFunctionBodyPure
		public Assignment getFunctionBodyAssignment_0_6() { return cFunctionBodyAssignment_0_6; }
		
		//CompositionFunctionBodyPure
		public RuleCall getFunctionBodyCompositionFunctionBodyPureParserRuleCall_0_6_0() { return cFunctionBodyCompositionFunctionBodyPureParserRuleCall_0_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_0_7() { return cRightCurlyBracketKeyword_0_7; }
		
		//{PureLambda} '(' ')' ':' '{' functionBody=CompositionFunctionBodyPure '}'
		public Group getGroup_1() { return cGroup_1; }
		
		//{PureLambda}
		public Action getPureLambdaAction_1_0() { return cPureLambdaAction_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
		
		//':'
		public Keyword getColonKeyword_1_3() { return cColonKeyword_1_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_4() { return cLeftCurlyBracketKeyword_1_4; }
		
		//functionBody=CompositionFunctionBodyPure
		public Assignment getFunctionBodyAssignment_1_5() { return cFunctionBodyAssignment_1_5; }
		
		//CompositionFunctionBodyPure
		public RuleCall getFunctionBodyCompositionFunctionBodyPureParserRuleCall_1_5_0() { return cFunctionBodyCompositionFunctionBodyPureParserRuleCall_1_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_6() { return cRightCurlyBracketKeyword_1_6; }
	}
	public class PureAdtValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.PureAdtValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPureValueRefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPureSumValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPureProdValueParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//PureAdtValue:
		//	Expression
		//	| PureValueRef
		//	| PureSumValue
		//	| PureProdValue;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression | PureValueRef | PureSumValue | PureProdValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_0() { return cExpressionParserRuleCall_0; }
		
		//PureValueRef
		public RuleCall getPureValueRefParserRuleCall_1() { return cPureValueRefParserRuleCall_1; }
		
		//PureSumValue
		public RuleCall getPureSumValueParserRuleCall_2() { return cPureSumValueParserRuleCall_2; }
		
		//PureProdValue
		public RuleCall getPureProdValueParserRuleCall_3() { return cPureProdValueParserRuleCall_3; }
	}
	public class PureProdValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.PureProdValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cProdAdtElement1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cProdAdtElement1PureAdtValueParserRuleCall_1_0 = (RuleCall)cProdAdtElement1Assignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cProdAdtElement2Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cProdAdtElement2PureAdtValueParserRuleCall_3_0 = (RuleCall)cProdAdtElement2Assignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//PureProdValue:
		//	'(' prodAdtElement1=PureAdtValue ',' prodAdtElement2=PureAdtValue ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' prodAdtElement1=PureAdtValue ',' prodAdtElement2=PureAdtValue ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//prodAdtElement1=PureAdtValue
		public Assignment getProdAdtElement1Assignment_1() { return cProdAdtElement1Assignment_1; }
		
		//PureAdtValue
		public RuleCall getProdAdtElement1PureAdtValueParserRuleCall_1_0() { return cProdAdtElement1PureAdtValueParserRuleCall_1_0; }
		
		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//prodAdtElement2=PureAdtValue
		public Assignment getProdAdtElement2Assignment_3() { return cProdAdtElement2Assignment_3; }
		
		//PureAdtValue
		public RuleCall getProdAdtElement2PureAdtValueParserRuleCall_3_0() { return cProdAdtElement2PureAdtValueParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class PureSumValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.PureSumValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cSumAdtElement1Assignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cSumAdtElement1PureAdtValueParserRuleCall_0_2_0 = (RuleCall)cSumAdtElement1Assignment_0_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cRightKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cSumAdtElement2Assignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cSumAdtElement2PureAdtValueParserRuleCall_1_2_0 = (RuleCall)cSumAdtElement2Assignment_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//PureSumValue:
		//	'Left' '(' sumAdtElement1=PureAdtValue ')'
		//	| 'Right' '(' sumAdtElement2=PureAdtValue ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'Left' '(' sumAdtElement1=PureAdtValue ')' | 'Right' '(' sumAdtElement2=PureAdtValue ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'Left' '(' sumAdtElement1=PureAdtValue ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'Left'
		public Keyword getLeftKeyword_0_0() { return cLeftKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }
		
		//sumAdtElement1=PureAdtValue
		public Assignment getSumAdtElement1Assignment_0_2() { return cSumAdtElement1Assignment_0_2; }
		
		//PureAdtValue
		public RuleCall getSumAdtElement1PureAdtValueParserRuleCall_0_2_0() { return cSumAdtElement1PureAdtValueParserRuleCall_0_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_3() { return cRightParenthesisKeyword_0_3; }
		
		//'Right' '(' sumAdtElement2=PureAdtValue ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'Right'
		public Keyword getRightKeyword_1_0() { return cRightKeyword_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }
		
		//sumAdtElement2=PureAdtValue
		public Assignment getSumAdtElement2Assignment_1_2() { return cSumAdtElement2Assignment_1_2; }
		
		//PureAdtValue
		public RuleCall getSumAdtElement2PureAdtValueParserRuleCall_1_2_0() { return cSumAdtElement2PureAdtValueParserRuleCall_1_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
	}
	public class EffectFullAdtValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.EffectFullAdtValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cIOKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cInnerValueAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cInnerValuePureAdtValueParserRuleCall_0_2_0 = (RuleCall)cInnerValueAssignment_0_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cIOKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cInnerValueAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cInnerValueEffectFullAdtValueParserRuleCall_1_2_0 = (RuleCall)cInnerValueAssignment_1_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final RuleCall cUnitValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cEffectFullFunctionValueParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cEffectFullProdValueParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cEffectFullValueRefParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cEffectFullDataValueParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cEffectFullSumValueParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//EffectFullAdtValue:
		//	'IO' '(' innerValue=PureAdtValue ')'
		//	| 'IO' '[' innerValue=EffectFullAdtValue ']'
		//	| UnitValue
		//	| EffectFullFunctionValue
		//	| EffectFullProdValue
		//	| EffectFullValueRef
		//	| EffectFullDataValue
		//	| EffectFullSumValue;
		@Override public ParserRule getRule() { return rule; }
		
		//'IO' '(' innerValue=PureAdtValue ')' | 'IO' '[' innerValue=EffectFullAdtValue ']' | UnitValue | EffectFullFunctionValue
		//| EffectFullProdValue | EffectFullValueRef | EffectFullDataValue | EffectFullSumValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'IO' '(' innerValue=PureAdtValue ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'IO'
		public Keyword getIOKeyword_0_0() { return cIOKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }
		
		//innerValue=PureAdtValue
		public Assignment getInnerValueAssignment_0_2() { return cInnerValueAssignment_0_2; }
		
		//PureAdtValue
		public RuleCall getInnerValuePureAdtValueParserRuleCall_0_2_0() { return cInnerValuePureAdtValueParserRuleCall_0_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_3() { return cRightParenthesisKeyword_0_3; }
		
		//'IO' '[' innerValue=EffectFullAdtValue ']'
		public Group getGroup_1() { return cGroup_1; }
		
		//'IO'
		public Keyword getIOKeyword_1_0() { return cIOKeyword_1_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_1() { return cLeftSquareBracketKeyword_1_1; }
		
		//innerValue=EffectFullAdtValue
		public Assignment getInnerValueAssignment_1_2() { return cInnerValueAssignment_1_2; }
		
		//EffectFullAdtValue
		public RuleCall getInnerValueEffectFullAdtValueParserRuleCall_1_2_0() { return cInnerValueEffectFullAdtValueParserRuleCall_1_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_3() { return cRightSquareBracketKeyword_1_3; }
		
		//UnitValue
		public RuleCall getUnitValueParserRuleCall_2() { return cUnitValueParserRuleCall_2; }
		
		//EffectFullFunctionValue
		public RuleCall getEffectFullFunctionValueParserRuleCall_3() { return cEffectFullFunctionValueParserRuleCall_3; }
		
		//EffectFullProdValue
		public RuleCall getEffectFullProdValueParserRuleCall_4() { return cEffectFullProdValueParserRuleCall_4; }
		
		//EffectFullValueRef
		public RuleCall getEffectFullValueRefParserRuleCall_5() { return cEffectFullValueRefParserRuleCall_5; }
		
		//EffectFullDataValue
		public RuleCall getEffectFullDataValueParserRuleCall_6() { return cEffectFullDataValueParserRuleCall_6; }
		
		//EffectFullSumValue
		public RuleCall getEffectFullSumValueParserRuleCall_7() { return cEffectFullSumValueParserRuleCall_7; }
	}
	public class EffectFullProdValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.EffectFullProdValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cProdAdtElement1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cProdAdtElement1EffectFullAdtValueParserRuleCall_1_0 = (RuleCall)cProdAdtElement1Assignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cProdAdtElement2Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cProdAdtElement2EffectFullAdtValueParserRuleCall_3_0 = (RuleCall)cProdAdtElement2Assignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//EffectFullProdValue:
		//	'(' prodAdtElement1=EffectFullAdtValue ',' prodAdtElement2=EffectFullAdtValue ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' prodAdtElement1=EffectFullAdtValue ',' prodAdtElement2=EffectFullAdtValue ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//prodAdtElement1=EffectFullAdtValue
		public Assignment getProdAdtElement1Assignment_1() { return cProdAdtElement1Assignment_1; }
		
		//EffectFullAdtValue
		public RuleCall getProdAdtElement1EffectFullAdtValueParserRuleCall_1_0() { return cProdAdtElement1EffectFullAdtValueParserRuleCall_1_0; }
		
		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//prodAdtElement2=EffectFullAdtValue
		public Assignment getProdAdtElement2Assignment_3() { return cProdAdtElement2Assignment_3; }
		
		//EffectFullAdtValue
		public RuleCall getProdAdtElement2EffectFullAdtValueParserRuleCall_3_0() { return cProdAdtElement2EffectFullAdtValueParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class EffectFullSumValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.EffectFullSumValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cSumAdtElement1Assignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cSumAdtElement1EffectFullAdtValueParserRuleCall_0_2_0 = (RuleCall)cSumAdtElement1Assignment_0_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cRightKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cSumAdtElement2Assignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cSumAdtElement2EffectFullAdtValueParserRuleCall_1_2_0 = (RuleCall)cSumAdtElement2Assignment_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//EffectFullSumValue:
		//	'Left' '(' sumAdtElement1=EffectFullAdtValue ')'
		//	| 'Right' '(' sumAdtElement2=EffectFullAdtValue ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'Left' '(' sumAdtElement1=EffectFullAdtValue ')' | 'Right' '(' sumAdtElement2=EffectFullAdtValue ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'Left' '(' sumAdtElement1=EffectFullAdtValue ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'Left'
		public Keyword getLeftKeyword_0_0() { return cLeftKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }
		
		//sumAdtElement1=EffectFullAdtValue
		public Assignment getSumAdtElement1Assignment_0_2() { return cSumAdtElement1Assignment_0_2; }
		
		//EffectFullAdtValue
		public RuleCall getSumAdtElement1EffectFullAdtValueParserRuleCall_0_2_0() { return cSumAdtElement1EffectFullAdtValueParserRuleCall_0_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_3() { return cRightParenthesisKeyword_0_3; }
		
		//'Right' '(' sumAdtElement2=EffectFullAdtValue ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'Right'
		public Keyword getRightKeyword_1_0() { return cRightKeyword_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }
		
		//sumAdtElement2=EffectFullAdtValue
		public Assignment getSumAdtElement2Assignment_1_2() { return cSumAdtElement2Assignment_1_2; }
		
		//EffectFullAdtValue
		public RuleCall getSumAdtElement2EffectFullAdtValueParserRuleCall_1_2_0() { return cSumAdtElement2EffectFullAdtValueParserRuleCall_1_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
	}
	public class PrimitivePureFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.PrimitivePureFunction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntToStringParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntPowParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPlusParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cMinusParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cTimesParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cModParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cApplyFParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		///////////////////////////////////////////////////////////////////////
		//// Primitives
		///////////////////////////////////////////////////////////////////////
		//PrimitivePureFunction:
		//	IntToString | IntPow | Plus | Minus | Times | Mod | ApplyF;
		@Override public ParserRule getRule() { return rule; }
		
		//IntToString | IntPow | Plus | Minus | Times | Mod | ApplyF
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IntToString
		public RuleCall getIntToStringParserRuleCall_0() { return cIntToStringParserRuleCall_0; }
		
		//IntPow
		public RuleCall getIntPowParserRuleCall_1() { return cIntPowParserRuleCall_1; }
		
		//Plus
		public RuleCall getPlusParserRuleCall_2() { return cPlusParserRuleCall_2; }
		
		//Minus
		public RuleCall getMinusParserRuleCall_3() { return cMinusParserRuleCall_3; }
		
		//Times
		public RuleCall getTimesParserRuleCall_4() { return cTimesParserRuleCall_4; }
		
		//Mod
		public RuleCall getModParserRuleCall_5() { return cModParserRuleCall_5; }
		
		//ApplyF
		public RuleCall getApplyFParserRuleCall_6() { return cApplyFParserRuleCall_6; }
	}
	public class IntToStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.IntToString");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIntToStringAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIntToStringKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//IntToString:
		//	{IntToString} 'IntToString';
		@Override public ParserRule getRule() { return rule; }
		
		//{IntToString} 'IntToString'
		public Group getGroup() { return cGroup; }
		
		//{IntToString}
		public Action getIntToStringAction_0() { return cIntToStringAction_0; }
		
		//'IntToString'
		public Keyword getIntToStringKeyword_1() { return cIntToStringKeyword_1; }
	}
	public class IntPowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.IntPow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIntPowAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIntPowKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//IntPow:
		//	{IntPow} 'IntPow';
		@Override public ParserRule getRule() { return rule; }
		
		//{IntPow} 'IntPow'
		public Group getGroup() { return cGroup; }
		
		//{IntPow}
		public Action getIntPowAction_0() { return cIntPowAction_0; }
		
		//'IntPow'
		public Keyword getIntPowKeyword_1() { return cIntPowKeyword_1; }
	}
	public class PlusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.Plus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPlusAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPlusSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Plus:
		//	{Plus} '+';
		@Override public ParserRule getRule() { return rule; }
		
		//{Plus} '+'
		public Group getGroup() { return cGroup; }
		
		//{Plus}
		public Action getPlusAction_0() { return cPlusAction_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1() { return cPlusSignKeyword_1; }
	}
	public class MinusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.Minus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMinusAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Minus:
		//	{Minus} '-';
		@Override public ParserRule getRule() { return rule; }
		
		//{Minus} '-'
		public Group getGroup() { return cGroup; }
		
		//{Minus}
		public Action getMinusAction_0() { return cMinusAction_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
	}
	public class TimesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.Times");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTimesAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Times:
		//	{Times} '*';
		@Override public ParserRule getRule() { return rule; }
		
		//{Times} '*'
		public Group getGroup() { return cGroup; }
		
		//{Times}
		public Action getTimesAction_0() { return cTimesAction_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1() { return cAsteriskKeyword_1; }
	}
	public class ModElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.Mod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cModAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cModKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Mod:
		//	{Mod} 'mod';
		@Override public ParserRule getRule() { return rule; }
		
		//{Mod} 'mod'
		public Group getGroup() { return cGroup; }
		
		//{Mod}
		public Action getModAction_0() { return cModAction_0; }
		
		//'mod'
		public Keyword getModKeyword_1() { return cModKeyword_1; }
	}
	public class ApplyFElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.ApplyF");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cApplyFAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cApplyFKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFunctionTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFunctionTypePureFunctionTypeParserRuleCall_2_0 = (RuleCall)cFunctionTypeAssignment_2.eContents().get(0);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueApplyFFactorParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//ApplyF:
		//	{ApplyF} 'applyF' functionType=PureFunctionType value=ApplyFFactor;
		@Override public ParserRule getRule() { return rule; }
		
		//{ApplyF} 'applyF' functionType=PureFunctionType value=ApplyFFactor
		public Group getGroup() { return cGroup; }
		
		//{ApplyF}
		public Action getApplyFAction_0() { return cApplyFAction_0; }
		
		//'applyF'
		public Keyword getApplyFKeyword_1() { return cApplyFKeyword_1; }
		
		//functionType=PureFunctionType
		public Assignment getFunctionTypeAssignment_2() { return cFunctionTypeAssignment_2; }
		
		//PureFunctionType
		public RuleCall getFunctionTypePureFunctionTypeParserRuleCall_2_0() { return cFunctionTypePureFunctionTypeParserRuleCall_2_0; }
		
		//value=ApplyFFactor
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//ApplyFFactor
		public RuleCall getValueApplyFFactorParserRuleCall_3_0() { return cValueApplyFFactorParserRuleCall_3_0; }
	}
	public class ApplyFFactorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.ApplyFFactor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValueReferenceAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final CrossReference cValueReferencePureReferenceCrossReference_0_0 = (CrossReference)cValueReferenceAssignment_0.eContents().get(0);
		private final RuleCall cValueReferencePureReferenceIDTerminalRuleCall_0_0_1 = (RuleCall)cValueReferencePureReferenceCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cValueLambdaAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueLambdaPureLambdaParserRuleCall_1_1_0 = (RuleCall)cValueLambdaAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//ApplyFFactor:
		//	valueReference=[PureReference] | '(' valueLambda=PureLambda ')';
		@Override public ParserRule getRule() { return rule; }
		
		//valueReference=[PureReference] | '(' valueLambda=PureLambda ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//valueReference=[PureReference]
		public Assignment getValueReferenceAssignment_0() { return cValueReferenceAssignment_0; }
		
		//[PureReference]
		public CrossReference getValueReferencePureReferenceCrossReference_0_0() { return cValueReferencePureReferenceCrossReference_0_0; }
		
		//ID
		public RuleCall getValueReferencePureReferenceIDTerminalRuleCall_0_0_1() { return cValueReferencePureReferenceIDTerminalRuleCall_0_0_1; }
		
		//'(' valueLambda=PureLambda ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//valueLambda=PureLambda
		public Assignment getValueLambdaAssignment_1_1() { return cValueLambdaAssignment_1_1; }
		
		//PureLambda
		public RuleCall getValueLambdaPureLambdaParserRuleCall_1_1_0() { return cValueLambdaPureLambdaParserRuleCall_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}
	public class PrimitiveEffectFullFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.PrimitiveEffectFullFunction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimitivePrintParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cApplyFIOParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPrimitiveReturnParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//PrimitiveEffectFullFunction:
		//	PrimitivePrint | ApplyFIO | PrimitiveReturn;
		@Override public ParserRule getRule() { return rule; }
		
		//PrimitivePrint | ApplyFIO | PrimitiveReturn
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PrimitivePrint
		public RuleCall getPrimitivePrintParserRuleCall_0() { return cPrimitivePrintParserRuleCall_0; }
		
		//ApplyFIO
		public RuleCall getApplyFIOParserRuleCall_1() { return cApplyFIOParserRuleCall_1; }
		
		//PrimitiveReturn
		public RuleCall getPrimitiveReturnParserRuleCall_2() { return cPrimitiveReturnParserRuleCall_2; }
	}
	public class PrimitivePrintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.PrimitivePrint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPrimitivePrintAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPrintKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//PrimitivePrint:
		//	{PrimitivePrint} "print";
		@Override public ParserRule getRule() { return rule; }
		
		//{PrimitivePrint} "print"
		public Group getGroup() { return cGroup; }
		
		//{PrimitivePrint}
		public Action getPrimitivePrintAction_0() { return cPrimitivePrintAction_0; }
		
		//"print"
		public Keyword getPrintKeyword_1() { return cPrintKeyword_1; }
	}
	public class PrimitiveEffectFullValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.PrimitiveEffectFullValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimitiveRandomParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPrimitiveTimeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PrimitiveEffectFullValue:
		//	PrimitiveRandom | PrimitiveTime;
		@Override public ParserRule getRule() { return rule; }
		
		//PrimitiveRandom | PrimitiveTime
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PrimitiveRandom
		public RuleCall getPrimitiveRandomParserRuleCall_0() { return cPrimitiveRandomParserRuleCall_0; }
		
		//PrimitiveTime
		public RuleCall getPrimitiveTimeParserRuleCall_1() { return cPrimitiveTimeParserRuleCall_1; }
	}
	public class PrimitiveRandomElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.PrimitiveRandom");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPrimitiveRandomAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRandomIntKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//PrimitiveRandom:
		//	{PrimitiveRandom} "randomInt";
		@Override public ParserRule getRule() { return rule; }
		
		//{PrimitiveRandom} "randomInt"
		public Group getGroup() { return cGroup; }
		
		//{PrimitiveRandom}
		public Action getPrimitiveRandomAction_0() { return cPrimitiveRandomAction_0; }
		
		//"randomInt"
		public Keyword getRandomIntKeyword_1() { return cRandomIntKeyword_1; }
	}
	public class PrimitiveReturnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.PrimitiveReturn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPrimitiveReturnAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cReturnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//PrimitiveReturn:
		//	{PrimitiveReturn} "return" type=Type;
		@Override public ParserRule getRule() { return rule; }
		
		//{PrimitiveReturn} "return" type=Type
		public Group getGroup() { return cGroup; }
		
		//{PrimitiveReturn}
		public Action getPrimitiveReturnAction_0() { return cPrimitiveReturnAction_0; }
		
		//"return"
		public Keyword getReturnKeyword_1() { return cReturnKeyword_1; }
		
		//type=Type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_2_0() { return cTypeTypeParserRuleCall_2_0; }
	}
	public class PrimitiveTimeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.PrimitiveTime");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPrimitiveTimeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCurrentTimeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//PrimitiveTime:
		//	{PrimitiveTime} "currentTime";
		@Override public ParserRule getRule() { return rule; }
		
		//{PrimitiveTime} "currentTime"
		public Group getGroup() { return cGroup; }
		
		//{PrimitiveTime}
		public Action getPrimitiveTimeAction_0() { return cPrimitiveTimeAction_0; }
		
		//"currentTime"
		public Keyword getCurrentTimeKeyword_1() { return cCurrentTimeKeyword_1; }
	}
	public class ApplyFIOElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.ApplyFIO");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cApplyFIOAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cApplyFIOKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFunctionTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFunctionTypeEffectFullFunctionTypeParserRuleCall_2_0 = (RuleCall)cFunctionTypeAssignment_2.eContents().get(0);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueApplyFIOFactorParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//ApplyFIO:
		//	{ApplyFIO} 'applyFIO' functionType=EffectFullFunctionType value=ApplyFIOFactor;
		@Override public ParserRule getRule() { return rule; }
		
		//{ApplyFIO} 'applyFIO' functionType=EffectFullFunctionType value=ApplyFIOFactor
		public Group getGroup() { return cGroup; }
		
		//{ApplyFIO}
		public Action getApplyFIOAction_0() { return cApplyFIOAction_0; }
		
		//'applyFIO'
		public Keyword getApplyFIOKeyword_1() { return cApplyFIOKeyword_1; }
		
		//functionType=EffectFullFunctionType
		public Assignment getFunctionTypeAssignment_2() { return cFunctionTypeAssignment_2; }
		
		//EffectFullFunctionType
		public RuleCall getFunctionTypeEffectFullFunctionTypeParserRuleCall_2_0() { return cFunctionTypeEffectFullFunctionTypeParserRuleCall_2_0; }
		
		//value=ApplyFIOFactor
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//ApplyFIOFactor
		public RuleCall getValueApplyFIOFactorParserRuleCall_3_0() { return cValueApplyFIOFactorParserRuleCall_3_0; }
	}
	public class ApplyFIOFactorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.ApplyFIOFactor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValueReferenceAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final CrossReference cValueReferenceEffectFullReferenceCrossReference_0_0 = (CrossReference)cValueReferenceAssignment_0.eContents().get(0);
		private final RuleCall cValueReferenceEffectFullReferenceIDTerminalRuleCall_0_0_1 = (RuleCall)cValueReferenceEffectFullReferenceCrossReference_0_0.eContents().get(1);
		private final Assignment cValuePrimitiveAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cValuePrimitivePrimitiveEffectFullValueParserRuleCall_1_0 = (RuleCall)cValuePrimitiveAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cValueLambdaAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueLambdaEffectFullLambdaParserRuleCall_2_1_0 = (RuleCall)cValueLambdaAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//ApplyFIOFactor:
		//	valueReference=[EffectFullReference] | valuePrimitive=PrimitiveEffectFullValue
		//	| '(' valueLambda=EffectFullLambda ')';
		@Override public ParserRule getRule() { return rule; }
		
		//valueReference=[EffectFullReference] | valuePrimitive=PrimitiveEffectFullValue | '(' valueLambda=EffectFullLambda ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//valueReference=[EffectFullReference]
		public Assignment getValueReferenceAssignment_0() { return cValueReferenceAssignment_0; }
		
		//[EffectFullReference]
		public CrossReference getValueReferenceEffectFullReferenceCrossReference_0_0() { return cValueReferenceEffectFullReferenceCrossReference_0_0; }
		
		//ID
		public RuleCall getValueReferenceEffectFullReferenceIDTerminalRuleCall_0_0_1() { return cValueReferenceEffectFullReferenceIDTerminalRuleCall_0_0_1; }
		
		//valuePrimitive=PrimitiveEffectFullValue
		public Assignment getValuePrimitiveAssignment_1() { return cValuePrimitiveAssignment_1; }
		
		//PrimitiveEffectFullValue
		public RuleCall getValuePrimitivePrimitiveEffectFullValueParserRuleCall_1_0() { return cValuePrimitivePrimitiveEffectFullValueParserRuleCall_1_0; }
		
		//'(' valueLambda=EffectFullLambda ')'
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//valueLambda=EffectFullLambda
		public Assignment getValueLambdaAssignment_2_1() { return cValueLambdaAssignment_2_1; }
		
		//EffectFullLambda
		public RuleCall getValueLambdaEffectFullLambdaParserRuleCall_2_1_0() { return cValueLambdaEffectFullLambdaParserRuleCall_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}
	
	
	private final ModelElements pModel;
	private final PureBlockElements pPureBlock;
	private final PureFunctionBlockElements pPureFunctionBlock;
	private final PureDataBlockElements pPureDataBlock;
	private final PureValueBlockElements pPureValueBlock;
	private final EffectFullBlockElements pEffectFullBlock;
	private final EffectFullDataBlockElements pEffectFullDataBlock;
	private final EffectFullValueBlockElements pEffectFullValueBlock;
	private final EffectFullFunctionBlockElements pEffectFullFunctionBlock;
	private final PureDataElements pPureData;
	private final PureValueElements pPureValue;
	private final EffectFullDataElements pEffectFullData;
	private final EffectFullValueElements pEffectFullValue;
	private final PureFunctionDefinitionElements pPureFunctionDefinition;
	private final EffectFullFunctionDefinitionElements pEffectFullFunctionDefinition;
	private final MainFuncElements pMainFunc;
	private final AdditionalPureArgumentElements pAdditionalPureArgument;
	private final AdditionalEffectFullArgumentElements pAdditionalEffectFullArgument;
	private final FunctionElements pFunction;
	private final PureFunctionElements pPureFunction;
	private final EffectFullFunctionElements pEffectFullFunction;
	private final EffectFullReferenceElements pEffectFullReference;
	private final PureReferenceElements pPureReference;
	private final PrimitiveFunctionElements pPrimitiveFunction;
	private final EffectFullArgumentElements pEffectFullArgument;
	private final ArgumentElements pArgument;
	private final FunctionBodyPureElements pFunctionBodyPure;
	private final FunctionBodyEffectFullElements pFunctionBodyEffectFull;
	private final EmptyFunctionBodyElements pEmptyFunctionBody;
	private final CompositionFunctionBodyPureElements pCompositionFunctionBodyPure;
	private final CompositionFunctionBodyPureFactorElements pCompositionFunctionBodyPureFactor;
	private final CompositionFunctionBodyEffectElements pCompositionFunctionBodyEffect;
	private final CompositionFunctionBodyEffectFullFactorElements pCompositionFunctionBodyEffectFullFactor;
	private final IOTypeElements pIOType;
	private final ValueTypeElements pValueType;
	private final TypeElements pType;
	private final EffectFullTypeElements pEffectFullType;
	private final VoidTypeElements pVoidType;
	private final IntegerTypeElements pIntegerType;
	private final StringTypeElements pStringType;
	private final UnitTypeElements pUnitType;
	private final DataTypeElements pDataType;
	private final EffectFullDataTypeElements pEffectFullDataType;
	private final PureFunctionTypeElements pPureFunctionType;
	private final EffectFullFunctionTypeElements pEffectFullFunctionType;
	private final PureAlgebraicTypeElements pPureAlgebraicType;
	private final PureSumTypeFactorElements pPureSumTypeFactor;
	private final PureProdTypeFactorElements pPureProdTypeFactor;
	private final EffectFullAlgebraicTypeElements pEffectFullAlgebraicType;
	private final EffectFullSumTypeFactorElements pEffectFullSumTypeFactor;
	private final EffectFullProdTypeFactorElements pEffectFullProdTypeFactor;
	private final EffectFullExpressionElements pEffectFullExpression;
	private final UnitValueElements pUnitValue;
	private final EffectFullFunctionValueElements pEffectFullFunctionValue;
	private final EffectFullValueRefElements pEffectFullValueRef;
	private final EffectFullLambdaElements pEffectFullLambda;
	private final ExpressionElements pExpression;
	private final IntValueElements pIntValue;
	private final StringValueElements pStringValue;
	private final FunctionValueElements pFunctionValue;
	private final DataValueElements pDataValue;
	private final EffectFullDataValueElements pEffectFullDataValue;
	private final PureValueRefElements pPureValueRef;
	private final PureLambdaElements pPureLambda;
	private final PureAdtValueElements pPureAdtValue;
	private final PureProdValueElements pPureProdValue;
	private final PureSumValueElements pPureSumValue;
	private final EffectFullAdtValueElements pEffectFullAdtValue;
	private final EffectFullProdValueElements pEffectFullProdValue;
	private final EffectFullSumValueElements pEffectFullSumValue;
	private final PrimitivePureFunctionElements pPrimitivePureFunction;
	private final IntToStringElements pIntToString;
	private final IntPowElements pIntPow;
	private final PlusElements pPlus;
	private final MinusElements pMinus;
	private final TimesElements pTimes;
	private final ModElements pMod;
	private final ApplyFElements pApplyF;
	private final ApplyFFactorElements pApplyFFactor;
	private final PrimitiveEffectFullFunctionElements pPrimitiveEffectFullFunction;
	private final PrimitivePrintElements pPrimitivePrint;
	private final PrimitiveEffectFullValueElements pPrimitiveEffectFullValue;
	private final PrimitiveRandomElements pPrimitiveRandom;
	private final PrimitiveReturnElements pPrimitiveReturn;
	private final PrimitiveTimeElements pPrimitiveTime;
	private final ApplyFIOElements pApplyFIO;
	private final ApplyFIOFactorElements pApplyFIOFactor;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public FPMLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pPureBlock = new PureBlockElements();
		this.pPureFunctionBlock = new PureFunctionBlockElements();
		this.pPureDataBlock = new PureDataBlockElements();
		this.pPureValueBlock = new PureValueBlockElements();
		this.pEffectFullBlock = new EffectFullBlockElements();
		this.pEffectFullDataBlock = new EffectFullDataBlockElements();
		this.pEffectFullValueBlock = new EffectFullValueBlockElements();
		this.pEffectFullFunctionBlock = new EffectFullFunctionBlockElements();
		this.pPureData = new PureDataElements();
		this.pPureValue = new PureValueElements();
		this.pEffectFullData = new EffectFullDataElements();
		this.pEffectFullValue = new EffectFullValueElements();
		this.pPureFunctionDefinition = new PureFunctionDefinitionElements();
		this.pEffectFullFunctionDefinition = new EffectFullFunctionDefinitionElements();
		this.pMainFunc = new MainFuncElements();
		this.pAdditionalPureArgument = new AdditionalPureArgumentElements();
		this.pAdditionalEffectFullArgument = new AdditionalEffectFullArgumentElements();
		this.pFunction = new FunctionElements();
		this.pPureFunction = new PureFunctionElements();
		this.pEffectFullFunction = new EffectFullFunctionElements();
		this.pEffectFullReference = new EffectFullReferenceElements();
		this.pPureReference = new PureReferenceElements();
		this.pPrimitiveFunction = new PrimitiveFunctionElements();
		this.pEffectFullArgument = new EffectFullArgumentElements();
		this.pArgument = new ArgumentElements();
		this.pFunctionBodyPure = new FunctionBodyPureElements();
		this.pFunctionBodyEffectFull = new FunctionBodyEffectFullElements();
		this.pEmptyFunctionBody = new EmptyFunctionBodyElements();
		this.pCompositionFunctionBodyPure = new CompositionFunctionBodyPureElements();
		this.pCompositionFunctionBodyPureFactor = new CompositionFunctionBodyPureFactorElements();
		this.pCompositionFunctionBodyEffect = new CompositionFunctionBodyEffectElements();
		this.pCompositionFunctionBodyEffectFullFactor = new CompositionFunctionBodyEffectFullFactorElements();
		this.pIOType = new IOTypeElements();
		this.pValueType = new ValueTypeElements();
		this.pType = new TypeElements();
		this.pEffectFullType = new EffectFullTypeElements();
		this.pVoidType = new VoidTypeElements();
		this.pIntegerType = new IntegerTypeElements();
		this.pStringType = new StringTypeElements();
		this.pUnitType = new UnitTypeElements();
		this.pDataType = new DataTypeElements();
		this.pEffectFullDataType = new EffectFullDataTypeElements();
		this.pPureFunctionType = new PureFunctionTypeElements();
		this.pEffectFullFunctionType = new EffectFullFunctionTypeElements();
		this.pPureAlgebraicType = new PureAlgebraicTypeElements();
		this.pPureSumTypeFactor = new PureSumTypeFactorElements();
		this.pPureProdTypeFactor = new PureProdTypeFactorElements();
		this.pEffectFullAlgebraicType = new EffectFullAlgebraicTypeElements();
		this.pEffectFullSumTypeFactor = new EffectFullSumTypeFactorElements();
		this.pEffectFullProdTypeFactor = new EffectFullProdTypeFactorElements();
		this.pEffectFullExpression = new EffectFullExpressionElements();
		this.pUnitValue = new UnitValueElements();
		this.pEffectFullFunctionValue = new EffectFullFunctionValueElements();
		this.pEffectFullValueRef = new EffectFullValueRefElements();
		this.pEffectFullLambda = new EffectFullLambdaElements();
		this.pExpression = new ExpressionElements();
		this.pIntValue = new IntValueElements();
		this.pStringValue = new StringValueElements();
		this.pFunctionValue = new FunctionValueElements();
		this.pDataValue = new DataValueElements();
		this.pEffectFullDataValue = new EffectFullDataValueElements();
		this.pPureValueRef = new PureValueRefElements();
		this.pPureLambda = new PureLambdaElements();
		this.pPureAdtValue = new PureAdtValueElements();
		this.pPureProdValue = new PureProdValueElements();
		this.pPureSumValue = new PureSumValueElements();
		this.pEffectFullAdtValue = new EffectFullAdtValueElements();
		this.pEffectFullProdValue = new EffectFullProdValueElements();
		this.pEffectFullSumValue = new EffectFullSumValueElements();
		this.pPrimitivePureFunction = new PrimitivePureFunctionElements();
		this.pIntToString = new IntToStringElements();
		this.pIntPow = new IntPowElements();
		this.pPlus = new PlusElements();
		this.pMinus = new MinusElements();
		this.pTimes = new TimesElements();
		this.pMod = new ModElements();
		this.pApplyF = new ApplyFElements();
		this.pApplyFFactor = new ApplyFFactorElements();
		this.pPrimitiveEffectFullFunction = new PrimitiveEffectFullFunctionElements();
		this.pPrimitivePrint = new PrimitivePrintElements();
		this.pPrimitiveEffectFullValue = new PrimitiveEffectFullValueElements();
		this.pPrimitiveRandom = new PrimitiveRandomElements();
		this.pPrimitiveReturn = new PrimitiveReturnElements();
		this.pPrimitiveTime = new PrimitiveTimeElements();
		this.pApplyFIO = new ApplyFIOElements();
		this.pApplyFIOFactor = new ApplyFIOFactorElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("it.unibo.FPML".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	/////////////////////////////////////////////////////////////////
	//// Entry element
	////////////////////////////////////////////////////////////////
	//Model:
	//	elements+=PureBlock
	//	elements+=EffectFullBlock;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	////////////////////////////////////////////////////////////////
	//// Outer Blocks
	////////////////////////////////////////////////////////////////
	//PureBlock:
	//	'Pure' '{'
	//	elements+=PureDataBlock
	//	elements+=PureFunctionBlock
	//	'}';
	public PureBlockElements getPureBlockAccess() {
		return pPureBlock;
	}
	
	public ParserRule getPureBlockRule() {
		return getPureBlockAccess().getRule();
	}
	
	//PureFunctionBlock:
	//	'Functions' '{'
	//	features+=PureFunctionDefinition*
	//	'}';
	public PureFunctionBlockElements getPureFunctionBlockAccess() {
		return pPureFunctionBlock;
	}
	
	public ParserRule getPureFunctionBlockRule() {
		return getPureFunctionBlockAccess().getRule();
	}
	
	//PureDataBlock:
	//	'Data' '{'
	//	elements+=PureData*
	//	value=PureValueBlock
	//	'}';
	public PureDataBlockElements getPureDataBlockAccess() {
		return pPureDataBlock;
	}
	
	public ParserRule getPureDataBlockRule() {
		return getPureDataBlockAccess().getRule();
	}
	
	//PureValueBlock:
	//	'Value' '{'
	//	elements+=PureValue*
	//	'}';
	public PureValueBlockElements getPureValueBlockAccess() {
		return pPureValueBlock;
	}
	
	public ParserRule getPureValueBlockRule() {
		return getPureValueBlockAccess().getRule();
	}
	
	//EffectFullBlock:
	//	'Effects' '{'
	//	elements+=EffectFullDataBlock
	//	elements+=EffectFullFunctionBlock
	//	'}';
	public EffectFullBlockElements getEffectFullBlockAccess() {
		return pEffectFullBlock;
	}
	
	public ParserRule getEffectFullBlockRule() {
		return getEffectFullBlockAccess().getRule();
	}
	
	//EffectFullDataBlock:
	//	'Data' '{'
	//	elements+=EffectFullData*
	//	value=EffectFullValueBlock
	//	'}';
	public EffectFullDataBlockElements getEffectFullDataBlockAccess() {
		return pEffectFullDataBlock;
	}
	
	public ParserRule getEffectFullDataBlockRule() {
		return getEffectFullDataBlockAccess().getRule();
	}
	
	//EffectFullValueBlock:
	//	'Value' '{'
	//	elements+=EffectFullValue*
	//	'}';
	public EffectFullValueBlockElements getEffectFullValueBlockAccess() {
		return pEffectFullValueBlock;
	}
	
	public ParserRule getEffectFullValueBlockRule() {
		return getEffectFullValueBlockAccess().getRule();
	}
	
	//EffectFullFunctionBlock:
	//	'Functions' '{'
	//	features+=EffectFullFunctionDefinition*
	//	main=MainFunc
	//	'}';
	public EffectFullFunctionBlockElements getEffectFullFunctionBlockAccess() {
		return pEffectFullFunctionBlock;
	}
	
	public ParserRule getEffectFullFunctionBlockRule() {
		return getEffectFullFunctionBlockAccess().getRule();
	}
	
	///////////////////////////////////////////////////////////////////
	//// Outer Block Elements
	///////////////////////////////////////////////////////////////////
	//PureData:
	//	name=ID ':' content=ValueType;
	public PureDataElements getPureDataAccess() {
		return pPureData;
	}
	
	public ParserRule getPureDataRule() {
		return getPureDataAccess().getRule();
	}
	
	//PureValue PureFunctionDefinition:
	//	{PureValue} name=ID ':' value=Expression
	public PureValueElements getPureValueAccess() {
		return pPureValue;
	}
	
	public ParserRule getPureValueRule() {
		return getPureValueAccess().getRule();
	}
	
	//EffectFullData:
	//	name=ID ':' content=EffectFullType;
	public EffectFullDataElements getEffectFullDataAccess() {
		return pEffectFullData;
	}
	
	public ParserRule getEffectFullDataRule() {
		return getEffectFullDataAccess().getRule();
	}
	
	//EffectFullValue EffectFullFunctionDefinition:
	//	{EffectFullValue} name=ID ':' value=EffectFullExpression
	public EffectFullValueElements getEffectFullValueAccess() {
		return pEffectFullValue;
	}
	
	public ParserRule getEffectFullValueRule() {
		return getEffectFullValueAccess().getRule();
	}
	
	//PureFunctionDefinition:
	//	'def' returnType=ValueType name=ID '(' arg=Argument (',' higherOrderArg=AdditionalPureArgument)? ')' ':' '{'
	//	functionBody=FunctionBodyPure '}';
	public PureFunctionDefinitionElements getPureFunctionDefinitionAccess() {
		return pPureFunctionDefinition;
	}
	
	public ParserRule getPureFunctionDefinitionRule() {
		return getPureFunctionDefinitionAccess().getRule();
	}
	
	//EffectFullFunctionDefinition:
	//	'def' returnType=IOType name=ID '(' arg=EffectFullArgument (',' higherOrderArg=AdditionalEffectFullArgument)? ')' ':'
	//	'{' functionBody=FunctionBodyEffectFull '}';
	public EffectFullFunctionDefinitionElements getEffectFullFunctionDefinitionAccess() {
		return pEffectFullFunctionDefinition;
	}
	
	public ParserRule getEffectFullFunctionDefinitionRule() {
		return getEffectFullFunctionDefinitionAccess().getRule();
	}
	
	//MainFunc:
	//	'IO' returnType=UnitType 'main' ':' '{' functionBody=FunctionBodyEffectFull '}';
	public MainFuncElements getMainFuncAccess() {
		return pMainFunc;
	}
	
	public ParserRule getMainFuncRule() {
		return getMainFuncAccess().getRule();
	}
	
	//AdditionalPureArgument:
	//	arg2=Argument;
	public AdditionalPureArgumentElements getAdditionalPureArgumentAccess() {
		return pAdditionalPureArgument;
	}
	
	public ParserRule getAdditionalPureArgumentRule() {
		return getAdditionalPureArgumentAccess().getRule();
	}
	
	//AdditionalEffectFullArgument:
	//	arg2=EffectFullArgument;
	public AdditionalEffectFullArgumentElements getAdditionalEffectFullArgumentAccess() {
		return pAdditionalEffectFullArgument;
	}
	
	public ParserRule getAdditionalEffectFullArgumentRule() {
		return getAdditionalEffectFullArgumentAccess().getRule();
	}
	
	/////////////////////////////////////////////////////////////////////////////////////////////////
	//// Aggregate Types
	/////////////////////////////////////////////////////////////////////////////////////////////////
	//Function:
	//	EffectFullFunction | PureFunction;
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}
	
	//PureFunction:
	//	PureFunctionDefinition | PrimitivePureFunction;
	public PureFunctionElements getPureFunctionAccess() {
		return pPureFunction;
	}
	
	public ParserRule getPureFunctionRule() {
		return getPureFunctionAccess().getRule();
	}
	
	//EffectFullFunction:
	//	EffectFullFunctionDefinition | PrimitiveEffectFullFunction;
	public EffectFullFunctionElements getEffectFullFunctionAccess() {
		return pEffectFullFunction;
	}
	
	public ParserRule getEffectFullFunctionRule() {
		return getEffectFullFunctionAccess().getRule();
	}
	
	/// *
	// *  Tricky aggregate: is used in reference [] but has addictional components in order to 
	// * 	facilitate the validation, those components suck as PrimitiveEffectFullValue or PrimitiveFunction
	// * 	cannot be referenced because of no ids, but where the effectfullReference is used them are also allowed(not as reference).
	// * / EffectFullReference:
	//	EffectFullValue | EffectFullArgument | PureValue | PrimitiveEffectFullValue | PrimitiveFunction | Function;
	public EffectFullReferenceElements getEffectFullReferenceAccess() {
		return pEffectFullReference;
	}
	
	public ParserRule getEffectFullReferenceRule() {
		return getEffectFullReferenceAccess().getRule();
	}
	
	//PureReference:
	//	PureValue | Argument;
	public PureReferenceElements getPureReferenceAccess() {
		return pPureReference;
	}
	
	public ParserRule getPureReferenceRule() {
		return getPureReferenceAccess().getRule();
	}
	
	//PrimitiveFunction:
	//	PrimitiveEffectFullFunction | PrimitivePureFunction | PrimitiveEffectFullValue;
	public PrimitiveFunctionElements getPrimitiveFunctionAccess() {
		return pPrimitiveFunction;
	}
	
	public ParserRule getPrimitiveFunctionRule() {
		return getPrimitiveFunctionAccess().getRule();
	}
	
	/////////////////////////////////////////////////////////////////////
	//// Function Body Elements
	/////////////////////////////////////////////////////////////////////
	//EffectFullArgument:
	//	type=Type name=ID;
	public EffectFullArgumentElements getEffectFullArgumentAccess() {
		return pEffectFullArgument;
	}
	
	public ParserRule getEffectFullArgumentRule() {
		return getEffectFullArgumentAccess().getRule();
	}
	
	//Argument:
	//	type=ValueType name=ID;
	public ArgumentElements getArgumentAccess() {
		return pArgument;
	}
	
	public ParserRule getArgumentRule() {
		return getArgumentAccess().getRule();
	}
	
	//FunctionBodyPure:
	//	EmptyFunctionBody | CompositionFunctionBodyPure;
	public FunctionBodyPureElements getFunctionBodyPureAccess() {
		return pFunctionBodyPure;
	}
	
	public ParserRule getFunctionBodyPureRule() {
		return getFunctionBodyPureAccess().getRule();
	}
	
	//FunctionBodyEffectFull:
	//	EmptyFunctionBody | CompositionFunctionBodyEffect;
	public FunctionBodyEffectFullElements getFunctionBodyEffectFullAccess() {
		return pFunctionBodyEffectFull;
	}
	
	public ParserRule getFunctionBodyEffectFullRule() {
		return getFunctionBodyEffectFullAccess().getRule();
	}
	
	//EmptyFunctionBody:
	//	{EmptyFunctionBody} 'Undefined';
	public EmptyFunctionBodyElements getEmptyFunctionBodyAccess() {
		return pEmptyFunctionBody;
	}
	
	public ParserRule getEmptyFunctionBodyRule() {
		return getEmptyFunctionBodyAccess().getRule();
	}
	
	//CompositionFunctionBodyPure:
	//	referenceElement=[PureFunctionDefinition] functionChain+=CompositionFunctionBodyPureFactor+
	//	| primitiveElement=PrimitivePureFunction functionChain+=CompositionFunctionBodyPureFactor+;
	public CompositionFunctionBodyPureElements getCompositionFunctionBodyPureAccess() {
		return pCompositionFunctionBodyPure;
	}
	
	public ParserRule getCompositionFunctionBodyPureRule() {
		return getCompositionFunctionBodyPureAccess().getRule();
	}
	
	//CompositionFunctionBodyPureFactor:
	//	'|>' referenceElement=[PureFunctionDefinition] | '|>' PrimitiveElement=PrimitivePureFunction;
	public CompositionFunctionBodyPureFactorElements getCompositionFunctionBodyPureFactorAccess() {
		return pCompositionFunctionBodyPureFactor;
	}
	
	public ParserRule getCompositionFunctionBodyPureFactorRule() {
		return getCompositionFunctionBodyPureFactorAccess().getRule();
	}
	
	//CompositionFunctionBodyEffect:
	//	referenceElement=[EffectFullReference] functionChain+=CompositionFunctionBodyEffectFullFactor+
	//	| primitiveElement=PrimitiveFunction functionChain+=CompositionFunctionBodyEffectFullFactor+;
	public CompositionFunctionBodyEffectElements getCompositionFunctionBodyEffectAccess() {
		return pCompositionFunctionBodyEffect;
	}
	
	public ParserRule getCompositionFunctionBodyEffectRule() {
		return getCompositionFunctionBodyEffectAccess().getRule();
	}
	
	//CompositionFunctionBodyEffectFullFactor:
	//	'>>=' referenceElement=[EffectFullReference] | '>>=' PrimitiveElement=PrimitiveFunction;
	public CompositionFunctionBodyEffectFullFactorElements getCompositionFunctionBodyEffectFullFactorAccess() {
		return pCompositionFunctionBodyEffectFullFactor;
	}
	
	public ParserRule getCompositionFunctionBodyEffectFullFactorRule() {
		return getCompositionFunctionBodyEffectFullFactorAccess().getRule();
	}
	
	////////////////////////////////////////////////////////////////////////
	//// Types
	////////////////////////////////////////////////////////////////////////
	//IOType:
	//	'IO' type=Type;
	public IOTypeElements getIOTypeAccess() {
		return pIOType;
	}
	
	public ParserRule getIOTypeRule() {
		return getIOTypeAccess().getRule();
	}
	
	//ValueType:
	//	IntegerType | StringType | DataType | PureFunctionType | PureAlgebraicType;
	public ValueTypeElements getValueTypeAccess() {
		return pValueType;
	}
	
	public ParserRule getValueTypeRule() {
		return getValueTypeAccess().getRule();
	}
	
	//Type:
	//	ValueType | EffectFullType;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//EffectFullType:
	//	UnitType | EffectFullFunctionType | EffectFullDataType | EffectFullAlgebraicType | IOType | VoidType;
	public EffectFullTypeElements getEffectFullTypeAccess() {
		return pEffectFullType;
	}
	
	public ParserRule getEffectFullTypeRule() {
		return getEffectFullTypeAccess().getRule();
	}
	
	//VoidType:
	//	{VoidType};
	public VoidTypeElements getVoidTypeAccess() {
		return pVoidType;
	}
	
	public ParserRule getVoidTypeRule() {
		return getVoidTypeAccess().getRule();
	}
	
	//IntegerType:
	//	{IntegerType} type="int";
	public IntegerTypeElements getIntegerTypeAccess() {
		return pIntegerType;
	}
	
	public ParserRule getIntegerTypeRule() {
		return getIntegerTypeAccess().getRule();
	}
	
	//StringType:
	//	{StringType} type="String";
	public StringTypeElements getStringTypeAccess() {
		return pStringType;
	}
	
	public ParserRule getStringTypeRule() {
		return getStringTypeAccess().getRule();
	}
	
	//UnitType:
	//	{UnitType} type="Unit";
	public UnitTypeElements getUnitTypeAccess() {
		return pUnitType;
	}
	
	public ParserRule getUnitTypeRule() {
		return getUnitTypeAccess().getRule();
	}
	
	//DataType:
	//	{DataType} 'ref' type=[PureData];
	public DataTypeElements getDataTypeAccess() {
		return pDataType;
	}
	
	public ParserRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}
	
	//EffectFullDataType:
	//	{EffectFullDataType} 'refIO' type=[EffectFullData];
	public EffectFullDataTypeElements getEffectFullDataTypeAccess() {
		return pEffectFullDataType;
	}
	
	public ParserRule getEffectFullDataTypeRule() {
		return getEffectFullDataTypeAccess().getRule();
	}
	
	//PureFunctionType:
	//	{PureFunctionType} 'F' '<' argType=ValueType ',' returnType=ValueType '>';
	public PureFunctionTypeElements getPureFunctionTypeAccess() {
		return pPureFunctionType;
	}
	
	public ParserRule getPureFunctionTypeRule() {
		return getPureFunctionTypeAccess().getRule();
	}
	
	//EffectFullFunctionType:
	//	{EffectFullFunctionType} 'FIO' '<' argType=Type ',' returnType=IOType '>';
	public EffectFullFunctionTypeElements getEffectFullFunctionTypeAccess() {
		return pEffectFullFunctionType;
	}
	
	public ParserRule getEffectFullFunctionTypeRule() {
		return getEffectFullFunctionTypeAccess().getRule();
	}
	
	//PureAlgebraicType:
	//	'[' pureAdtElement1=ValueType pureAdtElement2=(PureSumTypeFactor | PureProdTypeFactor) ']';
	public PureAlgebraicTypeElements getPureAlgebraicTypeAccess() {
		return pPureAlgebraicType;
	}
	
	public ParserRule getPureAlgebraicTypeRule() {
		return getPureAlgebraicTypeAccess().getRule();
	}
	
	//PureSumTypeFactor:
	//	'+' adtElement=ValueType;
	public PureSumTypeFactorElements getPureSumTypeFactorAccess() {
		return pPureSumTypeFactor;
	}
	
	public ParserRule getPureSumTypeFactorRule() {
		return getPureSumTypeFactorAccess().getRule();
	}
	
	//PureProdTypeFactor:
	//	'*' adtElement=ValueType;
	public PureProdTypeFactorElements getPureProdTypeFactorAccess() {
		return pPureProdTypeFactor;
	}
	
	public ParserRule getPureProdTypeFactorRule() {
		return getPureProdTypeFactorAccess().getRule();
	}
	
	//EffectFullAlgebraicType:
	//	'[' effectFullAdtElement1=IOType effectFullAdtElement2=(EffectFullSumTypeFactor | EffectFullProdTypeFactor) ']';
	public EffectFullAlgebraicTypeElements getEffectFullAlgebraicTypeAccess() {
		return pEffectFullAlgebraicType;
	}
	
	public ParserRule getEffectFullAlgebraicTypeRule() {
		return getEffectFullAlgebraicTypeAccess().getRule();
	}
	
	//EffectFullSumTypeFactor:
	//	'+' adtElement=IOType;
	public EffectFullSumTypeFactorElements getEffectFullSumTypeFactorAccess() {
		return pEffectFullSumTypeFactor;
	}
	
	public ParserRule getEffectFullSumTypeFactorRule() {
		return getEffectFullSumTypeFactorAccess().getRule();
	}
	
	//EffectFullProdTypeFactor:
	//	'*' adtElement=IOType;
	public EffectFullProdTypeFactorElements getEffectFullProdTypeFactorAccess() {
		return pEffectFullProdTypeFactor;
	}
	
	public ParserRule getEffectFullProdTypeFactorRule() {
		return getEffectFullProdTypeFactorAccess().getRule();
	}
	
	//////////////////////////////////////////////////////////////////////
	//// Values
	//////////////////////////////////////////////////////////////////////
	//EffectFullExpression:
	//	{RecursiveEffectFullExpression} 'IO' '[' exp=EffectFullExpression ']'
	//	| 'IO' '(' Expression ')'
	//	| UnitValue
	//	| EffectFullFunctionValue
	//	| EffectFullDataValue;
	public EffectFullExpressionElements getEffectFullExpressionAccess() {
		return pEffectFullExpression;
	}
	
	public ParserRule getEffectFullExpressionRule() {
		return getEffectFullExpressionAccess().getRule();
	}
	
	//UnitValue UnitType:
	//	{UnitType} '()'
	public UnitValueElements getUnitValueAccess() {
		return pUnitValue;
	}
	
	public ParserRule getUnitValueRule() {
		return getUnitValueAccess().getRule();
	}
	
	//EffectFullFunctionValue EffectFullFunctionType:
	//	value=EffectFullLambda
	public EffectFullFunctionValueElements getEffectFullFunctionValueAccess() {
		return pEffectFullFunctionValue;
	}
	
	public ParserRule getEffectFullFunctionValueRule() {
		return getEffectFullFunctionValueAccess().getRule();
	}
	
	//EffectFullValueRef:
	//	{EffectFullValueRef} value=[EffectFullValue];
	public EffectFullValueRefElements getEffectFullValueRefAccess() {
		return pEffectFullValueRef;
	}
	
	public ParserRule getEffectFullValueRefRule() {
		return getEffectFullValueRefAccess().getRule();
	}
	
	//EffectFullLambda EffectFullFunctionDefinition:
	//	{EffectFullLambda} '[' arg=EffectFullArgument ']' ':' '{' functionBody=CompositionFunctionBodyEffect '}'
	//	| {EffectFullLambda} '[' ']' ':' '{' functionBody=CompositionFunctionBodyEffect '}'
	public EffectFullLambdaElements getEffectFullLambdaAccess() {
		return pEffectFullLambda;
	}
	
	public ParserRule getEffectFullLambdaRule() {
		return getEffectFullLambdaAccess().getRule();
	}
	
	//Expression:
	//	IntValue
	//	| StringValue
	//	| DataValue
	//	| FunctionValue;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//IntValue IntegerType:
	//	{IntegerType} value=INT
	public IntValueElements getIntValueAccess() {
		return pIntValue;
	}
	
	public ParserRule getIntValueRule() {
		return getIntValueAccess().getRule();
	}
	
	//StringValue StringType:
	//	{StringType} value=STRING
	public StringValueElements getStringValueAccess() {
		return pStringValue;
	}
	
	public ParserRule getStringValueRule() {
		return getStringValueAccess().getRule();
	}
	
	//FunctionValue PureFunctionType:
	//	value=PureLambda
	public FunctionValueElements getFunctionValueAccess() {
		return pFunctionValue;
	}
	
	public ParserRule getFunctionValueRule() {
		return getFunctionValueAccess().getRule();
	}
	
	//DataValue DataType:
	//	{DataValue} type=[PureData] '(' value=PureAdtValue ')'
	public DataValueElements getDataValueAccess() {
		return pDataValue;
	}
	
	public ParserRule getDataValueRule() {
		return getDataValueAccess().getRule();
	}
	
	//EffectFullDataValue EffectFullDataType:
	//	{EffectFullDataValue} type=[EffectFullData] '(' value=EffectFullAdtValue ')'
	public EffectFullDataValueElements getEffectFullDataValueAccess() {
		return pEffectFullDataValue;
	}
	
	public ParserRule getEffectFullDataValueRule() {
		return getEffectFullDataValueAccess().getRule();
	}
	
	//PureValueRef:
	//	{PureValueRef} value=[PureValue];
	public PureValueRefElements getPureValueRefAccess() {
		return pPureValueRef;
	}
	
	public ParserRule getPureValueRefRule() {
		return getPureValueRefAccess().getRule();
	}
	
	//PureLambda PureFunctionDefinition:
	//	{PureLambda} '(' arg=Argument ')' ':' '{' functionBody=CompositionFunctionBodyPure '}'
	//	| {PureLambda} '(' ')' ':' '{' functionBody=CompositionFunctionBodyPure '}'
	public PureLambdaElements getPureLambdaAccess() {
		return pPureLambda;
	}
	
	public ParserRule getPureLambdaRule() {
		return getPureLambdaAccess().getRule();
	}
	
	//PureAdtValue:
	//	Expression
	//	| PureValueRef
	//	| PureSumValue
	//	| PureProdValue;
	public PureAdtValueElements getPureAdtValueAccess() {
		return pPureAdtValue;
	}
	
	public ParserRule getPureAdtValueRule() {
		return getPureAdtValueAccess().getRule();
	}
	
	//PureProdValue:
	//	'(' prodAdtElement1=PureAdtValue ',' prodAdtElement2=PureAdtValue ')';
	public PureProdValueElements getPureProdValueAccess() {
		return pPureProdValue;
	}
	
	public ParserRule getPureProdValueRule() {
		return getPureProdValueAccess().getRule();
	}
	
	//PureSumValue:
	//	'Left' '(' sumAdtElement1=PureAdtValue ')'
	//	| 'Right' '(' sumAdtElement2=PureAdtValue ')';
	public PureSumValueElements getPureSumValueAccess() {
		return pPureSumValue;
	}
	
	public ParserRule getPureSumValueRule() {
		return getPureSumValueAccess().getRule();
	}
	
	//EffectFullAdtValue:
	//	'IO' '(' innerValue=PureAdtValue ')'
	//	| 'IO' '[' innerValue=EffectFullAdtValue ']'
	//	| UnitValue
	//	| EffectFullFunctionValue
	//	| EffectFullProdValue
	//	| EffectFullValueRef
	//	| EffectFullDataValue
	//	| EffectFullSumValue;
	public EffectFullAdtValueElements getEffectFullAdtValueAccess() {
		return pEffectFullAdtValue;
	}
	
	public ParserRule getEffectFullAdtValueRule() {
		return getEffectFullAdtValueAccess().getRule();
	}
	
	//EffectFullProdValue:
	//	'(' prodAdtElement1=EffectFullAdtValue ',' prodAdtElement2=EffectFullAdtValue ')';
	public EffectFullProdValueElements getEffectFullProdValueAccess() {
		return pEffectFullProdValue;
	}
	
	public ParserRule getEffectFullProdValueRule() {
		return getEffectFullProdValueAccess().getRule();
	}
	
	//EffectFullSumValue:
	//	'Left' '(' sumAdtElement1=EffectFullAdtValue ')'
	//	| 'Right' '(' sumAdtElement2=EffectFullAdtValue ')';
	public EffectFullSumValueElements getEffectFullSumValueAccess() {
		return pEffectFullSumValue;
	}
	
	public ParserRule getEffectFullSumValueRule() {
		return getEffectFullSumValueAccess().getRule();
	}
	
	///////////////////////////////////////////////////////////////////////
	//// Primitives
	///////////////////////////////////////////////////////////////////////
	//PrimitivePureFunction:
	//	IntToString | IntPow | Plus | Minus | Times | Mod | ApplyF;
	public PrimitivePureFunctionElements getPrimitivePureFunctionAccess() {
		return pPrimitivePureFunction;
	}
	
	public ParserRule getPrimitivePureFunctionRule() {
		return getPrimitivePureFunctionAccess().getRule();
	}
	
	//IntToString:
	//	{IntToString} 'IntToString';
	public IntToStringElements getIntToStringAccess() {
		return pIntToString;
	}
	
	public ParserRule getIntToStringRule() {
		return getIntToStringAccess().getRule();
	}
	
	//IntPow:
	//	{IntPow} 'IntPow';
	public IntPowElements getIntPowAccess() {
		return pIntPow;
	}
	
	public ParserRule getIntPowRule() {
		return getIntPowAccess().getRule();
	}
	
	//Plus:
	//	{Plus} '+';
	public PlusElements getPlusAccess() {
		return pPlus;
	}
	
	public ParserRule getPlusRule() {
		return getPlusAccess().getRule();
	}
	
	//Minus:
	//	{Minus} '-';
	public MinusElements getMinusAccess() {
		return pMinus;
	}
	
	public ParserRule getMinusRule() {
		return getMinusAccess().getRule();
	}
	
	//Times:
	//	{Times} '*';
	public TimesElements getTimesAccess() {
		return pTimes;
	}
	
	public ParserRule getTimesRule() {
		return getTimesAccess().getRule();
	}
	
	//Mod:
	//	{Mod} 'mod';
	public ModElements getModAccess() {
		return pMod;
	}
	
	public ParserRule getModRule() {
		return getModAccess().getRule();
	}
	
	//ApplyF:
	//	{ApplyF} 'applyF' functionType=PureFunctionType value=ApplyFFactor;
	public ApplyFElements getApplyFAccess() {
		return pApplyF;
	}
	
	public ParserRule getApplyFRule() {
		return getApplyFAccess().getRule();
	}
	
	//ApplyFFactor:
	//	valueReference=[PureReference] | '(' valueLambda=PureLambda ')';
	public ApplyFFactorElements getApplyFFactorAccess() {
		return pApplyFFactor;
	}
	
	public ParserRule getApplyFFactorRule() {
		return getApplyFFactorAccess().getRule();
	}
	
	//PrimitiveEffectFullFunction:
	//	PrimitivePrint | ApplyFIO | PrimitiveReturn;
	public PrimitiveEffectFullFunctionElements getPrimitiveEffectFullFunctionAccess() {
		return pPrimitiveEffectFullFunction;
	}
	
	public ParserRule getPrimitiveEffectFullFunctionRule() {
		return getPrimitiveEffectFullFunctionAccess().getRule();
	}
	
	//PrimitivePrint:
	//	{PrimitivePrint} "print";
	public PrimitivePrintElements getPrimitivePrintAccess() {
		return pPrimitivePrint;
	}
	
	public ParserRule getPrimitivePrintRule() {
		return getPrimitivePrintAccess().getRule();
	}
	
	//PrimitiveEffectFullValue:
	//	PrimitiveRandom | PrimitiveTime;
	public PrimitiveEffectFullValueElements getPrimitiveEffectFullValueAccess() {
		return pPrimitiveEffectFullValue;
	}
	
	public ParserRule getPrimitiveEffectFullValueRule() {
		return getPrimitiveEffectFullValueAccess().getRule();
	}
	
	//PrimitiveRandom:
	//	{PrimitiveRandom} "randomInt";
	public PrimitiveRandomElements getPrimitiveRandomAccess() {
		return pPrimitiveRandom;
	}
	
	public ParserRule getPrimitiveRandomRule() {
		return getPrimitiveRandomAccess().getRule();
	}
	
	//PrimitiveReturn:
	//	{PrimitiveReturn} "return" type=Type;
	public PrimitiveReturnElements getPrimitiveReturnAccess() {
		return pPrimitiveReturn;
	}
	
	public ParserRule getPrimitiveReturnRule() {
		return getPrimitiveReturnAccess().getRule();
	}
	
	//PrimitiveTime:
	//	{PrimitiveTime} "currentTime";
	public PrimitiveTimeElements getPrimitiveTimeAccess() {
		return pPrimitiveTime;
	}
	
	public ParserRule getPrimitiveTimeRule() {
		return getPrimitiveTimeAccess().getRule();
	}
	
	//ApplyFIO:
	//	{ApplyFIO} 'applyFIO' functionType=EffectFullFunctionType value=ApplyFIOFactor;
	public ApplyFIOElements getApplyFIOAccess() {
		return pApplyFIO;
	}
	
	public ParserRule getApplyFIORule() {
		return getApplyFIOAccess().getRule();
	}
	
	//ApplyFIOFactor:
	//	valueReference=[EffectFullReference] | valuePrimitive=PrimitiveEffectFullValue
	//	| '(' valueLambda=EffectFullLambda ')';
	public ApplyFIOFactorElements getApplyFIOFactorAccess() {
		return pApplyFIOFactor;
	}
	
	public ParserRule getApplyFIOFactorRule() {
		return getApplyFIOFactorAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
