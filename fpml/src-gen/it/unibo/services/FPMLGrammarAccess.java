/*
 * generated by Xtext 2.10.0
 */
package it.unibo.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class FPMLGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cElementsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cElementsPureBlockParserRuleCall_0_0 = (RuleCall)cElementsAssignment_0.eContents().get(0);
		private final Assignment cElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementsEffectFullBlockParserRuleCall_1_0 = (RuleCall)cElementsAssignment_1.eContents().get(0);
		
		/////////////////////////////////////////////////////////////////
		//// Entry element
		////////////////////////////////////////////////////////////////
		//Model:
		//	elements+=PureBlock
		//	elements+=EffectFullBlock;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=PureBlock elements+=EffectFullBlock
		public Group getGroup() { return cGroup; }
		
		//elements+=PureBlock
		public Assignment getElementsAssignment_0() { return cElementsAssignment_0; }
		
		//PureBlock
		public RuleCall getElementsPureBlockParserRuleCall_0_0() { return cElementsPureBlockParserRuleCall_0_0; }
		
		//elements+=EffectFullBlock
		public Assignment getElementsAssignment_1() { return cElementsAssignment_1; }
		
		//EffectFullBlock
		public RuleCall getElementsEffectFullBlockParserRuleCall_1_0() { return cElementsEffectFullBlockParserRuleCall_1_0; }
	}
	public class PureBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.PureBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsPureDataBlockParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		private final Assignment cElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementsPureFunctionBlockParserRuleCall_3_0 = (RuleCall)cElementsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////////////////////////////////////////////////////////////////
		//// Outer Blocks
		////////////////////////////////////////////////////////////////
		//PureBlock:
		//	'Pure' '{'
		//	elements+=PureDataBlock
		//	elements+=PureFunctionBlock
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Pure' '{' elements+=PureDataBlock elements+=PureFunctionBlock '}'
		public Group getGroup() { return cGroup; }
		
		//'Pure'
		public Keyword getPureKeyword_0() { return cPureKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//elements+=PureDataBlock
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }
		
		//PureDataBlock
		public RuleCall getElementsPureDataBlockParserRuleCall_2_0() { return cElementsPureDataBlockParserRuleCall_2_0; }
		
		//elements+=PureFunctionBlock
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }
		
		//PureFunctionBlock
		public RuleCall getElementsPureFunctionBlockParserRuleCall_3_0() { return cElementsPureFunctionBlockParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class PureFunctionBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.PureFunctionBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFeaturesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFeaturesPureFunctionDefinitionParserRuleCall_2_0 = (RuleCall)cFeaturesAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//PureFunctionBlock:
		//	'Functions' '{'
		//	features+=PureFunctionDefinition*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Functions' '{' features+=PureFunctionDefinition* '}'
		public Group getGroup() { return cGroup; }
		
		//'Functions'
		public Keyword getFunctionsKeyword_0() { return cFunctionsKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//features+=PureFunctionDefinition*
		public Assignment getFeaturesAssignment_2() { return cFeaturesAssignment_2; }
		
		//PureFunctionDefinition
		public RuleCall getFeaturesPureFunctionDefinitionParserRuleCall_2_0() { return cFeaturesPureFunctionDefinitionParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class PureDataBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.PureDataBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDataKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsPureDataParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValuePureValueBlockParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//PureDataBlock:
		//	'Data' '{'
		//	elements+=PureData*
		//	value=PureValueBlock
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Data' '{' elements+=PureData* value=PureValueBlock '}'
		public Group getGroup() { return cGroup; }
		
		//'Data'
		public Keyword getDataKeyword_0() { return cDataKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//elements+=PureData*
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }
		
		//PureData
		public RuleCall getElementsPureDataParserRuleCall_2_0() { return cElementsPureDataParserRuleCall_2_0; }
		
		//value=PureValueBlock
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//PureValueBlock
		public RuleCall getValuePureValueBlockParserRuleCall_3_0() { return cValuePureValueBlockParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class PureValueBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.PureValueBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cValueKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsPureValueParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//PureValueBlock:
		//	'Value' '{'
		//	elements+=PureValue*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Value' '{' elements+=PureValue* '}'
		public Group getGroup() { return cGroup; }
		
		//'Value'
		public Keyword getValueKeyword_0() { return cValueKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//elements+=PureValue*
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }
		
		//PureValue
		public RuleCall getElementsPureValueParserRuleCall_2_0() { return cElementsPureValueParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class EffectFullBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.EffectFullBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEffectsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsEffectFullDataBlockParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		private final Assignment cElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementsEffectFullFunctionBlockParserRuleCall_3_0 = (RuleCall)cElementsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//EffectFullBlock:
		//	'Effects' '{'
		//	elements+=EffectFullDataBlock
		//	elements+=EffectFullFunctionBlock
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Effects' '{' elements+=EffectFullDataBlock elements+=EffectFullFunctionBlock '}'
		public Group getGroup() { return cGroup; }
		
		//'Effects'
		public Keyword getEffectsKeyword_0() { return cEffectsKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//elements+=EffectFullDataBlock
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }
		
		//EffectFullDataBlock
		public RuleCall getElementsEffectFullDataBlockParserRuleCall_2_0() { return cElementsEffectFullDataBlockParserRuleCall_2_0; }
		
		//elements+=EffectFullFunctionBlock
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }
		
		//EffectFullFunctionBlock
		public RuleCall getElementsEffectFullFunctionBlockParserRuleCall_3_0() { return cElementsEffectFullFunctionBlockParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class EffectFullDataBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.EffectFullDataBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDataKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsEffectFullDataParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueEffectFullValueBlockParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//EffectFullDataBlock:
		//	'Data' '{'
		//	elements+=EffectFullData*
		//	value=EffectFullValueBlock
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Data' '{' elements+=EffectFullData* value=EffectFullValueBlock '}'
		public Group getGroup() { return cGroup; }
		
		//'Data'
		public Keyword getDataKeyword_0() { return cDataKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//elements+=EffectFullData*
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }
		
		//EffectFullData
		public RuleCall getElementsEffectFullDataParserRuleCall_2_0() { return cElementsEffectFullDataParserRuleCall_2_0; }
		
		//value=EffectFullValueBlock
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//EffectFullValueBlock
		public RuleCall getValueEffectFullValueBlockParserRuleCall_3_0() { return cValueEffectFullValueBlockParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class EffectFullValueBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.EffectFullValueBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cValueKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsEffectFullValueParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//EffectFullValueBlock:
		//	'Value' '{'
		//	elements+=EffectFullValue*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Value' '{' elements+=EffectFullValue* '}'
		public Group getGroup() { return cGroup; }
		
		//'Value'
		public Keyword getValueKeyword_0() { return cValueKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//elements+=EffectFullValue*
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }
		
		//EffectFullValue
		public RuleCall getElementsEffectFullValueParserRuleCall_2_0() { return cElementsEffectFullValueParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class EffectFullFunctionBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.EffectFullFunctionBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFeaturesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFeaturesEffectFullFunctionDefinitionParserRuleCall_2_0 = (RuleCall)cFeaturesAssignment_2.eContents().get(0);
		private final Assignment cMainAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMainMainFuncParserRuleCall_3_0 = (RuleCall)cMainAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//EffectFullFunctionBlock:
		//	'Functions' '{'
		//	features+=EffectFullFunctionDefinition*
		//	main=MainFunc
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Functions' '{' features+=EffectFullFunctionDefinition* main=MainFunc '}'
		public Group getGroup() { return cGroup; }
		
		//'Functions'
		public Keyword getFunctionsKeyword_0() { return cFunctionsKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//features+=EffectFullFunctionDefinition*
		public Assignment getFeaturesAssignment_2() { return cFeaturesAssignment_2; }
		
		//EffectFullFunctionDefinition
		public RuleCall getFeaturesEffectFullFunctionDefinitionParserRuleCall_2_0() { return cFeaturesEffectFullFunctionDefinitionParserRuleCall_2_0; }
		
		//main=MainFunc
		public Assignment getMainAssignment_3() { return cMainAssignment_3; }
		
		//MainFunc
		public RuleCall getMainMainFuncParserRuleCall_3_0() { return cMainMainFuncParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class PureDataElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.PureData");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cContentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cContentValueTypeParserRuleCall_2_0 = (RuleCall)cContentAssignment_2.eContents().get(0);
		
		///////////////////////////////////////////////////////////////////
		//// Outer Block Elements
		///////////////////////////////////////////////////////////////////
		//PureData:
		//	name=ID ':' content=ValueType;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' content=ValueType
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//content=ValueType
		public Assignment getContentAssignment_2() { return cContentAssignment_2; }
		
		//ValueType
		public RuleCall getContentValueTypeParserRuleCall_2_0() { return cContentValueTypeParserRuleCall_2_0; }
	}
	public class PureValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.PureValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPureValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueExpressionParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//PureValue PureFunctionDefinition:
		//	{PureValue} name=ID ':' value=Expression
		@Override public ParserRule getRule() { return rule; }
		
		//{PureValue} name=ID ':' value=Expression
		public Group getGroup() { return cGroup; }
		
		//{PureValue}
		public Action getPureValueAction_0() { return cPureValueAction_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//value=Expression
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_3_0() { return cValueExpressionParserRuleCall_3_0; }
	}
	public class EffectFullDataElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.EffectFullData");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cContentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cContentEffectFullTypeParserRuleCall_2_0 = (RuleCall)cContentAssignment_2.eContents().get(0);
		
		//EffectFullData:
		//	name=ID ':' content=EffectFullType;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' content=EffectFullType
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//content=EffectFullType
		public Assignment getContentAssignment_2() { return cContentAssignment_2; }
		
		//EffectFullType
		public RuleCall getContentEffectFullTypeParserRuleCall_2_0() { return cContentEffectFullTypeParserRuleCall_2_0; }
	}
	public class EffectFullValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.EffectFullValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEffectFullValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueEffectFullExpressionParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//EffectFullValue EffectFullFunctionDefinition:
		//	{EffectFullValue} name=ID ':' value=EffectFullExpression
		@Override public ParserRule getRule() { return rule; }
		
		//{EffectFullValue} name=ID ':' value=EffectFullExpression
		public Group getGroup() { return cGroup; }
		
		//{EffectFullValue}
		public Action getEffectFullValueAction_0() { return cEffectFullValueAction_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//value=EffectFullExpression
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//EffectFullExpression
		public RuleCall getValueEffectFullExpressionParserRuleCall_3_0() { return cValueEffectFullExpressionParserRuleCall_3_0; }
	}
	public class PureFunctionDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.PureFunctionDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReturnTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReturnTypeValueTypeParserRuleCall_1_0 = (RuleCall)cReturnTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cArgAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cArgPureArgumentParserRuleCall_4_0 = (RuleCall)cArgAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cHigherOrderArgAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cHigherOrderArgAdditionalPureArgumentParserRuleCall_5_1_0 = (RuleCall)cHigherOrderArgAssignment_5_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cColonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cLeftCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cFunctionBodyAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cFunctionBodyFunctionBodyPureParserRuleCall_9_0 = (RuleCall)cFunctionBodyAssignment_9.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//PureFunctionDefinition:
		//	'def' returnType=ValueType name=ID '(' arg=PureArgument (',' higherOrderArg=AdditionalPureArgument)? ')' ':' '{'
		//	functionBody=FunctionBodyPure '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'def' returnType=ValueType name=ID '(' arg=PureArgument (',' higherOrderArg=AdditionalPureArgument)? ')' ':' '{'
		//functionBody=FunctionBodyPure '}'
		public Group getGroup() { return cGroup; }
		
		//'def'
		public Keyword getDefKeyword_0() { return cDefKeyword_0; }
		
		//returnType=ValueType
		public Assignment getReturnTypeAssignment_1() { return cReturnTypeAssignment_1; }
		
		//ValueType
		public RuleCall getReturnTypeValueTypeParserRuleCall_1_0() { return cReturnTypeValueTypeParserRuleCall_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//arg=PureArgument
		public Assignment getArgAssignment_4() { return cArgAssignment_4; }
		
		//PureArgument
		public RuleCall getArgPureArgumentParserRuleCall_4_0() { return cArgPureArgumentParserRuleCall_4_0; }
		
		//(',' higherOrderArg=AdditionalPureArgument)?
		public Group getGroup_5() { return cGroup_5; }
		
		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//higherOrderArg=AdditionalPureArgument
		public Assignment getHigherOrderArgAssignment_5_1() { return cHigherOrderArgAssignment_5_1; }
		
		//AdditionalPureArgument
		public RuleCall getHigherOrderArgAdditionalPureArgumentParserRuleCall_5_1_0() { return cHigherOrderArgAdditionalPureArgumentParserRuleCall_5_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
		
		//':'
		public Keyword getColonKeyword_7() { return cColonKeyword_7; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_8() { return cLeftCurlyBracketKeyword_8; }
		
		//functionBody=FunctionBodyPure
		public Assignment getFunctionBodyAssignment_9() { return cFunctionBodyAssignment_9; }
		
		//FunctionBodyPure
		public RuleCall getFunctionBodyFunctionBodyPureParserRuleCall_9_0() { return cFunctionBodyFunctionBodyPureParserRuleCall_9_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}
	public class EffectFullFunctionDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.EffectFullFunctionDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReturnTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReturnTypeIOTypeParserRuleCall_1_0 = (RuleCall)cReturnTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cArgAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cArgArgumentParserRuleCall_4_0 = (RuleCall)cArgAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cHigherOrderArgAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cHigherOrderArgAdditionalEffectFullArgumentParserRuleCall_5_1_0 = (RuleCall)cHigherOrderArgAssignment_5_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cColonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cLeftCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cFunctionBodyAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cFunctionBodyFunctionBodyEffectFullParserRuleCall_9_0 = (RuleCall)cFunctionBodyAssignment_9.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//EffectFullFunctionDefinition:
		//	'def' returnType=IOType name=ID '(' arg=Argument (',' higherOrderArg=AdditionalEffectFullArgument)? ')' ':' '{'
		//	functionBody=FunctionBodyEffectFull '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'def' returnType=IOType name=ID '(' arg=Argument (',' higherOrderArg=AdditionalEffectFullArgument)? ')' ':' '{'
		//functionBody=FunctionBodyEffectFull '}'
		public Group getGroup() { return cGroup; }
		
		//'def'
		public Keyword getDefKeyword_0() { return cDefKeyword_0; }
		
		//returnType=IOType
		public Assignment getReturnTypeAssignment_1() { return cReturnTypeAssignment_1; }
		
		//IOType
		public RuleCall getReturnTypeIOTypeParserRuleCall_1_0() { return cReturnTypeIOTypeParserRuleCall_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//arg=Argument
		public Assignment getArgAssignment_4() { return cArgAssignment_4; }
		
		//Argument
		public RuleCall getArgArgumentParserRuleCall_4_0() { return cArgArgumentParserRuleCall_4_0; }
		
		//(',' higherOrderArg=AdditionalEffectFullArgument)?
		public Group getGroup_5() { return cGroup_5; }
		
		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//higherOrderArg=AdditionalEffectFullArgument
		public Assignment getHigherOrderArgAssignment_5_1() { return cHigherOrderArgAssignment_5_1; }
		
		//AdditionalEffectFullArgument
		public RuleCall getHigherOrderArgAdditionalEffectFullArgumentParserRuleCall_5_1_0() { return cHigherOrderArgAdditionalEffectFullArgumentParserRuleCall_5_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
		
		//':'
		public Keyword getColonKeyword_7() { return cColonKeyword_7; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_8() { return cLeftCurlyBracketKeyword_8; }
		
		//functionBody=FunctionBodyEffectFull
		public Assignment getFunctionBodyAssignment_9() { return cFunctionBodyAssignment_9; }
		
		//FunctionBodyEffectFull
		public RuleCall getFunctionBodyFunctionBodyEffectFullParserRuleCall_9_0() { return cFunctionBodyFunctionBodyEffectFullParserRuleCall_9_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}
	public class MainFuncElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.MainFunc");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIOKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReturnTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReturnTypeUnitTypeParserRuleCall_1_0 = (RuleCall)cReturnTypeAssignment_1.eContents().get(0);
		private final Keyword cMainKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cFunctionBodyAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cFunctionBodyFunctionBodyEffectFullParserRuleCall_5_0 = (RuleCall)cFunctionBodyAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//MainFunc:
		//	'IO' returnType=UnitType 'main' ':' '{' functionBody=FunctionBodyEffectFull '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'IO' returnType=UnitType 'main' ':' '{' functionBody=FunctionBodyEffectFull '}'
		public Group getGroup() { return cGroup; }
		
		//'IO'
		public Keyword getIOKeyword_0() { return cIOKeyword_0; }
		
		//returnType=UnitType
		public Assignment getReturnTypeAssignment_1() { return cReturnTypeAssignment_1; }
		
		//UnitType
		public RuleCall getReturnTypeUnitTypeParserRuleCall_1_0() { return cReturnTypeUnitTypeParserRuleCall_1_0; }
		
		//'main'
		public Keyword getMainKeyword_2() { return cMainKeyword_2; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//functionBody=FunctionBodyEffectFull
		public Assignment getFunctionBodyAssignment_5() { return cFunctionBodyAssignment_5; }
		
		//FunctionBodyEffectFull
		public RuleCall getFunctionBodyFunctionBodyEffectFullParserRuleCall_5_0() { return cFunctionBodyFunctionBodyEffectFullParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class AdditionalPureArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.AdditionalPureArgument");
		private final Assignment cArg2Assignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cArg2PureArgumentParserRuleCall_0 = (RuleCall)cArg2Assignment.eContents().get(0);
		
		//AdditionalPureArgument:
		//	arg2=PureArgument;
		@Override public ParserRule getRule() { return rule; }
		
		//arg2=PureArgument
		public Assignment getArg2Assignment() { return cArg2Assignment; }
		
		//PureArgument
		public RuleCall getArg2PureArgumentParserRuleCall_0() { return cArg2PureArgumentParserRuleCall_0; }
	}
	public class AdditionalEffectFullArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.AdditionalEffectFullArgument");
		private final Assignment cArg2Assignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cArg2ArgumentParserRuleCall_0 = (RuleCall)cArg2Assignment.eContents().get(0);
		
		//AdditionalEffectFullArgument:
		//	arg2=Argument;
		@Override public ParserRule getRule() { return rule; }
		
		//arg2=Argument
		public Assignment getArg2Assignment() { return cArg2Assignment; }
		
		//Argument
		public RuleCall getArg2ArgumentParserRuleCall_0() { return cArg2ArgumentParserRuleCall_0; }
	}
	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.Function");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEffectFullFunctionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPureFunctionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		/////////////////////////////////////////////////////////////////////////////////////////////////
		//// Aggregate Types
		/////////////////////////////////////////////////////////////////////////////////////////////////
		//Function:
		//	EffectFullFunction | PureFunction;
		@Override public ParserRule getRule() { return rule; }
		
		//EffectFullFunction | PureFunction
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EffectFullFunction
		public RuleCall getEffectFullFunctionParserRuleCall_0() { return cEffectFullFunctionParserRuleCall_0; }
		
		//PureFunction
		public RuleCall getPureFunctionParserRuleCall_1() { return cPureFunctionParserRuleCall_1; }
	}
	public class PureFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.PureFunction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPureFunctionDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPrimitivePureFunctionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPureArgumentParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cPureValueParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//PureFunction:
		//	PureFunctionDefinition | PrimitivePureFunction | PureArgument | Expression | PureValue;
		@Override public ParserRule getRule() { return rule; }
		
		//PureFunctionDefinition | PrimitivePureFunction | PureArgument | Expression | PureValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PureFunctionDefinition
		public RuleCall getPureFunctionDefinitionParserRuleCall_0() { return cPureFunctionDefinitionParserRuleCall_0; }
		
		//PrimitivePureFunction
		public RuleCall getPrimitivePureFunctionParserRuleCall_1() { return cPrimitivePureFunctionParserRuleCall_1; }
		
		//PureArgument
		public RuleCall getPureArgumentParserRuleCall_2() { return cPureArgumentParserRuleCall_2; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_3() { return cExpressionParserRuleCall_3; }
		
		//PureValue
		public RuleCall getPureValueParserRuleCall_4() { return cPureValueParserRuleCall_4; }
	}
	public class EffectFullFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.EffectFullFunction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEffectFullFunctionDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPrimitiveEffectFullFunctionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEffectFullValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cEffectFullArgumentParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//EffectFullFunction:
		//	EffectFullFunctionDefinition | PrimitiveEffectFullFunction | EffectFullValue | EffectFullArgument;
		@Override public ParserRule getRule() { return rule; }
		
		//EffectFullFunctionDefinition | PrimitiveEffectFullFunction | EffectFullValue | EffectFullArgument
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EffectFullFunctionDefinition
		public RuleCall getEffectFullFunctionDefinitionParserRuleCall_0() { return cEffectFullFunctionDefinitionParserRuleCall_0; }
		
		//PrimitiveEffectFullFunction
		public RuleCall getPrimitiveEffectFullFunctionParserRuleCall_1() { return cPrimitiveEffectFullFunctionParserRuleCall_1; }
		
		//EffectFullValue
		public RuleCall getEffectFullValueParserRuleCall_2() { return cEffectFullValueParserRuleCall_2; }
		
		//EffectFullArgument
		public RuleCall getEffectFullArgumentParserRuleCall_3() { return cEffectFullArgumentParserRuleCall_3; }
	}
	public class PrimitiveFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.PrimitiveFunction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimitivePureFunctionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEffectFullPrimitiveParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PrimitiveFunction:
		//	PrimitivePureFunction | EffectFullPrimitive;
		@Override public ParserRule getRule() { return rule; }
		
		//PrimitivePureFunction | EffectFullPrimitive
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PrimitivePureFunction
		public RuleCall getPrimitivePureFunctionParserRuleCall_0() { return cPrimitivePureFunctionParserRuleCall_0; }
		
		//EffectFullPrimitive
		public RuleCall getEffectFullPrimitiveParserRuleCall_1() { return cEffectFullPrimitiveParserRuleCall_1; }
	}
	public class EffectFullPrimitiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.EffectFullPrimitive");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimitiveEffectFullFunctionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPrimitiveEffectFullValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EffectFullPrimitive:
		//	PrimitiveEffectFullFunction | PrimitiveEffectFullValue;
		@Override public ParserRule getRule() { return rule; }
		
		//PrimitiveEffectFullFunction | PrimitiveEffectFullValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PrimitiveEffectFullFunction
		public RuleCall getPrimitiveEffectFullFunctionParserRuleCall_0() { return cPrimitiveEffectFullFunctionParserRuleCall_0; }
		
		//PrimitiveEffectFullValue
		public RuleCall getPrimitiveEffectFullValueParserRuleCall_1() { return cPrimitiveEffectFullValueParserRuleCall_1; }
	}
	public class EffectFullBodyContentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.EffectFullBodyContent");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEffectFullFunctionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEffectFullPrimitiveParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEffectFullExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//EffectFullBodyContent:
		//	EffectFullFunction | EffectFullPrimitive | EffectFullExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//EffectFullFunction | EffectFullPrimitive | EffectFullExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EffectFullFunction
		public RuleCall getEffectFullFunctionParserRuleCall_0() { return cEffectFullFunctionParserRuleCall_0; }
		
		//EffectFullPrimitive
		public RuleCall getEffectFullPrimitiveParserRuleCall_1() { return cEffectFullPrimitiveParserRuleCall_1; }
		
		//EffectFullExpression
		public RuleCall getEffectFullExpressionParserRuleCall_2() { return cEffectFullExpressionParserRuleCall_2; }
	}
	public class ArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.Argument");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEffectFullArgumentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPureArgumentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		/////////////////////////////////////////////////////////////////////
		//// Function Body Elements
		/////////////////////////////////////////////////////////////////////
		//Argument:
		//	EffectFullArgument | PureArgument;
		@Override public ParserRule getRule() { return rule; }
		
		//EffectFullArgument | PureArgument
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EffectFullArgument
		public RuleCall getEffectFullArgumentParserRuleCall_0() { return cEffectFullArgumentParserRuleCall_0; }
		
		//PureArgument
		public RuleCall getPureArgumentParserRuleCall_1() { return cPureArgumentParserRuleCall_1; }
	}
	public class EffectFullArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.EffectFullArgument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeEffectFullTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//EffectFullArgument:
		//	type=EffectFullType name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//type=EffectFullType name=ID
		public Group getGroup() { return cGroup; }
		
		//type=EffectFullType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//EffectFullType
		public RuleCall getTypeEffectFullTypeParserRuleCall_0_0() { return cTypeEffectFullTypeParserRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class PureArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.PureArgument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeValueTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//PureArgument:
		//	type=ValueType name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//type=ValueType name=ID
		public Group getGroup() { return cGroup; }
		
		//type=ValueType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//ValueType
		public RuleCall getTypeValueTypeParserRuleCall_0_0() { return cTypeValueTypeParserRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class FunctionBodyPureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.FunctionBodyPure");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEmptyFunctionBodyParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCompositionFunctionBodyPureParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//FunctionBodyPure:
		//	EmptyFunctionBody | CompositionFunctionBodyPure;
		@Override public ParserRule getRule() { return rule; }
		
		//EmptyFunctionBody | CompositionFunctionBodyPure
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EmptyFunctionBody
		public RuleCall getEmptyFunctionBodyParserRuleCall_0() { return cEmptyFunctionBodyParserRuleCall_0; }
		
		//CompositionFunctionBodyPure
		public RuleCall getCompositionFunctionBodyPureParserRuleCall_1() { return cCompositionFunctionBodyPureParserRuleCall_1; }
	}
	public class FunctionBodyEffectFullElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.FunctionBodyEffectFull");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEmptyFunctionBodyParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCompositionFunctionBodyEffectParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//FunctionBodyEffectFull:
		//	EmptyFunctionBody | CompositionFunctionBodyEffect;
		@Override public ParserRule getRule() { return rule; }
		
		//EmptyFunctionBody | CompositionFunctionBodyEffect
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EmptyFunctionBody
		public RuleCall getEmptyFunctionBodyParserRuleCall_0() { return cEmptyFunctionBodyParserRuleCall_0; }
		
		//CompositionFunctionBodyEffect
		public RuleCall getCompositionFunctionBodyEffectParserRuleCall_1() { return cCompositionFunctionBodyEffectParserRuleCall_1; }
	}
	public class EmptyFunctionBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.EmptyFunctionBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEmptyFunctionBodyAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cUndefinedKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//EmptyFunctionBody:
		//	{EmptyFunctionBody} 'Undefined';
		@Override public ParserRule getRule() { return rule; }
		
		//{EmptyFunctionBody} 'Undefined'
		public Group getGroup() { return cGroup; }
		
		//{EmptyFunctionBody}
		public Action getEmptyFunctionBodyAction_0() { return cEmptyFunctionBodyAction_0; }
		
		//'Undefined'
		public Keyword getUndefinedKeyword_1() { return cUndefinedKeyword_1; }
	}
	public class CompositionFunctionBodyPureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.CompositionFunctionBodyPure");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cReferenceElementAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final CrossReference cReferenceElementPureFunctionCrossReference_0_0_0 = (CrossReference)cReferenceElementAssignment_0_0.eContents().get(0);
		private final RuleCall cReferenceElementPureFunctionIDTerminalRuleCall_0_0_0_1 = (RuleCall)cReferenceElementPureFunctionCrossReference_0_0_0.eContents().get(1);
		private final Assignment cFunctionChainAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cFunctionChainCompositionFunctionBodyPureFactorParserRuleCall_0_1_0 = (RuleCall)cFunctionChainAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cPrimitiveElementAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cPrimitiveElementPrimitivePureFunctionParserRuleCall_1_0_0 = (RuleCall)cPrimitiveElementAssignment_1_0.eContents().get(0);
		private final Assignment cFunctionChainAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFunctionChainCompositionFunctionBodyPureFactorParserRuleCall_1_1_0 = (RuleCall)cFunctionChainAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cExpressionElementAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cExpressionElementExpressionParserRuleCall_2_0_0 = (RuleCall)cExpressionElementAssignment_2_0.eContents().get(0);
		private final Assignment cFunctionChainAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cFunctionChainCompositionFunctionBodyPureFactorParserRuleCall_2_1_0 = (RuleCall)cFunctionChainAssignment_2_1.eContents().get(0);
		
		//CompositionFunctionBodyPure:
		//	referenceElement=[PureFunction] functionChain+=CompositionFunctionBodyPureFactor+
		//	| primitiveElement=PrimitivePureFunction functionChain+=CompositionFunctionBodyPureFactor+
		//	| expressionElement=Expression functionChain+=CompositionFunctionBodyPureFactor+;
		@Override public ParserRule getRule() { return rule; }
		
		//referenceElement=[PureFunction] functionChain+=CompositionFunctionBodyPureFactor+ |
		//primitiveElement=PrimitivePureFunction functionChain+=CompositionFunctionBodyPureFactor+ | expressionElement=Expression
		//functionChain+=CompositionFunctionBodyPureFactor+
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//referenceElement=[PureFunction] functionChain+=CompositionFunctionBodyPureFactor+
		public Group getGroup_0() { return cGroup_0; }
		
		//referenceElement=[PureFunction]
		public Assignment getReferenceElementAssignment_0_0() { return cReferenceElementAssignment_0_0; }
		
		//[PureFunction]
		public CrossReference getReferenceElementPureFunctionCrossReference_0_0_0() { return cReferenceElementPureFunctionCrossReference_0_0_0; }
		
		//ID
		public RuleCall getReferenceElementPureFunctionIDTerminalRuleCall_0_0_0_1() { return cReferenceElementPureFunctionIDTerminalRuleCall_0_0_0_1; }
		
		//functionChain+=CompositionFunctionBodyPureFactor+
		public Assignment getFunctionChainAssignment_0_1() { return cFunctionChainAssignment_0_1; }
		
		//CompositionFunctionBodyPureFactor
		public RuleCall getFunctionChainCompositionFunctionBodyPureFactorParserRuleCall_0_1_0() { return cFunctionChainCompositionFunctionBodyPureFactorParserRuleCall_0_1_0; }
		
		//primitiveElement=PrimitivePureFunction functionChain+=CompositionFunctionBodyPureFactor+
		public Group getGroup_1() { return cGroup_1; }
		
		//primitiveElement=PrimitivePureFunction
		public Assignment getPrimitiveElementAssignment_1_0() { return cPrimitiveElementAssignment_1_0; }
		
		//PrimitivePureFunction
		public RuleCall getPrimitiveElementPrimitivePureFunctionParserRuleCall_1_0_0() { return cPrimitiveElementPrimitivePureFunctionParserRuleCall_1_0_0; }
		
		//functionChain+=CompositionFunctionBodyPureFactor+
		public Assignment getFunctionChainAssignment_1_1() { return cFunctionChainAssignment_1_1; }
		
		//CompositionFunctionBodyPureFactor
		public RuleCall getFunctionChainCompositionFunctionBodyPureFactorParserRuleCall_1_1_0() { return cFunctionChainCompositionFunctionBodyPureFactorParserRuleCall_1_1_0; }
		
		//expressionElement=Expression functionChain+=CompositionFunctionBodyPureFactor+
		public Group getGroup_2() { return cGroup_2; }
		
		//expressionElement=Expression
		public Assignment getExpressionElementAssignment_2_0() { return cExpressionElementAssignment_2_0; }
		
		//Expression
		public RuleCall getExpressionElementExpressionParserRuleCall_2_0_0() { return cExpressionElementExpressionParserRuleCall_2_0_0; }
		
		//functionChain+=CompositionFunctionBodyPureFactor+
		public Assignment getFunctionChainAssignment_2_1() { return cFunctionChainAssignment_2_1; }
		
		//CompositionFunctionBodyPureFactor
		public RuleCall getFunctionChainCompositionFunctionBodyPureFactorParserRuleCall_2_1_0() { return cFunctionChainCompositionFunctionBodyPureFactorParserRuleCall_2_1_0; }
	}
	public class CompositionFunctionBodyPureFactorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.CompositionFunctionBodyPureFactor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cVerticalLineGreaterThanSignKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cReferenceElementAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cReferenceElementPureFunctionCrossReference_0_1_0 = (CrossReference)cReferenceElementAssignment_0_1.eContents().get(0);
		private final RuleCall cReferenceElementPureFunctionIDTerminalRuleCall_0_1_0_1 = (RuleCall)cReferenceElementPureFunctionCrossReference_0_1_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cVerticalLineGreaterThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cPrimitiveElementAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPrimitiveElementPrimitivePureFunctionParserRuleCall_1_1_0 = (RuleCall)cPrimitiveElementAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cVerticalLineGreaterThanSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExpressionElementAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExpressionElementExpressionParserRuleCall_2_1_0 = (RuleCall)cExpressionElementAssignment_2_1.eContents().get(0);
		
		//CompositionFunctionBodyPureFactor:
		//	'|>' referenceElement=[PureFunction] | '|>' primitiveElement=PrimitivePureFunction | '|>'
		//	expressionElement=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//'|>' referenceElement=[PureFunction] | '|>' primitiveElement=PrimitivePureFunction | '|>' expressionElement=Expression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'|>' referenceElement=[PureFunction]
		public Group getGroup_0() { return cGroup_0; }
		
		//'|>'
		public Keyword getVerticalLineGreaterThanSignKeyword_0_0() { return cVerticalLineGreaterThanSignKeyword_0_0; }
		
		//referenceElement=[PureFunction]
		public Assignment getReferenceElementAssignment_0_1() { return cReferenceElementAssignment_0_1; }
		
		//[PureFunction]
		public CrossReference getReferenceElementPureFunctionCrossReference_0_1_0() { return cReferenceElementPureFunctionCrossReference_0_1_0; }
		
		//ID
		public RuleCall getReferenceElementPureFunctionIDTerminalRuleCall_0_1_0_1() { return cReferenceElementPureFunctionIDTerminalRuleCall_0_1_0_1; }
		
		//'|>' primitiveElement=PrimitivePureFunction
		public Group getGroup_1() { return cGroup_1; }
		
		//'|>'
		public Keyword getVerticalLineGreaterThanSignKeyword_1_0() { return cVerticalLineGreaterThanSignKeyword_1_0; }
		
		//primitiveElement=PrimitivePureFunction
		public Assignment getPrimitiveElementAssignment_1_1() { return cPrimitiveElementAssignment_1_1; }
		
		//PrimitivePureFunction
		public RuleCall getPrimitiveElementPrimitivePureFunctionParserRuleCall_1_1_0() { return cPrimitiveElementPrimitivePureFunctionParserRuleCall_1_1_0; }
		
		//'|>' expressionElement=Expression
		public Group getGroup_2() { return cGroup_2; }
		
		//'|>'
		public Keyword getVerticalLineGreaterThanSignKeyword_2_0() { return cVerticalLineGreaterThanSignKeyword_2_0; }
		
		//expressionElement=Expression
		public Assignment getExpressionElementAssignment_2_1() { return cExpressionElementAssignment_2_1; }
		
		//Expression
		public RuleCall getExpressionElementExpressionParserRuleCall_2_1_0() { return cExpressionElementExpressionParserRuleCall_2_1_0; }
	}
	public class CompositionFunctionBodyEffectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.CompositionFunctionBodyEffect");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cReferenceElementAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final CrossReference cReferenceElementEffectFullFunctionCrossReference_0_0_0 = (CrossReference)cReferenceElementAssignment_0_0.eContents().get(0);
		private final RuleCall cReferenceElementEffectFullFunctionIDTerminalRuleCall_0_0_0_1 = (RuleCall)cReferenceElementEffectFullFunctionCrossReference_0_0_0.eContents().get(1);
		private final Assignment cFunctionChainAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cFunctionChainCompositionFunctionBodyEffectFullFactorParserRuleCall_0_1_0 = (RuleCall)cFunctionChainAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cPrimitiveElementAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cPrimitiveElementEffectFullPrimitiveParserRuleCall_1_0_0 = (RuleCall)cPrimitiveElementAssignment_1_0.eContents().get(0);
		private final Assignment cFunctionChainAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFunctionChainCompositionFunctionBodyEffectFullFactorParserRuleCall_1_1_0 = (RuleCall)cFunctionChainAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cExpressionElementAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cExpressionElementEffectFullExpressionParserRuleCall_2_0_0 = (RuleCall)cExpressionElementAssignment_2_0.eContents().get(0);
		private final Assignment cFunctionChainAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cFunctionChainCompositionFunctionBodyEffectFullFactorParserRuleCall_2_1_0 = (RuleCall)cFunctionChainAssignment_2_1.eContents().get(0);
		
		//CompositionFunctionBodyEffect:
		//	referenceElement=[EffectFullFunction] functionChain+=CompositionFunctionBodyEffectFullFactor+
		//	| primitiveElement=EffectFullPrimitive functionChain+=CompositionFunctionBodyEffectFullFactor+
		//	| expressionElement=EffectFullExpression functionChain+=CompositionFunctionBodyEffectFullFactor+;
		@Override public ParserRule getRule() { return rule; }
		
		//referenceElement=[EffectFullFunction] functionChain+=CompositionFunctionBodyEffectFullFactor+ |
		//primitiveElement=EffectFullPrimitive functionChain+=CompositionFunctionBodyEffectFullFactor+ |
		//expressionElement=EffectFullExpression functionChain+=CompositionFunctionBodyEffectFullFactor+
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//referenceElement=[EffectFullFunction] functionChain+=CompositionFunctionBodyEffectFullFactor+
		public Group getGroup_0() { return cGroup_0; }
		
		//referenceElement=[EffectFullFunction]
		public Assignment getReferenceElementAssignment_0_0() { return cReferenceElementAssignment_0_0; }
		
		//[EffectFullFunction]
		public CrossReference getReferenceElementEffectFullFunctionCrossReference_0_0_0() { return cReferenceElementEffectFullFunctionCrossReference_0_0_0; }
		
		//ID
		public RuleCall getReferenceElementEffectFullFunctionIDTerminalRuleCall_0_0_0_1() { return cReferenceElementEffectFullFunctionIDTerminalRuleCall_0_0_0_1; }
		
		//functionChain+=CompositionFunctionBodyEffectFullFactor+
		public Assignment getFunctionChainAssignment_0_1() { return cFunctionChainAssignment_0_1; }
		
		//CompositionFunctionBodyEffectFullFactor
		public RuleCall getFunctionChainCompositionFunctionBodyEffectFullFactorParserRuleCall_0_1_0() { return cFunctionChainCompositionFunctionBodyEffectFullFactorParserRuleCall_0_1_0; }
		
		//primitiveElement=EffectFullPrimitive functionChain+=CompositionFunctionBodyEffectFullFactor+
		public Group getGroup_1() { return cGroup_1; }
		
		//primitiveElement=EffectFullPrimitive
		public Assignment getPrimitiveElementAssignment_1_0() { return cPrimitiveElementAssignment_1_0; }
		
		//EffectFullPrimitive
		public RuleCall getPrimitiveElementEffectFullPrimitiveParserRuleCall_1_0_0() { return cPrimitiveElementEffectFullPrimitiveParserRuleCall_1_0_0; }
		
		//functionChain+=CompositionFunctionBodyEffectFullFactor+
		public Assignment getFunctionChainAssignment_1_1() { return cFunctionChainAssignment_1_1; }
		
		//CompositionFunctionBodyEffectFullFactor
		public RuleCall getFunctionChainCompositionFunctionBodyEffectFullFactorParserRuleCall_1_1_0() { return cFunctionChainCompositionFunctionBodyEffectFullFactorParserRuleCall_1_1_0; }
		
		//expressionElement=EffectFullExpression functionChain+=CompositionFunctionBodyEffectFullFactor+
		public Group getGroup_2() { return cGroup_2; }
		
		//expressionElement=EffectFullExpression
		public Assignment getExpressionElementAssignment_2_0() { return cExpressionElementAssignment_2_0; }
		
		//EffectFullExpression
		public RuleCall getExpressionElementEffectFullExpressionParserRuleCall_2_0_0() { return cExpressionElementEffectFullExpressionParserRuleCall_2_0_0; }
		
		//functionChain+=CompositionFunctionBodyEffectFullFactor+
		public Assignment getFunctionChainAssignment_2_1() { return cFunctionChainAssignment_2_1; }
		
		//CompositionFunctionBodyEffectFullFactor
		public RuleCall getFunctionChainCompositionFunctionBodyEffectFullFactorParserRuleCall_2_1_0() { return cFunctionChainCompositionFunctionBodyEffectFullFactorParserRuleCall_2_1_0; }
	}
	public class CompositionFunctionBodyEffectFullFactorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.CompositionFunctionBodyEffectFullFactor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cGreaterThanSignGreaterThanSignEqualsSignKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cReferenceElementAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cReferenceElementEffectFullFunctionCrossReference_0_1_0 = (CrossReference)cReferenceElementAssignment_0_1.eContents().get(0);
		private final RuleCall cReferenceElementEffectFullFunctionIDTerminalRuleCall_0_1_0_1 = (RuleCall)cReferenceElementEffectFullFunctionCrossReference_0_1_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cGreaterThanSignGreaterThanSignEqualsSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cPrimitiveElementAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPrimitiveElementEffectFullPrimitiveParserRuleCall_1_1_0 = (RuleCall)cPrimitiveElementAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cGreaterThanSignGreaterThanSignEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExpressionElementAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExpressionElementEffectFullExpressionParserRuleCall_2_1_0 = (RuleCall)cExpressionElementAssignment_2_1.eContents().get(0);
		
		//CompositionFunctionBodyEffectFullFactor:
		//	'>>=' referenceElement=[EffectFullFunction] | '>>=' primitiveElement=EffectFullPrimitive | '>>='
		//	expressionElement=EffectFullExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//'>>=' referenceElement=[EffectFullFunction] | '>>=' primitiveElement=EffectFullPrimitive | '>>='
		//expressionElement=EffectFullExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'>>=' referenceElement=[EffectFullFunction]
		public Group getGroup_0() { return cGroup_0; }
		
		//'>>='
		public Keyword getGreaterThanSignGreaterThanSignEqualsSignKeyword_0_0() { return cGreaterThanSignGreaterThanSignEqualsSignKeyword_0_0; }
		
		//referenceElement=[EffectFullFunction]
		public Assignment getReferenceElementAssignment_0_1() { return cReferenceElementAssignment_0_1; }
		
		//[EffectFullFunction]
		public CrossReference getReferenceElementEffectFullFunctionCrossReference_0_1_0() { return cReferenceElementEffectFullFunctionCrossReference_0_1_0; }
		
		//ID
		public RuleCall getReferenceElementEffectFullFunctionIDTerminalRuleCall_0_1_0_1() { return cReferenceElementEffectFullFunctionIDTerminalRuleCall_0_1_0_1; }
		
		//'>>=' primitiveElement=EffectFullPrimitive
		public Group getGroup_1() { return cGroup_1; }
		
		//'>>='
		public Keyword getGreaterThanSignGreaterThanSignEqualsSignKeyword_1_0() { return cGreaterThanSignGreaterThanSignEqualsSignKeyword_1_0; }
		
		//primitiveElement=EffectFullPrimitive
		public Assignment getPrimitiveElementAssignment_1_1() { return cPrimitiveElementAssignment_1_1; }
		
		//EffectFullPrimitive
		public RuleCall getPrimitiveElementEffectFullPrimitiveParserRuleCall_1_1_0() { return cPrimitiveElementEffectFullPrimitiveParserRuleCall_1_1_0; }
		
		//'>>=' expressionElement=EffectFullExpression
		public Group getGroup_2() { return cGroup_2; }
		
		//'>>='
		public Keyword getGreaterThanSignGreaterThanSignEqualsSignKeyword_2_0() { return cGreaterThanSignGreaterThanSignEqualsSignKeyword_2_0; }
		
		//expressionElement=EffectFullExpression
		public Assignment getExpressionElementAssignment_2_1() { return cExpressionElementAssignment_2_1; }
		
		//EffectFullExpression
		public RuleCall getExpressionElementEffectFullExpressionParserRuleCall_2_1_0() { return cExpressionElementEffectFullExpressionParserRuleCall_2_1_0; }
	}
	public class IOTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.IOType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIOKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		
		////////////////////////////////////////////////////////////////////////
		//// Types
		////////////////////////////////////////////////////////////////////////
		//IOType:
		//	'IO' type=Type;
		@Override public ParserRule getRule() { return rule; }
		
		//'IO' type=Type
		public Group getGroup() { return cGroup; }
		
		//'IO'
		public Keyword getIOKeyword_0() { return cIOKeyword_0; }
		
		//type=Type
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_1_0() { return cTypeTypeParserRuleCall_1_0; }
	}
	public class ValueTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.ValueType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntegerTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStringTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBooleanTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDataTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cPureFunctionTypeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cPureAlgebraicTypeParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cUnitTypeParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//ValueType:
		//	IntegerType | StringType | BooleanType | DataType | PureFunctionType | PureAlgebraicType
		//	| UnitType;
		@Override public ParserRule getRule() { return rule; }
		
		//IntegerType | StringType | BooleanType | DataType | PureFunctionType | PureAlgebraicType | UnitType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IntegerType
		public RuleCall getIntegerTypeParserRuleCall_0() { return cIntegerTypeParserRuleCall_0; }
		
		//StringType
		public RuleCall getStringTypeParserRuleCall_1() { return cStringTypeParserRuleCall_1; }
		
		//BooleanType
		public RuleCall getBooleanTypeParserRuleCall_2() { return cBooleanTypeParserRuleCall_2; }
		
		//DataType
		public RuleCall getDataTypeParserRuleCall_3() { return cDataTypeParserRuleCall_3; }
		
		//PureFunctionType
		public RuleCall getPureFunctionTypeParserRuleCall_4() { return cPureFunctionTypeParserRuleCall_4; }
		
		//PureAlgebraicType
		public RuleCall getPureAlgebraicTypeParserRuleCall_5() { return cPureAlgebraicTypeParserRuleCall_5; }
		
		//UnitType
		public RuleCall getUnitTypeParserRuleCall_6() { return cUnitTypeParserRuleCall_6; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cValueTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEffectFullTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Type:
		//	ValueType | EffectFullType;
		@Override public ParserRule getRule() { return rule; }
		
		//ValueType | EffectFullType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ValueType
		public RuleCall getValueTypeParserRuleCall_0() { return cValueTypeParserRuleCall_0; }
		
		//EffectFullType
		public RuleCall getEffectFullTypeParserRuleCall_1() { return cEffectFullTypeParserRuleCall_1; }
	}
	public class EffectFullTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.EffectFullType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEffectFullFunctionTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEffectFullDataTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEffectFullAlgebraicTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cIOTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cVoidTypeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//EffectFullType:
		//	EffectFullFunctionType | EffectFullDataType | EffectFullAlgebraicType | IOType | VoidType;
		@Override public ParserRule getRule() { return rule; }
		
		//EffectFullFunctionType | EffectFullDataType | EffectFullAlgebraicType | IOType | VoidType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EffectFullFunctionType
		public RuleCall getEffectFullFunctionTypeParserRuleCall_0() { return cEffectFullFunctionTypeParserRuleCall_0; }
		
		//EffectFullDataType
		public RuleCall getEffectFullDataTypeParserRuleCall_1() { return cEffectFullDataTypeParserRuleCall_1; }
		
		//EffectFullAlgebraicType
		public RuleCall getEffectFullAlgebraicTypeParserRuleCall_2() { return cEffectFullAlgebraicTypeParserRuleCall_2; }
		
		//IOType
		public RuleCall getIOTypeParserRuleCall_3() { return cIOTypeParserRuleCall_3; }
		
		//VoidType
		public RuleCall getVoidTypeParserRuleCall_4() { return cVoidTypeParserRuleCall_4; }
	}
	public class VoidTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.VoidType");
		private final Action cVoidTypeAction = (Action)rule.eContents().get(1);
		
		//VoidType:
		//	{VoidType};
		@Override public ParserRule getRule() { return rule; }
		
		//{VoidType}
		public Action getVoidTypeAction() { return cVoidTypeAction; }
	}
	public class IntegerTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.IntegerType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIntegerTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cTypeIntKeyword_1_0 = (Keyword)cTypeAssignment_1.eContents().get(0);
		
		//IntegerType:
		//	{IntegerType} type="int";
		@Override public ParserRule getRule() { return rule; }
		
		//{IntegerType} type="int"
		public Group getGroup() { return cGroup; }
		
		//{IntegerType}
		public Action getIntegerTypeAction_0() { return cIntegerTypeAction_0; }
		
		//type="int"
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//"int"
		public Keyword getTypeIntKeyword_1_0() { return cTypeIntKeyword_1_0; }
	}
	public class StringTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.StringType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStringTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cTypeStringKeyword_1_0 = (Keyword)cTypeAssignment_1.eContents().get(0);
		
		//StringType:
		//	{StringType} type="String";
		@Override public ParserRule getRule() { return rule; }
		
		//{StringType} type="String"
		public Group getGroup() { return cGroup; }
		
		//{StringType}
		public Action getStringTypeAction_0() { return cStringTypeAction_0; }
		
		//type="String"
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//"String"
		public Keyword getTypeStringKeyword_1_0() { return cTypeStringKeyword_1_0; }
	}
	public class BooleanTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.BooleanType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBooleanTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cTypeBooleanKeyword_1_0 = (Keyword)cTypeAssignment_1.eContents().get(0);
		
		//BooleanType:
		//	{BooleanType} type="boolean";
		@Override public ParserRule getRule() { return rule; }
		
		//{BooleanType} type="boolean"
		public Group getGroup() { return cGroup; }
		
		//{BooleanType}
		public Action getBooleanTypeAction_0() { return cBooleanTypeAction_0; }
		
		//type="boolean"
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//"boolean"
		public Keyword getTypeBooleanKeyword_1_0() { return cTypeBooleanKeyword_1_0; }
	}
	public class UnitTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.UnitType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUnitTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cTypeUnitKeyword_1_0 = (Keyword)cTypeAssignment_1.eContents().get(0);
		
		//UnitType:
		//	{UnitType} type="Unit";
		@Override public ParserRule getRule() { return rule; }
		
		//{UnitType} type="Unit"
		public Group getGroup() { return cGroup; }
		
		//{UnitType}
		public Action getUnitTypeAction_0() { return cUnitTypeAction_0; }
		
		//type="Unit"
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//"Unit"
		public Keyword getTypeUnitKeyword_1_0() { return cTypeUnitKeyword_1_0; }
	}
	public class DataTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.DataType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDataTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRefKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypePureDataCrossReference_2_0 = (CrossReference)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypePureDataIDTerminalRuleCall_2_0_1 = (RuleCall)cTypePureDataCrossReference_2_0.eContents().get(1);
		
		//DataType:
		//	{DataType} 'ref' type=[PureData];
		@Override public ParserRule getRule() { return rule; }
		
		//{DataType} 'ref' type=[PureData]
		public Group getGroup() { return cGroup; }
		
		//{DataType}
		public Action getDataTypeAction_0() { return cDataTypeAction_0; }
		
		//'ref'
		public Keyword getRefKeyword_1() { return cRefKeyword_1; }
		
		//type=[PureData]
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//[PureData]
		public CrossReference getTypePureDataCrossReference_2_0() { return cTypePureDataCrossReference_2_0; }
		
		//ID
		public RuleCall getTypePureDataIDTerminalRuleCall_2_0_1() { return cTypePureDataIDTerminalRuleCall_2_0_1; }
	}
	public class EffectFullDataTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.EffectFullDataType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEffectFullDataTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRefIOKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypeEffectFullDataCrossReference_2_0 = (CrossReference)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypeEffectFullDataIDTerminalRuleCall_2_0_1 = (RuleCall)cTypeEffectFullDataCrossReference_2_0.eContents().get(1);
		
		//EffectFullDataType:
		//	{EffectFullDataType} 'refIO' type=[EffectFullData];
		@Override public ParserRule getRule() { return rule; }
		
		//{EffectFullDataType} 'refIO' type=[EffectFullData]
		public Group getGroup() { return cGroup; }
		
		//{EffectFullDataType}
		public Action getEffectFullDataTypeAction_0() { return cEffectFullDataTypeAction_0; }
		
		//'refIO'
		public Keyword getRefIOKeyword_1() { return cRefIOKeyword_1; }
		
		//type=[EffectFullData]
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//[EffectFullData]
		public CrossReference getTypeEffectFullDataCrossReference_2_0() { return cTypeEffectFullDataCrossReference_2_0; }
		
		//ID
		public RuleCall getTypeEffectFullDataIDTerminalRuleCall_2_0_1() { return cTypeEffectFullDataIDTerminalRuleCall_2_0_1; }
	}
	public class PureFunctionTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.PureFunctionType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPureFunctionTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLessThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cArgTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cArgTypeValueTypeParserRuleCall_3_0 = (RuleCall)cArgTypeAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cReturnTypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cReturnTypeValueTypeParserRuleCall_5_0 = (RuleCall)cReturnTypeAssignment_5.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//PureFunctionType:
		//	{PureFunctionType} 'F' '<' argType=ValueType ',' returnType=ValueType '>';
		@Override public ParserRule getRule() { return rule; }
		
		//{PureFunctionType} 'F' '<' argType=ValueType ',' returnType=ValueType '>'
		public Group getGroup() { return cGroup; }
		
		//{PureFunctionType}
		public Action getPureFunctionTypeAction_0() { return cPureFunctionTypeAction_0; }
		
		//'F'
		public Keyword getFKeyword_1() { return cFKeyword_1; }
		
		//'<'
		public Keyword getLessThanSignKeyword_2() { return cLessThanSignKeyword_2; }
		
		//argType=ValueType
		public Assignment getArgTypeAssignment_3() { return cArgTypeAssignment_3; }
		
		//ValueType
		public RuleCall getArgTypeValueTypeParserRuleCall_3_0() { return cArgTypeValueTypeParserRuleCall_3_0; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//returnType=ValueType
		public Assignment getReturnTypeAssignment_5() { return cReturnTypeAssignment_5; }
		
		//ValueType
		public RuleCall getReturnTypeValueTypeParserRuleCall_5_0() { return cReturnTypeValueTypeParserRuleCall_5_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_6() { return cGreaterThanSignKeyword_6; }
	}
	public class EffectFullFunctionTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.EffectFullFunctionType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEffectFullFunctionTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFIOKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLessThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cArgTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cArgTypeTypeParserRuleCall_3_0 = (RuleCall)cArgTypeAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cReturnTypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cReturnTypeIOTypeParserRuleCall_5_0 = (RuleCall)cReturnTypeAssignment_5.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//EffectFullFunctionType:
		//	{EffectFullFunctionType} 'FIO' '<' argType=Type ',' returnType=IOType '>';
		@Override public ParserRule getRule() { return rule; }
		
		//{EffectFullFunctionType} 'FIO' '<' argType=Type ',' returnType=IOType '>'
		public Group getGroup() { return cGroup; }
		
		//{EffectFullFunctionType}
		public Action getEffectFullFunctionTypeAction_0() { return cEffectFullFunctionTypeAction_0; }
		
		//'FIO'
		public Keyword getFIOKeyword_1() { return cFIOKeyword_1; }
		
		//'<'
		public Keyword getLessThanSignKeyword_2() { return cLessThanSignKeyword_2; }
		
		//argType=Type
		public Assignment getArgTypeAssignment_3() { return cArgTypeAssignment_3; }
		
		//Type
		public RuleCall getArgTypeTypeParserRuleCall_3_0() { return cArgTypeTypeParserRuleCall_3_0; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//returnType=IOType
		public Assignment getReturnTypeAssignment_5() { return cReturnTypeAssignment_5; }
		
		//IOType
		public RuleCall getReturnTypeIOTypeParserRuleCall_5_0() { return cReturnTypeIOTypeParserRuleCall_5_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_6() { return cGreaterThanSignKeyword_6; }
	}
	public class PureAlgebraicTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.PureAlgebraicType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPureAdtElement1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPureAdtElement1ValueTypeParserRuleCall_1_0 = (RuleCall)cPureAdtElement1Assignment_1.eContents().get(0);
		private final Assignment cPureAdtElement2Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cPureAdtElement2Alternatives_2_0 = (Alternatives)cPureAdtElement2Assignment_2.eContents().get(0);
		private final RuleCall cPureAdtElement2PureSumTypeFactorParserRuleCall_2_0_0 = (RuleCall)cPureAdtElement2Alternatives_2_0.eContents().get(0);
		private final RuleCall cPureAdtElement2PureProdTypeFactorParserRuleCall_2_0_1 = (RuleCall)cPureAdtElement2Alternatives_2_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//PureAlgebraicType:
		//	'[' pureAdtElement1=ValueType pureAdtElement2=(PureSumTypeFactor | PureProdTypeFactor) ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' pureAdtElement1=ValueType pureAdtElement2=(PureSumTypeFactor | PureProdTypeFactor) ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//pureAdtElement1=ValueType
		public Assignment getPureAdtElement1Assignment_1() { return cPureAdtElement1Assignment_1; }
		
		//ValueType
		public RuleCall getPureAdtElement1ValueTypeParserRuleCall_1_0() { return cPureAdtElement1ValueTypeParserRuleCall_1_0; }
		
		//pureAdtElement2=(PureSumTypeFactor | PureProdTypeFactor)
		public Assignment getPureAdtElement2Assignment_2() { return cPureAdtElement2Assignment_2; }
		
		//(PureSumTypeFactor | PureProdTypeFactor)
		public Alternatives getPureAdtElement2Alternatives_2_0() { return cPureAdtElement2Alternatives_2_0; }
		
		//PureSumTypeFactor
		public RuleCall getPureAdtElement2PureSumTypeFactorParserRuleCall_2_0_0() { return cPureAdtElement2PureSumTypeFactorParserRuleCall_2_0_0; }
		
		//PureProdTypeFactor
		public RuleCall getPureAdtElement2PureProdTypeFactorParserRuleCall_2_0_1() { return cPureAdtElement2PureProdTypeFactorParserRuleCall_2_0_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class PureSumTypeFactorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.PureSumTypeFactor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAdtElementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAdtElementValueTypeParserRuleCall_1_0 = (RuleCall)cAdtElementAssignment_1.eContents().get(0);
		
		//PureSumTypeFactor:
		//	'+' adtElement=ValueType;
		@Override public ParserRule getRule() { return rule; }
		
		//'+' adtElement=ValueType
		public Group getGroup() { return cGroup; }
		
		//'+'
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }
		
		//adtElement=ValueType
		public Assignment getAdtElementAssignment_1() { return cAdtElementAssignment_1; }
		
		//ValueType
		public RuleCall getAdtElementValueTypeParserRuleCall_1_0() { return cAdtElementValueTypeParserRuleCall_1_0; }
	}
	public class PureProdTypeFactorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.PureProdTypeFactor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAdtElementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAdtElementValueTypeParserRuleCall_1_0 = (RuleCall)cAdtElementAssignment_1.eContents().get(0);
		
		//PureProdTypeFactor:
		//	'*' adtElement=ValueType;
		@Override public ParserRule getRule() { return rule; }
		
		//'*' adtElement=ValueType
		public Group getGroup() { return cGroup; }
		
		//'*'
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }
		
		//adtElement=ValueType
		public Assignment getAdtElementAssignment_1() { return cAdtElementAssignment_1; }
		
		//ValueType
		public RuleCall getAdtElementValueTypeParserRuleCall_1_0() { return cAdtElementValueTypeParserRuleCall_1_0; }
	}
	public class EffectFullAlgebraicTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.EffectFullAlgebraicType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEffectFullAdtElement1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEffectFullAdtElement1TypeParserRuleCall_1_0 = (RuleCall)cEffectFullAdtElement1Assignment_1.eContents().get(0);
		private final Assignment cEffectFullAdtElement2Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cEffectFullAdtElement2Alternatives_2_0 = (Alternatives)cEffectFullAdtElement2Assignment_2.eContents().get(0);
		private final RuleCall cEffectFullAdtElement2EffectFullSumTypeFactorParserRuleCall_2_0_0 = (RuleCall)cEffectFullAdtElement2Alternatives_2_0.eContents().get(0);
		private final RuleCall cEffectFullAdtElement2EffectFullProdTypeFactorParserRuleCall_2_0_1 = (RuleCall)cEffectFullAdtElement2Alternatives_2_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//EffectFullAlgebraicType:
		//	'{' effectFullAdtElement1=Type effectFullAdtElement2=(EffectFullSumTypeFactor | EffectFullProdTypeFactor) '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' effectFullAdtElement1=Type effectFullAdtElement2=(EffectFullSumTypeFactor | EffectFullProdTypeFactor) '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//effectFullAdtElement1=Type
		public Assignment getEffectFullAdtElement1Assignment_1() { return cEffectFullAdtElement1Assignment_1; }
		
		//Type
		public RuleCall getEffectFullAdtElement1TypeParserRuleCall_1_0() { return cEffectFullAdtElement1TypeParserRuleCall_1_0; }
		
		//effectFullAdtElement2=(EffectFullSumTypeFactor | EffectFullProdTypeFactor)
		public Assignment getEffectFullAdtElement2Assignment_2() { return cEffectFullAdtElement2Assignment_2; }
		
		//(EffectFullSumTypeFactor | EffectFullProdTypeFactor)
		public Alternatives getEffectFullAdtElement2Alternatives_2_0() { return cEffectFullAdtElement2Alternatives_2_0; }
		
		//EffectFullSumTypeFactor
		public RuleCall getEffectFullAdtElement2EffectFullSumTypeFactorParserRuleCall_2_0_0() { return cEffectFullAdtElement2EffectFullSumTypeFactorParserRuleCall_2_0_0; }
		
		//EffectFullProdTypeFactor
		public RuleCall getEffectFullAdtElement2EffectFullProdTypeFactorParserRuleCall_2_0_1() { return cEffectFullAdtElement2EffectFullProdTypeFactorParserRuleCall_2_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class EffectFullSumTypeFactorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.EffectFullSumTypeFactor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAdtElementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAdtElementTypeParserRuleCall_1_0 = (RuleCall)cAdtElementAssignment_1.eContents().get(0);
		
		//EffectFullSumTypeFactor:
		//	'+' adtElement=Type;
		@Override public ParserRule getRule() { return rule; }
		
		//'+' adtElement=Type
		public Group getGroup() { return cGroup; }
		
		//'+'
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }
		
		//adtElement=Type
		public Assignment getAdtElementAssignment_1() { return cAdtElementAssignment_1; }
		
		//Type
		public RuleCall getAdtElementTypeParserRuleCall_1_0() { return cAdtElementTypeParserRuleCall_1_0; }
	}
	public class EffectFullProdTypeFactorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.EffectFullProdTypeFactor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAdtElementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAdtElementTypeParserRuleCall_1_0 = (RuleCall)cAdtElementAssignment_1.eContents().get(0);
		
		//EffectFullProdTypeFactor:
		//	'*' adtElement=Type;
		@Override public ParserRule getRule() { return rule; }
		
		//'*' adtElement=Type
		public Group getGroup() { return cGroup; }
		
		//'*'
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }
		
		//adtElement=Type
		public Assignment getAdtElementAssignment_1() { return cAdtElementAssignment_1; }
		
		//Type
		public RuleCall getAdtElementTypeParserRuleCall_1_0() { return cAdtElementTypeParserRuleCall_1_0; }
	}
	public class EffectFullExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.EffectFullExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIOEffectFullExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cIOKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cInnerValueAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cInnerValueEffectFullExpressionParserRuleCall_0_3_0 = (RuleCall)cInnerValueAssignment_0_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cIOExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cIOKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cInnerValueAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cInnerValueExpressionParserRuleCall_1_3_0 = (RuleCall)cInnerValueAssignment_1_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cIOPureFunctionAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cIOFKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cPureFunctionAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final CrossReference cPureFunctionPureFunctionCrossReference_2_3_0 = (CrossReference)cPureFunctionAssignment_2_3.eContents().get(0);
		private final RuleCall cPureFunctionPureFunctionIDTerminalRuleCall_2_3_0_1 = (RuleCall)cPureFunctionPureFunctionCrossReference_2_3_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cIOPureFunctionAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cIOFKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cPurePrimitiveAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cPurePrimitivePrimitivePureFunctionParserRuleCall_3_3_0 = (RuleCall)cPurePrimitiveAssignment_3_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cIOEffectFullFunctionAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cIOFKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cEffectFullFunctionAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final CrossReference cEffectFullFunctionEffectFullFunctionCrossReference_4_3_0 = (CrossReference)cEffectFullFunctionAssignment_4_3.eContents().get(0);
		private final RuleCall cEffectFullFunctionEffectFullFunctionIDTerminalRuleCall_4_3_0_1 = (RuleCall)cEffectFullFunctionEffectFullFunctionCrossReference_4_3_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cIOEffectFullFunctionAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Keyword cIOFKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Assignment cEffectFullPrimitiveAssignment_5_3 = (Assignment)cGroup_5.eContents().get(3);
		private final RuleCall cEffectFullPrimitivePrimitiveEffectFullFunctionParserRuleCall_5_3_0 = (RuleCall)cEffectFullPrimitiveAssignment_5_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final RuleCall cEffectFullFunctionValueParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cEffectFullDataValueParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cEffectFullProdValueParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cEffectFullSumValueParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cEffectFullValueRefParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		
		//////////////////////////////////////////////////////////////////////
		//// Values
		//////////////////////////////////////////////////////////////////////
		//EffectFullExpression:
		//	{IOEffectFullExpression} 'IO' '[' innerValue=EffectFullExpression ']'
		//	| {IOExpression} 'IO' '(' innerValue=Expression ')'
		//	| {IOPureFunction} 'IOF' '(' pureFunction=[PureFunction] ')'
		//	| {IOPureFunction} 'IOF' '(' purePrimitive=PrimitivePureFunction ')'
		//	| {IOEffectFullFunction} 'IOF' '[' effectFullFunction=[EffectFullFunction] ']'
		//	| {IOEffectFullFunction} 'IOF' '[' effectFullPrimitive=PrimitiveEffectFullFunction ']'
		//	| EffectFullFunctionValue
		//	| EffectFullDataValue
		//	| EffectFullProdValue
		//	| EffectFullSumValue
		//	| EffectFullValueRef;
		@Override public ParserRule getRule() { return rule; }
		
		//{IOEffectFullExpression} 'IO' '[' innerValue=EffectFullExpression ']' | {IOExpression} 'IO' '(' innerValue=Expression
		//')' | {IOPureFunction} 'IOF' '(' pureFunction=[PureFunction] ')' | {IOPureFunction} 'IOF' '('
		//purePrimitive=PrimitivePureFunction ')' | {IOEffectFullFunction} 'IOF' '[' effectFullFunction=[EffectFullFunction] ']'
		//| {IOEffectFullFunction} 'IOF' '[' effectFullPrimitive=PrimitiveEffectFullFunction ']' | EffectFullFunctionValue |
		//EffectFullDataValue | EffectFullProdValue | EffectFullSumValue | EffectFullValueRef
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{IOEffectFullExpression} 'IO' '[' innerValue=EffectFullExpression ']'
		public Group getGroup_0() { return cGroup_0; }
		
		//{IOEffectFullExpression}
		public Action getIOEffectFullExpressionAction_0_0() { return cIOEffectFullExpressionAction_0_0; }
		
		//'IO'
		public Keyword getIOKeyword_0_1() { return cIOKeyword_0_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0_2() { return cLeftSquareBracketKeyword_0_2; }
		
		//innerValue=EffectFullExpression
		public Assignment getInnerValueAssignment_0_3() { return cInnerValueAssignment_0_3; }
		
		//EffectFullExpression
		public RuleCall getInnerValueEffectFullExpressionParserRuleCall_0_3_0() { return cInnerValueEffectFullExpressionParserRuleCall_0_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_0_4() { return cRightSquareBracketKeyword_0_4; }
		
		//{IOExpression} 'IO' '(' innerValue=Expression ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//{IOExpression}
		public Action getIOExpressionAction_1_0() { return cIOExpressionAction_1_0; }
		
		//'IO'
		public Keyword getIOKeyword_1_1() { return cIOKeyword_1_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_2() { return cLeftParenthesisKeyword_1_2; }
		
		//innerValue=Expression
		public Assignment getInnerValueAssignment_1_3() { return cInnerValueAssignment_1_3; }
		
		//Expression
		public RuleCall getInnerValueExpressionParserRuleCall_1_3_0() { return cInnerValueExpressionParserRuleCall_1_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_4() { return cRightParenthesisKeyword_1_4; }
		
		//{IOPureFunction} 'IOF' '(' pureFunction=[PureFunction] ')'
		public Group getGroup_2() { return cGroup_2; }
		
		//{IOPureFunction}
		public Action getIOPureFunctionAction_2_0() { return cIOPureFunctionAction_2_0; }
		
		//'IOF'
		public Keyword getIOFKeyword_2_1() { return cIOFKeyword_2_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_2() { return cLeftParenthesisKeyword_2_2; }
		
		//pureFunction=[PureFunction]
		public Assignment getPureFunctionAssignment_2_3() { return cPureFunctionAssignment_2_3; }
		
		//[PureFunction]
		public CrossReference getPureFunctionPureFunctionCrossReference_2_3_0() { return cPureFunctionPureFunctionCrossReference_2_3_0; }
		
		//ID
		public RuleCall getPureFunctionPureFunctionIDTerminalRuleCall_2_3_0_1() { return cPureFunctionPureFunctionIDTerminalRuleCall_2_3_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_4() { return cRightParenthesisKeyword_2_4; }
		
		//{IOPureFunction} 'IOF' '(' purePrimitive=PrimitivePureFunction ')'
		public Group getGroup_3() { return cGroup_3; }
		
		//{IOPureFunction}
		public Action getIOPureFunctionAction_3_0() { return cIOPureFunctionAction_3_0; }
		
		//'IOF'
		public Keyword getIOFKeyword_3_1() { return cIOFKeyword_3_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_2() { return cLeftParenthesisKeyword_3_2; }
		
		//purePrimitive=PrimitivePureFunction
		public Assignment getPurePrimitiveAssignment_3_3() { return cPurePrimitiveAssignment_3_3; }
		
		//PrimitivePureFunction
		public RuleCall getPurePrimitivePrimitivePureFunctionParserRuleCall_3_3_0() { return cPurePrimitivePrimitivePureFunctionParserRuleCall_3_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_4() { return cRightParenthesisKeyword_3_4; }
		
		//{IOEffectFullFunction} 'IOF' '[' effectFullFunction=[EffectFullFunction] ']'
		public Group getGroup_4() { return cGroup_4; }
		
		//{IOEffectFullFunction}
		public Action getIOEffectFullFunctionAction_4_0() { return cIOEffectFullFunctionAction_4_0; }
		
		//'IOF'
		public Keyword getIOFKeyword_4_1() { return cIOFKeyword_4_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_4_2() { return cLeftSquareBracketKeyword_4_2; }
		
		//effectFullFunction=[EffectFullFunction]
		public Assignment getEffectFullFunctionAssignment_4_3() { return cEffectFullFunctionAssignment_4_3; }
		
		//[EffectFullFunction]
		public CrossReference getEffectFullFunctionEffectFullFunctionCrossReference_4_3_0() { return cEffectFullFunctionEffectFullFunctionCrossReference_4_3_0; }
		
		//ID
		public RuleCall getEffectFullFunctionEffectFullFunctionIDTerminalRuleCall_4_3_0_1() { return cEffectFullFunctionEffectFullFunctionIDTerminalRuleCall_4_3_0_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4_4() { return cRightSquareBracketKeyword_4_4; }
		
		//{IOEffectFullFunction} 'IOF' '[' effectFullPrimitive=PrimitiveEffectFullFunction ']'
		public Group getGroup_5() { return cGroup_5; }
		
		//{IOEffectFullFunction}
		public Action getIOEffectFullFunctionAction_5_0() { return cIOEffectFullFunctionAction_5_0; }
		
		//'IOF'
		public Keyword getIOFKeyword_5_1() { return cIOFKeyword_5_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_5_2() { return cLeftSquareBracketKeyword_5_2; }
		
		//effectFullPrimitive=PrimitiveEffectFullFunction
		public Assignment getEffectFullPrimitiveAssignment_5_3() { return cEffectFullPrimitiveAssignment_5_3; }
		
		//PrimitiveEffectFullFunction
		public RuleCall getEffectFullPrimitivePrimitiveEffectFullFunctionParserRuleCall_5_3_0() { return cEffectFullPrimitivePrimitiveEffectFullFunctionParserRuleCall_5_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_5_4() { return cRightSquareBracketKeyword_5_4; }
		
		//EffectFullFunctionValue
		public RuleCall getEffectFullFunctionValueParserRuleCall_6() { return cEffectFullFunctionValueParserRuleCall_6; }
		
		//EffectFullDataValue
		public RuleCall getEffectFullDataValueParserRuleCall_7() { return cEffectFullDataValueParserRuleCall_7; }
		
		//EffectFullProdValue
		public RuleCall getEffectFullProdValueParserRuleCall_8() { return cEffectFullProdValueParserRuleCall_8; }
		
		//EffectFullSumValue
		public RuleCall getEffectFullSumValueParserRuleCall_9() { return cEffectFullSumValueParserRuleCall_9; }
		
		//EffectFullValueRef
		public RuleCall getEffectFullValueRefParserRuleCall_10() { return cEffectFullValueRefParserRuleCall_10; }
	}
	public class UnitValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.UnitValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUnitTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//UnitValue UnitType:
		//	{UnitType} '()'
		@Override public ParserRule getRule() { return rule; }
		
		//{UnitType} '()'
		public Group getGroup() { return cGroup; }
		
		//{UnitType}
		public Action getUnitTypeAction_0() { return cUnitTypeAction_0; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_1() { return cLeftParenthesisRightParenthesisKeyword_1; }
	}
	public class EffectFullFunctionValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.EffectFullFunctionValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueEffectFullLambdaParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//EffectFullFunctionValue EffectFullFunctionType:
		//	value=EffectFullLambda
		@Override public ParserRule getRule() { return rule; }
		
		//value=EffectFullLambda
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//EffectFullLambda
		public RuleCall getValueEffectFullLambdaParserRuleCall_0() { return cValueEffectFullLambdaParserRuleCall_0; }
	}
	public class EffectFullValueRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.EffectFullValueRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEffectFullValueRefAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEffectFullRefKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cValueEffectFullValueCrossReference_3_0 = (CrossReference)cValueAssignment_3.eContents().get(0);
		private final RuleCall cValueEffectFullValueIDTerminalRuleCall_3_0_1 = (RuleCall)cValueEffectFullValueCrossReference_3_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//EffectFullValueRef:
		//	{EffectFullValueRef} 'EffectFullRef' '[' value=[EffectFullValue] ']';
		@Override public ParserRule getRule() { return rule; }
		
		//{EffectFullValueRef} 'EffectFullRef' '[' value=[EffectFullValue] ']'
		public Group getGroup() { return cGroup; }
		
		//{EffectFullValueRef}
		public Action getEffectFullValueRefAction_0() { return cEffectFullValueRefAction_0; }
		
		//'EffectFullRef'
		public Keyword getEffectFullRefKeyword_1() { return cEffectFullRefKeyword_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }
		
		//value=[EffectFullValue]
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//[EffectFullValue]
		public CrossReference getValueEffectFullValueCrossReference_3_0() { return cValueEffectFullValueCrossReference_3_0; }
		
		//ID
		public RuleCall getValueEffectFullValueIDTerminalRuleCall_3_0_1() { return cValueEffectFullValueIDTerminalRuleCall_3_0_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}
	public class EffectFullLambdaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.EffectFullLambda");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cEffectFullLambdaAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cReverseSolidusKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cArgAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cArgArgumentParserRuleCall_0_3_0 = (RuleCall)cArgAssignment_0_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_0_6 = (Keyword)cGroup_0.eContents().get(6);
		private final Assignment cFunctionBodyAssignment_0_7 = (Assignment)cGroup_0.eContents().get(7);
		private final RuleCall cFunctionBodyCompositionFunctionBodyEffectParserRuleCall_0_7_0 = (RuleCall)cFunctionBodyAssignment_0_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_8 = (Keyword)cGroup_0.eContents().get(8);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cEffectFullLambdaAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cReverseSolidusKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cRightSquareBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Assignment cFunctionBodyAssignment_1_6 = (Assignment)cGroup_1.eContents().get(6);
		private final RuleCall cFunctionBodyCompositionFunctionBodyEffectParserRuleCall_1_6_0 = (RuleCall)cFunctionBodyAssignment_1_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_7 = (Keyword)cGroup_1.eContents().get(7);
		
		//EffectFullLambda EffectFullFunctionDefinition:
		//	{EffectFullLambda} '\\' '[' arg=Argument ']' '->' '{' functionBody=CompositionFunctionBodyEffect '}'
		//	| {EffectFullLambda} '\\' '[' ']' '->' '{' functionBody=CompositionFunctionBodyEffect '}'
		@Override public ParserRule getRule() { return rule; }
		
		//{EffectFullLambda} '\\' '[' arg=Argument ']' '->' '{' functionBody=CompositionFunctionBodyEffect '}' |
		//{EffectFullLambda} '\\' '[' ']' '->' '{' functionBody=CompositionFunctionBodyEffect '}'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{EffectFullLambda} '\\' '[' arg=Argument ']' '->' '{' functionBody=CompositionFunctionBodyEffect '}'
		public Group getGroup_0() { return cGroup_0; }
		
		//{EffectFullLambda}
		public Action getEffectFullLambdaAction_0_0() { return cEffectFullLambdaAction_0_0; }
		
		//'\\'
		public Keyword getReverseSolidusKeyword_0_1() { return cReverseSolidusKeyword_0_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0_2() { return cLeftSquareBracketKeyword_0_2; }
		
		//arg=Argument
		public Assignment getArgAssignment_0_3() { return cArgAssignment_0_3; }
		
		//Argument
		public RuleCall getArgArgumentParserRuleCall_0_3_0() { return cArgArgumentParserRuleCall_0_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_0_4() { return cRightSquareBracketKeyword_0_4; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_0_5() { return cHyphenMinusGreaterThanSignKeyword_0_5; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0_6() { return cLeftCurlyBracketKeyword_0_6; }
		
		//functionBody=CompositionFunctionBodyEffect
		public Assignment getFunctionBodyAssignment_0_7() { return cFunctionBodyAssignment_0_7; }
		
		//CompositionFunctionBodyEffect
		public RuleCall getFunctionBodyCompositionFunctionBodyEffectParserRuleCall_0_7_0() { return cFunctionBodyCompositionFunctionBodyEffectParserRuleCall_0_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_0_8() { return cRightCurlyBracketKeyword_0_8; }
		
		//{EffectFullLambda} '\\' '[' ']' '->' '{' functionBody=CompositionFunctionBodyEffect '}'
		public Group getGroup_1() { return cGroup_1; }
		
		//{EffectFullLambda}
		public Action getEffectFullLambdaAction_1_0() { return cEffectFullLambdaAction_1_0; }
		
		//'\\'
		public Keyword getReverseSolidusKeyword_1_1() { return cReverseSolidusKeyword_1_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_2() { return cLeftSquareBracketKeyword_1_2; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_3() { return cRightSquareBracketKeyword_1_3; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1_4() { return cHyphenMinusGreaterThanSignKeyword_1_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_5() { return cLeftCurlyBracketKeyword_1_5; }
		
		//functionBody=CompositionFunctionBodyEffect
		public Assignment getFunctionBodyAssignment_1_6() { return cFunctionBodyAssignment_1_6; }
		
		//CompositionFunctionBodyEffect
		public RuleCall getFunctionBodyCompositionFunctionBodyEffectParserRuleCall_1_6_0() { return cFunctionBodyCompositionFunctionBodyEffectParserRuleCall_1_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_7() { return cRightCurlyBracketKeyword_1_7; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStringValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBooleanValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDataValueParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cFunctionValueParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cUnitValueParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cPureValueRefParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cPureSumValueParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cPureProdValueParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		//Expression:
		//	IntValue
		//	| StringValue
		//	| BooleanValue
		//	| DataValue
		//	| FunctionValue
		//	| UnitValue
		//	| PureValueRef
		//	| PureSumValue
		//	| PureProdValue;
		@Override public ParserRule getRule() { return rule; }
		
		//IntValue | StringValue | BooleanValue | DataValue | FunctionValue | UnitValue | PureValueRef | PureSumValue |
		//PureProdValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IntValue
		public RuleCall getIntValueParserRuleCall_0() { return cIntValueParserRuleCall_0; }
		
		//StringValue
		public RuleCall getStringValueParserRuleCall_1() { return cStringValueParserRuleCall_1; }
		
		//BooleanValue
		public RuleCall getBooleanValueParserRuleCall_2() { return cBooleanValueParserRuleCall_2; }
		
		//DataValue
		public RuleCall getDataValueParserRuleCall_3() { return cDataValueParserRuleCall_3; }
		
		//FunctionValue
		public RuleCall getFunctionValueParserRuleCall_4() { return cFunctionValueParserRuleCall_4; }
		
		//UnitValue
		public RuleCall getUnitValueParserRuleCall_5() { return cUnitValueParserRuleCall_5; }
		
		//PureValueRef
		public RuleCall getPureValueRefParserRuleCall_6() { return cPureValueRefParserRuleCall_6; }
		
		//PureSumValue
		public RuleCall getPureSumValueParserRuleCall_7() { return cPureSumValueParserRuleCall_7; }
		
		//PureProdValue
		public RuleCall getPureProdValueParserRuleCall_8() { return cPureProdValueParserRuleCall_8; }
	}
	public class IntValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.IntValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIntegerTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//IntValue IntegerType:
		//	{IntegerType} value=INT
		@Override public ParserRule getRule() { return rule; }
		
		//{IntegerType} value=INT
		public Group getGroup() { return cGroup; }
		
		//{IntegerType}
		public Action getIntegerTypeAction_0() { return cIntegerTypeAction_0; }
		
		//value=INT
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_1_0() { return cValueINTTerminalRuleCall_1_0; }
	}
	public class StringValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.StringValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStringTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//StringValue StringType:
		//	{StringType} value=STRING
		@Override public ParserRule getRule() { return rule; }
		
		//{StringType} value=STRING
		public Group getGroup() { return cGroup; }
		
		//{StringType}
		public Action getStringTypeAction_0() { return cStringTypeAction_0; }
		
		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
	}
	public class BooleanValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.BooleanValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBooleanTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueBOOLEANTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//BooleanValue BooleanType:
		//	{BooleanType} value=BOOLEAN
		@Override public ParserRule getRule() { return rule; }
		
		//{BooleanType} value=BOOLEAN
		public Group getGroup() { return cGroup; }
		
		//{BooleanType}
		public Action getBooleanTypeAction_0() { return cBooleanTypeAction_0; }
		
		//value=BOOLEAN
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//BOOLEAN
		public RuleCall getValueBOOLEANTerminalRuleCall_1_0() { return cValueBOOLEANTerminalRuleCall_1_0; }
	}
	public class FunctionValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.FunctionValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValuePureLambdaParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//FunctionValue PureFunctionType:
		//	value=PureLambda
		@Override public ParserRule getRule() { return rule; }
		
		//value=PureLambda
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//PureLambda
		public RuleCall getValuePureLambdaParserRuleCall_0() { return cValuePureLambdaParserRuleCall_0; }
	}
	public class DataValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.DataValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDataValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypePureDataCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypePureDataIDTerminalRuleCall_1_0_1 = (RuleCall)cTypePureDataCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueExpressionParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DataValue DataType:
		//	{DataValue} type=[PureData] '(' value=Expression ')'
		@Override public ParserRule getRule() { return rule; }
		
		//{DataValue} type=[PureData] '(' value=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//{DataValue}
		public Action getDataValueAction_0() { return cDataValueAction_0; }
		
		//type=[PureData]
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//[PureData]
		public CrossReference getTypePureDataCrossReference_1_0() { return cTypePureDataCrossReference_1_0; }
		
		//ID
		public RuleCall getTypePureDataIDTerminalRuleCall_1_0_1() { return cTypePureDataIDTerminalRuleCall_1_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//value=Expression
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_3_0() { return cValueExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class EffectFullDataValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.EffectFullDataValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEffectFullDataValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeEffectFullDataCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeEffectFullDataIDTerminalRuleCall_1_0_1 = (RuleCall)cTypeEffectFullDataCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueEffectFullExpressionParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//EffectFullDataValue EffectFullDataType:
		//	{EffectFullDataValue} type=[EffectFullData] '[' value=EffectFullExpression ']'
		@Override public ParserRule getRule() { return rule; }
		
		//{EffectFullDataValue} type=[EffectFullData] '[' value=EffectFullExpression ']'
		public Group getGroup() { return cGroup; }
		
		//{EffectFullDataValue}
		public Action getEffectFullDataValueAction_0() { return cEffectFullDataValueAction_0; }
		
		//type=[EffectFullData]
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//[EffectFullData]
		public CrossReference getTypeEffectFullDataCrossReference_1_0() { return cTypeEffectFullDataCrossReference_1_0; }
		
		//ID
		public RuleCall getTypeEffectFullDataIDTerminalRuleCall_1_0_1() { return cTypeEffectFullDataIDTerminalRuleCall_1_0_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }
		
		//value=EffectFullExpression
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//EffectFullExpression
		public RuleCall getValueEffectFullExpressionParserRuleCall_3_0() { return cValueEffectFullExpressionParserRuleCall_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}
	public class PureValueRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.PureValueRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPureValueRefAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPureRefKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cValuePureValueCrossReference_3_0 = (CrossReference)cValueAssignment_3.eContents().get(0);
		private final RuleCall cValuePureValueIDTerminalRuleCall_3_0_1 = (RuleCall)cValuePureValueCrossReference_3_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//PureValueRef:
		//	{PureValueRef} 'PureRef' '(' value=[PureValue] ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{PureValueRef} 'PureRef' '(' value=[PureValue] ')'
		public Group getGroup() { return cGroup; }
		
		//{PureValueRef}
		public Action getPureValueRefAction_0() { return cPureValueRefAction_0; }
		
		//'PureRef'
		public Keyword getPureRefKeyword_1() { return cPureRefKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//value=[PureValue]
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//[PureValue]
		public CrossReference getValuePureValueCrossReference_3_0() { return cValuePureValueCrossReference_3_0; }
		
		//ID
		public RuleCall getValuePureValueIDTerminalRuleCall_3_0_1() { return cValuePureValueIDTerminalRuleCall_3_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class PureLambdaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.PureLambda");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cPureLambdaAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cReverseSolidusKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cArgAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cArgPureArgumentParserRuleCall_0_3_0 = (RuleCall)cArgAssignment_0_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_0_6 = (Keyword)cGroup_0.eContents().get(6);
		private final Assignment cFunctionBodyAssignment_0_7 = (Assignment)cGroup_0.eContents().get(7);
		private final RuleCall cFunctionBodyCompositionFunctionBodyPureParserRuleCall_0_7_0 = (RuleCall)cFunctionBodyAssignment_0_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_8 = (Keyword)cGroup_0.eContents().get(8);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cPureLambdaAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cReverseSolidusKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Assignment cFunctionBodyAssignment_1_6 = (Assignment)cGroup_1.eContents().get(6);
		private final RuleCall cFunctionBodyCompositionFunctionBodyPureParserRuleCall_1_6_0 = (RuleCall)cFunctionBodyAssignment_1_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_7 = (Keyword)cGroup_1.eContents().get(7);
		
		//PureLambda PureFunctionDefinition:
		//	{PureLambda} '\\' '(' arg=PureArgument ')' '->' '{' functionBody=CompositionFunctionBodyPure '}'
		//	| {PureLambda} '\\' '(' ')' '->' '{' functionBody=CompositionFunctionBodyPure '}'
		@Override public ParserRule getRule() { return rule; }
		
		//{PureLambda} '\\' '(' arg=PureArgument ')' '->' '{' functionBody=CompositionFunctionBodyPure '}' | {PureLambda} '\\' '('
		//')' '->' '{' functionBody=CompositionFunctionBodyPure '}'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{PureLambda} '\\' '(' arg=PureArgument ')' '->' '{' functionBody=CompositionFunctionBodyPure '}'
		public Group getGroup_0() { return cGroup_0; }
		
		//{PureLambda}
		public Action getPureLambdaAction_0_0() { return cPureLambdaAction_0_0; }
		
		//'\\'
		public Keyword getReverseSolidusKeyword_0_1() { return cReverseSolidusKeyword_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_2() { return cLeftParenthesisKeyword_0_2; }
		
		//arg=PureArgument
		public Assignment getArgAssignment_0_3() { return cArgAssignment_0_3; }
		
		//PureArgument
		public RuleCall getArgPureArgumentParserRuleCall_0_3_0() { return cArgPureArgumentParserRuleCall_0_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_4() { return cRightParenthesisKeyword_0_4; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_0_5() { return cHyphenMinusGreaterThanSignKeyword_0_5; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0_6() { return cLeftCurlyBracketKeyword_0_6; }
		
		//functionBody=CompositionFunctionBodyPure
		public Assignment getFunctionBodyAssignment_0_7() { return cFunctionBodyAssignment_0_7; }
		
		//CompositionFunctionBodyPure
		public RuleCall getFunctionBodyCompositionFunctionBodyPureParserRuleCall_0_7_0() { return cFunctionBodyCompositionFunctionBodyPureParserRuleCall_0_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_0_8() { return cRightCurlyBracketKeyword_0_8; }
		
		//{PureLambda} '\\' '(' ')' '->' '{' functionBody=CompositionFunctionBodyPure '}'
		public Group getGroup_1() { return cGroup_1; }
		
		//{PureLambda}
		public Action getPureLambdaAction_1_0() { return cPureLambdaAction_1_0; }
		
		//'\\'
		public Keyword getReverseSolidusKeyword_1_1() { return cReverseSolidusKeyword_1_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_2() { return cLeftParenthesisKeyword_1_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1_4() { return cHyphenMinusGreaterThanSignKeyword_1_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_5() { return cLeftCurlyBracketKeyword_1_5; }
		
		//functionBody=CompositionFunctionBodyPure
		public Assignment getFunctionBodyAssignment_1_6() { return cFunctionBodyAssignment_1_6; }
		
		//CompositionFunctionBodyPure
		public RuleCall getFunctionBodyCompositionFunctionBodyPureParserRuleCall_1_6_0() { return cFunctionBodyCompositionFunctionBodyPureParserRuleCall_1_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_7() { return cRightCurlyBracketKeyword_1_7; }
	}
	public class PureProdValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.PureProdValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPureProdValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cProdAdtElement1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cProdAdtElement1ExpressionParserRuleCall_2_0 = (RuleCall)cProdAdtElement1Assignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cProdAdtElement2Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cProdAdtElement2ExpressionParserRuleCall_4_0 = (RuleCall)cProdAdtElement2Assignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//PureProdValue PureAlgebraicType:
		//	{PureProdValue} '(' prodAdtElement1=Expression ',' prodAdtElement2=Expression ')'
		@Override public ParserRule getRule() { return rule; }
		
		//{PureProdValue} '(' prodAdtElement1=Expression ',' prodAdtElement2=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//{PureProdValue}
		public Action getPureProdValueAction_0() { return cPureProdValueAction_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//prodAdtElement1=Expression
		public Assignment getProdAdtElement1Assignment_2() { return cProdAdtElement1Assignment_2; }
		
		//Expression
		public RuleCall getProdAdtElement1ExpressionParserRuleCall_2_0() { return cProdAdtElement1ExpressionParserRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//prodAdtElement2=Expression
		public Assignment getProdAdtElement2Assignment_4() { return cProdAdtElement2Assignment_4; }
		
		//Expression
		public RuleCall getProdAdtElement2ExpressionParserRuleCall_4_0() { return cProdAdtElement2ExpressionParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class PureSumValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.PureSumValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cPureSumValueAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cLeftKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cSumAdtElement1Assignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cSumAdtElement1ExpressionParserRuleCall_0_3_0 = (RuleCall)cSumAdtElement1Assignment_0_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cPureSumValueAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cRightKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cSumAdtElement2Assignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cSumAdtElement2ExpressionParserRuleCall_1_3_0 = (RuleCall)cSumAdtElement2Assignment_1_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		
		//PureSumValue PureAlgebraicType:
		//	{PureSumValue} 'Left' '(' sumAdtElement1=Expression ')'
		//	| {PureSumValue} 'Right' '(' sumAdtElement2=Expression ')'
		@Override public ParserRule getRule() { return rule; }
		
		//{PureSumValue} 'Left' '(' sumAdtElement1=Expression ')' | {PureSumValue} 'Right' '(' sumAdtElement2=Expression ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{PureSumValue} 'Left' '(' sumAdtElement1=Expression ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//{PureSumValue}
		public Action getPureSumValueAction_0_0() { return cPureSumValueAction_0_0; }
		
		//'Left'
		public Keyword getLeftKeyword_0_1() { return cLeftKeyword_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_2() { return cLeftParenthesisKeyword_0_2; }
		
		//sumAdtElement1=Expression
		public Assignment getSumAdtElement1Assignment_0_3() { return cSumAdtElement1Assignment_0_3; }
		
		//Expression
		public RuleCall getSumAdtElement1ExpressionParserRuleCall_0_3_0() { return cSumAdtElement1ExpressionParserRuleCall_0_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_4() { return cRightParenthesisKeyword_0_4; }
		
		//{PureSumValue} 'Right' '(' sumAdtElement2=Expression ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//{PureSumValue}
		public Action getPureSumValueAction_1_0() { return cPureSumValueAction_1_0; }
		
		//'Right'
		public Keyword getRightKeyword_1_1() { return cRightKeyword_1_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_2() { return cLeftParenthesisKeyword_1_2; }
		
		//sumAdtElement2=Expression
		public Assignment getSumAdtElement2Assignment_1_3() { return cSumAdtElement2Assignment_1_3; }
		
		//Expression
		public RuleCall getSumAdtElement2ExpressionParserRuleCall_1_3_0() { return cSumAdtElement2ExpressionParserRuleCall_1_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_4() { return cRightParenthesisKeyword_1_4; }
	}
	public class EffectFullProdValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.EffectFullProdValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEffectFullProdValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cProdAdtElement1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cProdAdtElement1EffectFullExpressionParserRuleCall_2_0 = (RuleCall)cProdAdtElement1Assignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cProdAdtElement2Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cProdAdtElement2EffectFullExpressionParserRuleCall_4_0 = (RuleCall)cProdAdtElement2Assignment_4.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//EffectFullProdValue EffectFullAlgebraicType:
		//	{EffectFullProdValue} '[' prodAdtElement1=EffectFullExpression ',' prodAdtElement2=EffectFullExpression ']'
		@Override public ParserRule getRule() { return rule; }
		
		//{EffectFullProdValue} '[' prodAdtElement1=EffectFullExpression ',' prodAdtElement2=EffectFullExpression ']'
		public Group getGroup() { return cGroup; }
		
		//{EffectFullProdValue}
		public Action getEffectFullProdValueAction_0() { return cEffectFullProdValueAction_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//prodAdtElement1=EffectFullExpression
		public Assignment getProdAdtElement1Assignment_2() { return cProdAdtElement1Assignment_2; }
		
		//EffectFullExpression
		public RuleCall getProdAdtElement1EffectFullExpressionParserRuleCall_2_0() { return cProdAdtElement1EffectFullExpressionParserRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//prodAdtElement2=EffectFullExpression
		public Assignment getProdAdtElement2Assignment_4() { return cProdAdtElement2Assignment_4; }
		
		//EffectFullExpression
		public RuleCall getProdAdtElement2EffectFullExpressionParserRuleCall_4_0() { return cProdAdtElement2EffectFullExpressionParserRuleCall_4_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }
	}
	public class EffectFullSumValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.EffectFullSumValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cEffectFullSumValueAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cLeftKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cSumAdtElement1Assignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cSumAdtElement1EffectFullExpressionParserRuleCall_0_3_0 = (RuleCall)cSumAdtElement1Assignment_0_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cEffectFullSumValueAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cRightKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cSumAdtElement2Assignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cSumAdtElement2EffectFullExpressionParserRuleCall_1_3_0 = (RuleCall)cSumAdtElement2Assignment_1_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		
		//EffectFullSumValue EffectFullAlgebraicType:
		//	{EffectFullSumValue} 'Left' '[' sumAdtElement1=EffectFullExpression ']'
		//	| {EffectFullSumValue} 'Right' '[' sumAdtElement2=EffectFullExpression ']'
		@Override public ParserRule getRule() { return rule; }
		
		//{EffectFullSumValue} 'Left' '[' sumAdtElement1=EffectFullExpression ']' | {EffectFullSumValue} 'Right' '['
		//sumAdtElement2=EffectFullExpression ']'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{EffectFullSumValue} 'Left' '[' sumAdtElement1=EffectFullExpression ']'
		public Group getGroup_0() { return cGroup_0; }
		
		//{EffectFullSumValue}
		public Action getEffectFullSumValueAction_0_0() { return cEffectFullSumValueAction_0_0; }
		
		//'Left'
		public Keyword getLeftKeyword_0_1() { return cLeftKeyword_0_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0_2() { return cLeftSquareBracketKeyword_0_2; }
		
		//sumAdtElement1=EffectFullExpression
		public Assignment getSumAdtElement1Assignment_0_3() { return cSumAdtElement1Assignment_0_3; }
		
		//EffectFullExpression
		public RuleCall getSumAdtElement1EffectFullExpressionParserRuleCall_0_3_0() { return cSumAdtElement1EffectFullExpressionParserRuleCall_0_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_0_4() { return cRightSquareBracketKeyword_0_4; }
		
		//{EffectFullSumValue} 'Right' '[' sumAdtElement2=EffectFullExpression ']'
		public Group getGroup_1() { return cGroup_1; }
		
		//{EffectFullSumValue}
		public Action getEffectFullSumValueAction_1_0() { return cEffectFullSumValueAction_1_0; }
		
		//'Right'
		public Keyword getRightKeyword_1_1() { return cRightKeyword_1_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_2() { return cLeftSquareBracketKeyword_1_2; }
		
		//sumAdtElement2=EffectFullExpression
		public Assignment getSumAdtElement2Assignment_1_3() { return cSumAdtElement2Assignment_1_3; }
		
		//EffectFullExpression
		public RuleCall getSumAdtElement2EffectFullExpressionParserRuleCall_1_3_0() { return cSumAdtElement2EffectFullExpressionParserRuleCall_1_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_4() { return cRightSquareBracketKeyword_1_4; }
	}
	public class PrimitivePureFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.PrimitivePureFunction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntToStringParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntPowParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPlusParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cMinusParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cTimesParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cModParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cApplyFParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cLeftAlgebraicParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cRightAlgebraicParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cEqualsParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cMinorEqualsParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cMajorEqualsParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cMinorParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cMajorParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cLogicAndParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cLogicOrParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cExtractPureParserRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		private final RuleCall cIsLeftPureParserRuleCall_17 = (RuleCall)cAlternatives.eContents().get(17);
		private final RuleCall cIsRightPureParserRuleCall_18 = (RuleCall)cAlternatives.eContents().get(18);
		private final RuleCall cPureIfParserRuleCall_19 = (RuleCall)cAlternatives.eContents().get(19);
		
		///////////////////////////////////////////////////////////////////////
		//// Primitives
		///////////////////////////////////////////////////////////////////////
		//PrimitivePureFunction:
		//	IntToString | IntPow | Plus | Minus | Times | Mod | ApplyF | LeftAlgebraic | RightAlgebraic
		//	| Equals | MinorEquals | MajorEquals | Minor | Major | LogicAnd | LogicOr
		//	| ExtractPure | IsLeftPure | IsRightPure | PureIf;
		@Override public ParserRule getRule() { return rule; }
		
		//IntToString | IntPow | Plus | Minus | Times | Mod | ApplyF | LeftAlgebraic | RightAlgebraic | Equals | MinorEquals |
		//MajorEquals | Minor | Major | LogicAnd | LogicOr | ExtractPure | IsLeftPure | IsRightPure | PureIf
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IntToString
		public RuleCall getIntToStringParserRuleCall_0() { return cIntToStringParserRuleCall_0; }
		
		//IntPow
		public RuleCall getIntPowParserRuleCall_1() { return cIntPowParserRuleCall_1; }
		
		//Plus
		public RuleCall getPlusParserRuleCall_2() { return cPlusParserRuleCall_2; }
		
		//Minus
		public RuleCall getMinusParserRuleCall_3() { return cMinusParserRuleCall_3; }
		
		//Times
		public RuleCall getTimesParserRuleCall_4() { return cTimesParserRuleCall_4; }
		
		//Mod
		public RuleCall getModParserRuleCall_5() { return cModParserRuleCall_5; }
		
		//ApplyF
		public RuleCall getApplyFParserRuleCall_6() { return cApplyFParserRuleCall_6; }
		
		//LeftAlgebraic
		public RuleCall getLeftAlgebraicParserRuleCall_7() { return cLeftAlgebraicParserRuleCall_7; }
		
		//RightAlgebraic
		public RuleCall getRightAlgebraicParserRuleCall_8() { return cRightAlgebraicParserRuleCall_8; }
		
		//Equals
		public RuleCall getEqualsParserRuleCall_9() { return cEqualsParserRuleCall_9; }
		
		//MinorEquals
		public RuleCall getMinorEqualsParserRuleCall_10() { return cMinorEqualsParserRuleCall_10; }
		
		//MajorEquals
		public RuleCall getMajorEqualsParserRuleCall_11() { return cMajorEqualsParserRuleCall_11; }
		
		//Minor
		public RuleCall getMinorParserRuleCall_12() { return cMinorParserRuleCall_12; }
		
		//Major
		public RuleCall getMajorParserRuleCall_13() { return cMajorParserRuleCall_13; }
		
		//LogicAnd
		public RuleCall getLogicAndParserRuleCall_14() { return cLogicAndParserRuleCall_14; }
		
		//LogicOr
		public RuleCall getLogicOrParserRuleCall_15() { return cLogicOrParserRuleCall_15; }
		
		//ExtractPure
		public RuleCall getExtractPureParserRuleCall_16() { return cExtractPureParserRuleCall_16; }
		
		//IsLeftPure
		public RuleCall getIsLeftPureParserRuleCall_17() { return cIsLeftPureParserRuleCall_17; }
		
		//IsRightPure
		public RuleCall getIsRightPureParserRuleCall_18() { return cIsRightPureParserRuleCall_18; }
		
		//PureIf
		public RuleCall getPureIfParserRuleCall_19() { return cPureIfParserRuleCall_19; }
	}
	public class IntToStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.IntToString");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIntToStringAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIntToStringKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//IntToString:
		//	{IntToString} 'intToString';
		@Override public ParserRule getRule() { return rule; }
		
		//{IntToString} 'intToString'
		public Group getGroup() { return cGroup; }
		
		//{IntToString}
		public Action getIntToStringAction_0() { return cIntToStringAction_0; }
		
		//'intToString'
		public Keyword getIntToStringKeyword_1() { return cIntToStringKeyword_1; }
	}
	public class IntPowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.IntPow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIntPowAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIntPowKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//IntPow:
		//	{IntPow} 'intPow';
		@Override public ParserRule getRule() { return rule; }
		
		//{IntPow} 'intPow'
		public Group getGroup() { return cGroup; }
		
		//{IntPow}
		public Action getIntPowAction_0() { return cIntPowAction_0; }
		
		//'intPow'
		public Keyword getIntPowKeyword_1() { return cIntPowKeyword_1; }
	}
	public class PlusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.Plus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPlusAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPlusSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cTypeAlternatives_2_0 = (Alternatives)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypeIntegerTypeParserRuleCall_2_0_0 = (RuleCall)cTypeAlternatives_2_0.eContents().get(0);
		private final RuleCall cTypeStringTypeParserRuleCall_2_0_1 = (RuleCall)cTypeAlternatives_2_0.eContents().get(1);
		
		//Plus:
		//	{Plus} '+' type=(IntegerType | StringType);
		@Override public ParserRule getRule() { return rule; }
		
		//{Plus} '+' type=(IntegerType | StringType)
		public Group getGroup() { return cGroup; }
		
		//{Plus}
		public Action getPlusAction_0() { return cPlusAction_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1() { return cPlusSignKeyword_1; }
		
		//type=(IntegerType | StringType)
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//(IntegerType | StringType)
		public Alternatives getTypeAlternatives_2_0() { return cTypeAlternatives_2_0; }
		
		//IntegerType
		public RuleCall getTypeIntegerTypeParserRuleCall_2_0_0() { return cTypeIntegerTypeParserRuleCall_2_0_0; }
		
		//StringType
		public RuleCall getTypeStringTypeParserRuleCall_2_0_1() { return cTypeStringTypeParserRuleCall_2_0_1; }
	}
	public class MinusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.Minus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMinusAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Minus:
		//	{Minus} '-';
		@Override public ParserRule getRule() { return rule; }
		
		//{Minus} '-'
		public Group getGroup() { return cGroup; }
		
		//{Minus}
		public Action getMinusAction_0() { return cMinusAction_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
	}
	public class TimesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.Times");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTimesAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Times:
		//	{Times} '*';
		@Override public ParserRule getRule() { return rule; }
		
		//{Times} '*'
		public Group getGroup() { return cGroup; }
		
		//{Times}
		public Action getTimesAction_0() { return cTimesAction_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1() { return cAsteriskKeyword_1; }
	}
	public class ModElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.Mod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cModAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cModKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Mod:
		//	{Mod} 'mod';
		@Override public ParserRule getRule() { return rule; }
		
		//{Mod} 'mod'
		public Group getGroup() { return cGroup; }
		
		//{Mod}
		public Action getModAction_0() { return cModAction_0; }
		
		//'mod'
		public Keyword getModKeyword_1() { return cModKeyword_1; }
	}
	public class LeftAlgebraicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.LeftAlgebraic");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLeftAlgebraicAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftADTKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypePureAlgebraicTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//LeftAlgebraic:
		//	{LeftAlgebraic} 'leftADT' type=PureAlgebraicType;
		@Override public ParserRule getRule() { return rule; }
		
		//{LeftAlgebraic} 'leftADT' type=PureAlgebraicType
		public Group getGroup() { return cGroup; }
		
		//{LeftAlgebraic}
		public Action getLeftAlgebraicAction_0() { return cLeftAlgebraicAction_0; }
		
		//'leftADT'
		public Keyword getLeftADTKeyword_1() { return cLeftADTKeyword_1; }
		
		//type=PureAlgebraicType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//PureAlgebraicType
		public RuleCall getTypePureAlgebraicTypeParserRuleCall_2_0() { return cTypePureAlgebraicTypeParserRuleCall_2_0; }
	}
	public class RightAlgebraicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.RightAlgebraic");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRightAlgebraicAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRightADTKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypePureAlgebraicTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//RightAlgebraic:
		//	{RightAlgebraic} 'rightADT' type=PureAlgebraicType;
		@Override public ParserRule getRule() { return rule; }
		
		//{RightAlgebraic} 'rightADT' type=PureAlgebraicType
		public Group getGroup() { return cGroup; }
		
		//{RightAlgebraic}
		public Action getRightAlgebraicAction_0() { return cRightAlgebraicAction_0; }
		
		//'rightADT'
		public Keyword getRightADTKeyword_1() { return cRightADTKeyword_1; }
		
		//type=PureAlgebraicType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//PureAlgebraicType
		public RuleCall getTypePureAlgebraicTypeParserRuleCall_2_0() { return cTypePureAlgebraicTypeParserRuleCall_2_0; }
	}
	public class ApplyFElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.ApplyF");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cApplyFAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cApplyFKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFunctionTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFunctionTypePureFunctionTypeParserRuleCall_2_0 = (RuleCall)cFunctionTypeAssignment_2.eContents().get(0);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueApplyFFactorParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//ApplyF:
		//	{ApplyF} 'applyF' functionType=PureFunctionType value=ApplyFFactor;
		@Override public ParserRule getRule() { return rule; }
		
		//{ApplyF} 'applyF' functionType=PureFunctionType value=ApplyFFactor
		public Group getGroup() { return cGroup; }
		
		//{ApplyF}
		public Action getApplyFAction_0() { return cApplyFAction_0; }
		
		//'applyF'
		public Keyword getApplyFKeyword_1() { return cApplyFKeyword_1; }
		
		//functionType=PureFunctionType
		public Assignment getFunctionTypeAssignment_2() { return cFunctionTypeAssignment_2; }
		
		//PureFunctionType
		public RuleCall getFunctionTypePureFunctionTypeParserRuleCall_2_0() { return cFunctionTypePureFunctionTypeParserRuleCall_2_0; }
		
		//value=ApplyFFactor
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//ApplyFFactor
		public RuleCall getValueApplyFFactorParserRuleCall_3_0() { return cValueApplyFFactorParserRuleCall_3_0; }
	}
	public class ApplyFFactorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.ApplyFFactor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValueReferenceAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final CrossReference cValueReferencePureFunctionCrossReference_0_0 = (CrossReference)cValueReferenceAssignment_0.eContents().get(0);
		private final RuleCall cValueReferencePureFunctionIDTerminalRuleCall_0_0_1 = (RuleCall)cValueReferencePureFunctionCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cValueExpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueExpressionExpressionParserRuleCall_1_1_0 = (RuleCall)cValueExpressionAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//ApplyFFactor:
		//	valueReference=[PureFunction] | '(' valueExpression=Expression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//valueReference=[PureFunction] | '(' valueExpression=Expression ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//valueReference=[PureFunction]
		public Assignment getValueReferenceAssignment_0() { return cValueReferenceAssignment_0; }
		
		//[PureFunction]
		public CrossReference getValueReferencePureFunctionCrossReference_0_0() { return cValueReferencePureFunctionCrossReference_0_0; }
		
		//ID
		public RuleCall getValueReferencePureFunctionIDTerminalRuleCall_0_0_1() { return cValueReferencePureFunctionIDTerminalRuleCall_0_0_1; }
		
		//'(' valueExpression=Expression ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//valueExpression=Expression
		public Assignment getValueExpressionAssignment_1_1() { return cValueExpressionAssignment_1_1; }
		
		//Expression
		public RuleCall getValueExpressionExpressionParserRuleCall_1_1_0() { return cValueExpressionExpressionParserRuleCall_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}
	public class EqualsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.Equals");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEqualsAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cTypeAlternatives_2_0 = (Alternatives)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypeIntegerTypeParserRuleCall_2_0_0 = (RuleCall)cTypeAlternatives_2_0.eContents().get(0);
		private final RuleCall cTypeStringTypeParserRuleCall_2_0_1 = (RuleCall)cTypeAlternatives_2_0.eContents().get(1);
		private final RuleCall cTypeBooleanTypeParserRuleCall_2_0_2 = (RuleCall)cTypeAlternatives_2_0.eContents().get(2);
		
		//Equals:
		//	{Equals} '==' type=(IntegerType | StringType | BooleanType);
		@Override public ParserRule getRule() { return rule; }
		
		//{Equals} '==' type=(IntegerType | StringType | BooleanType)
		public Group getGroup() { return cGroup; }
		
		//{Equals}
		public Action getEqualsAction_0() { return cEqualsAction_0; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_1() { return cEqualsSignEqualsSignKeyword_1; }
		
		//type=(IntegerType | StringType | BooleanType)
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//(IntegerType | StringType | BooleanType)
		public Alternatives getTypeAlternatives_2_0() { return cTypeAlternatives_2_0; }
		
		//IntegerType
		public RuleCall getTypeIntegerTypeParserRuleCall_2_0_0() { return cTypeIntegerTypeParserRuleCall_2_0_0; }
		
		//StringType
		public RuleCall getTypeStringTypeParserRuleCall_2_0_1() { return cTypeStringTypeParserRuleCall_2_0_1; }
		
		//BooleanType
		public RuleCall getTypeBooleanTypeParserRuleCall_2_0_2() { return cTypeBooleanTypeParserRuleCall_2_0_2; }
	}
	public class MinorEqualsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.MinorEquals");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMinorEqualsAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//MinorEquals:
		//	{MinorEquals} '<=';
		@Override public ParserRule getRule() { return rule; }
		
		//{MinorEquals} '<='
		public Group getGroup() { return cGroup; }
		
		//{MinorEquals}
		public Action getMinorEqualsAction_0() { return cMinorEqualsAction_0; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_1() { return cLessThanSignEqualsSignKeyword_1; }
	}
	public class MajorEqualsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.MajorEquals");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMajorEqualsAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cGreaterThanSignEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//MajorEquals:
		//	{MajorEquals} '>=';
		@Override public ParserRule getRule() { return rule; }
		
		//{MajorEquals} '>='
		public Group getGroup() { return cGroup; }
		
		//{MajorEquals}
		public Action getMajorEqualsAction_0() { return cMajorEqualsAction_0; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_1() { return cGreaterThanSignEqualsSignKeyword_1; }
	}
	public class MinorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.Minor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMinorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Minor:
		//	{Minor} '<';
		@Override public ParserRule getRule() { return rule; }
		
		//{Minor} '<'
		public Group getGroup() { return cGroup; }
		
		//{Minor}
		public Action getMinorAction_0() { return cMinorAction_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }
	}
	public class MajorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.Major");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMajorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Major:
		//	{Major} '>';
		@Override public ParserRule getRule() { return rule; }
		
		//{Major} '>'
		public Group getGroup() { return cGroup; }
		
		//{Major}
		public Action getMajorAction_0() { return cMajorAction_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_1() { return cGreaterThanSignKeyword_1; }
	}
	public class LogicAndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.LogicAnd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLogicAndAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAmpersandAmpersandKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//LogicAnd:
		//	{LogicAnd} '&&';
		@Override public ParserRule getRule() { return rule; }
		
		//{LogicAnd} '&&'
		public Group getGroup() { return cGroup; }
		
		//{LogicAnd}
		public Action getLogicAndAction_0() { return cLogicAndAction_0; }
		
		//'&&'
		public Keyword getAmpersandAmpersandKeyword_1() { return cAmpersandAmpersandKeyword_1; }
	}
	public class LogicOrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.LogicOr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLogicOrAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//LogicOr:
		//	{LogicOr} '||';
		@Override public ParserRule getRule() { return rule; }
		
		//{LogicOr} '||'
		public Group getGroup() { return cGroup; }
		
		//{LogicOr}
		public Action getLogicOrAction_0() { return cLogicOrAction_0; }
		
		//'||'
		public Keyword getVerticalLineVerticalLineKeyword_1() { return cVerticalLineVerticalLineKeyword_1; }
	}
	public class ExtractPureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.ExtractPure");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExtractPureAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cExtractKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDataAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cDataPureDataCrossReference_2_0 = (CrossReference)cDataAssignment_2.eContents().get(0);
		private final RuleCall cDataPureDataIDTerminalRuleCall_2_0_1 = (RuleCall)cDataPureDataCrossReference_2_0.eContents().get(1);
		
		//ExtractPure:
		//	{ExtractPure} 'extract' data=[PureData];
		@Override public ParserRule getRule() { return rule; }
		
		//{ExtractPure} 'extract' data=[PureData]
		public Group getGroup() { return cGroup; }
		
		//{ExtractPure}
		public Action getExtractPureAction_0() { return cExtractPureAction_0; }
		
		//'extract'
		public Keyword getExtractKeyword_1() { return cExtractKeyword_1; }
		
		//data=[PureData]
		public Assignment getDataAssignment_2() { return cDataAssignment_2; }
		
		//[PureData]
		public CrossReference getDataPureDataCrossReference_2_0() { return cDataPureDataCrossReference_2_0; }
		
		//ID
		public RuleCall getDataPureDataIDTerminalRuleCall_2_0_1() { return cDataPureDataIDTerminalRuleCall_2_0_1; }
	}
	public class IsLeftPureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.IsLeftPure");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIsLeftPureAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIsLeftKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypePureAlgebraicTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//IsLeftPure:
		//	{IsLeftPure} 'isLeft' type=PureAlgebraicType;
		@Override public ParserRule getRule() { return rule; }
		
		//{IsLeftPure} 'isLeft' type=PureAlgebraicType
		public Group getGroup() { return cGroup; }
		
		//{IsLeftPure}
		public Action getIsLeftPureAction_0() { return cIsLeftPureAction_0; }
		
		//'isLeft'
		public Keyword getIsLeftKeyword_1() { return cIsLeftKeyword_1; }
		
		//type=PureAlgebraicType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//PureAlgebraicType
		public RuleCall getTypePureAlgebraicTypeParserRuleCall_2_0() { return cTypePureAlgebraicTypeParserRuleCall_2_0; }
	}
	public class IsRightPureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.IsRightPure");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIsRightPureAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIsRightKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypePureAlgebraicTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//IsRightPure:
		//	{IsRightPure} 'isRight' type=PureAlgebraicType;
		@Override public ParserRule getRule() { return rule; }
		
		//{IsRightPure} 'isRight' type=PureAlgebraicType
		public Group getGroup() { return cGroup; }
		
		//{IsRightPure}
		public Action getIsRightPureAction_0() { return cIsRightPureAction_0; }
		
		//'isRight'
		public Keyword getIsRightKeyword_1() { return cIsRightKeyword_1; }
		
		//type=PureAlgebraicType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//PureAlgebraicType
		public RuleCall getTypePureAlgebraicTypeParserRuleCall_2_0() { return cTypePureAlgebraicTypeParserRuleCall_2_0; }
	}
	public class PureIfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.PureIf");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPureIfAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cThenAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cThenPureIfBodyParserRuleCall_4_0 = (RuleCall)cThenAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cElseKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cLeftCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cElseAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cElsePureIfBodyParserRuleCall_8_0 = (RuleCall)cElseAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//PureIf:
		//	{PureIf} 'if' 'then' '{' then=PureIfBody '}' 'else' '{' else=PureIfBody '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{PureIf} 'if' 'then' '{' then=PureIfBody '}' 'else' '{' else=PureIfBody '}'
		public Group getGroup() { return cGroup; }
		
		//{PureIf}
		public Action getPureIfAction_0() { return cPureIfAction_0; }
		
		//'if'
		public Keyword getIfKeyword_1() { return cIfKeyword_1; }
		
		//'then'
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//then=PureIfBody
		public Assignment getThenAssignment_4() { return cThenAssignment_4; }
		
		//PureIfBody
		public RuleCall getThenPureIfBodyParserRuleCall_4_0() { return cThenPureIfBodyParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
		
		//'else'
		public Keyword getElseKeyword_6() { return cElseKeyword_6; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7() { return cLeftCurlyBracketKeyword_7; }
		
		//else=PureIfBody
		public Assignment getElseAssignment_8() { return cElseAssignment_8; }
		
		//PureIfBody
		public RuleCall getElsePureIfBodyParserRuleCall_8_0() { return cElsePureIfBodyParserRuleCall_8_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class PureIfBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.PureIfBody");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cFunctionReferenceAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final CrossReference cFunctionReferencePureFunctionCrossReference_0_0 = (CrossReference)cFunctionReferenceAssignment_0.eContents().get(0);
		private final RuleCall cFunctionReferencePureFunctionIDTerminalRuleCall_0_0_1 = (RuleCall)cFunctionReferencePureFunctionCrossReference_0_0.eContents().get(1);
		private final Assignment cFunctionExpressionAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cFunctionExpressionExpressionParserRuleCall_1_0 = (RuleCall)cFunctionExpressionAssignment_1.eContents().get(0);
		
		//PureIfBody:
		//	functionReference=[PureFunction] | functionExpression=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//functionReference=[PureFunction] | functionExpression=Expression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//functionReference=[PureFunction]
		public Assignment getFunctionReferenceAssignment_0() { return cFunctionReferenceAssignment_0; }
		
		//[PureFunction]
		public CrossReference getFunctionReferencePureFunctionCrossReference_0_0() { return cFunctionReferencePureFunctionCrossReference_0_0; }
		
		//ID
		public RuleCall getFunctionReferencePureFunctionIDTerminalRuleCall_0_0_1() { return cFunctionReferencePureFunctionIDTerminalRuleCall_0_0_1; }
		
		//functionExpression=Expression
		public Assignment getFunctionExpressionAssignment_1() { return cFunctionExpressionAssignment_1; }
		
		//Expression
		public RuleCall getFunctionExpressionExpressionParserRuleCall_1_0() { return cFunctionExpressionExpressionParserRuleCall_1_0; }
	}
	public class PrimitiveEffectFullFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.PrimitiveEffectFullFunction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimitivePrintParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cApplyFIOParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPrimitiveReturnParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cLeftAlgebraicIOParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cRightAlgebraicIOParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cExtractEffectFullParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cLiftPureFunctionParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cLiftEffectFullFunctionParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cIsLeftEffectFullParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cIsRightEffectFullParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cEffectFullIfParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		
		//PrimitiveEffectFullFunction:
		//	PrimitivePrint | ApplyFIO | PrimitiveReturn | LeftAlgebraicIO | RightAlgebraicIO | ExtractEffectFull
		//	| LiftPureFunction | LiftEffectFullFunction | IsLeftEffectFull | IsRightEffectFull | EffectFullIf;
		@Override public ParserRule getRule() { return rule; }
		
		//PrimitivePrint | ApplyFIO | PrimitiveReturn | LeftAlgebraicIO | RightAlgebraicIO | ExtractEffectFull | LiftPureFunction
		//| LiftEffectFullFunction | IsLeftEffectFull | IsRightEffectFull | EffectFullIf
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PrimitivePrint
		public RuleCall getPrimitivePrintParserRuleCall_0() { return cPrimitivePrintParserRuleCall_0; }
		
		//ApplyFIO
		public RuleCall getApplyFIOParserRuleCall_1() { return cApplyFIOParserRuleCall_1; }
		
		//PrimitiveReturn
		public RuleCall getPrimitiveReturnParserRuleCall_2() { return cPrimitiveReturnParserRuleCall_2; }
		
		//LeftAlgebraicIO
		public RuleCall getLeftAlgebraicIOParserRuleCall_3() { return cLeftAlgebraicIOParserRuleCall_3; }
		
		//RightAlgebraicIO
		public RuleCall getRightAlgebraicIOParserRuleCall_4() { return cRightAlgebraicIOParserRuleCall_4; }
		
		//ExtractEffectFull
		public RuleCall getExtractEffectFullParserRuleCall_5() { return cExtractEffectFullParserRuleCall_5; }
		
		//LiftPureFunction
		public RuleCall getLiftPureFunctionParserRuleCall_6() { return cLiftPureFunctionParserRuleCall_6; }
		
		//LiftEffectFullFunction
		public RuleCall getLiftEffectFullFunctionParserRuleCall_7() { return cLiftEffectFullFunctionParserRuleCall_7; }
		
		//IsLeftEffectFull
		public RuleCall getIsLeftEffectFullParserRuleCall_8() { return cIsLeftEffectFullParserRuleCall_8; }
		
		//IsRightEffectFull
		public RuleCall getIsRightEffectFullParserRuleCall_9() { return cIsRightEffectFullParserRuleCall_9; }
		
		//EffectFullIf
		public RuleCall getEffectFullIfParserRuleCall_10() { return cEffectFullIfParserRuleCall_10; }
	}
	public class PrimitivePrintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.PrimitivePrint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPrimitivePrintAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPrintKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//PrimitivePrint:
		//	{PrimitivePrint} "print";
		@Override public ParserRule getRule() { return rule; }
		
		//{PrimitivePrint} "print"
		public Group getGroup() { return cGroup; }
		
		//{PrimitivePrint}
		public Action getPrimitivePrintAction_0() { return cPrimitivePrintAction_0; }
		
		//"print"
		public Keyword getPrintKeyword_1() { return cPrintKeyword_1; }
	}
	public class LeftAlgebraicIOElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.LeftAlgebraicIO");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLeftAlgebraicIOAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftADTKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeEffectFullAlgebraicTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//LeftAlgebraicIO:
		//	{LeftAlgebraicIO} 'leftADT' type=EffectFullAlgebraicType;
		@Override public ParserRule getRule() { return rule; }
		
		//{LeftAlgebraicIO} 'leftADT' type=EffectFullAlgebraicType
		public Group getGroup() { return cGroup; }
		
		//{LeftAlgebraicIO}
		public Action getLeftAlgebraicIOAction_0() { return cLeftAlgebraicIOAction_0; }
		
		//'leftADT'
		public Keyword getLeftADTKeyword_1() { return cLeftADTKeyword_1; }
		
		//type=EffectFullAlgebraicType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//EffectFullAlgebraicType
		public RuleCall getTypeEffectFullAlgebraicTypeParserRuleCall_2_0() { return cTypeEffectFullAlgebraicTypeParserRuleCall_2_0; }
	}
	public class RightAlgebraicIOElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.RightAlgebraicIO");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRightAlgebraicIOAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRightADTKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeEffectFullAlgebraicTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//RightAlgebraicIO:
		//	{RightAlgebraicIO} 'rightADT' type=EffectFullAlgebraicType;
		@Override public ParserRule getRule() { return rule; }
		
		//{RightAlgebraicIO} 'rightADT' type=EffectFullAlgebraicType
		public Group getGroup() { return cGroup; }
		
		//{RightAlgebraicIO}
		public Action getRightAlgebraicIOAction_0() { return cRightAlgebraicIOAction_0; }
		
		//'rightADT'
		public Keyword getRightADTKeyword_1() { return cRightADTKeyword_1; }
		
		//type=EffectFullAlgebraicType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//EffectFullAlgebraicType
		public RuleCall getTypeEffectFullAlgebraicTypeParserRuleCall_2_0() { return cTypeEffectFullAlgebraicTypeParserRuleCall_2_0; }
	}
	public class PrimitiveEffectFullValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.PrimitiveEffectFullValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimitiveRandomParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPrimitiveTimeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PrimitiveEffectFullValue:
		//	PrimitiveRandom | PrimitiveTime;
		@Override public ParserRule getRule() { return rule; }
		
		//PrimitiveRandom | PrimitiveTime
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PrimitiveRandom
		public RuleCall getPrimitiveRandomParserRuleCall_0() { return cPrimitiveRandomParserRuleCall_0; }
		
		//PrimitiveTime
		public RuleCall getPrimitiveTimeParserRuleCall_1() { return cPrimitiveTimeParserRuleCall_1; }
	}
	public class PrimitiveRandomElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.PrimitiveRandom");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPrimitiveRandomAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRandomIntKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//PrimitiveRandom:
		//	{PrimitiveRandom} "randomInt";
		@Override public ParserRule getRule() { return rule; }
		
		//{PrimitiveRandom} "randomInt"
		public Group getGroup() { return cGroup; }
		
		//{PrimitiveRandom}
		public Action getPrimitiveRandomAction_0() { return cPrimitiveRandomAction_0; }
		
		//"randomInt"
		public Keyword getRandomIntKeyword_1() { return cRandomIntKeyword_1; }
	}
	public class PrimitiveReturnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.PrimitiveReturn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPrimitiveReturnAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cReturnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//PrimitiveReturn:
		//	{PrimitiveReturn} "return" type=Type;
		@Override public ParserRule getRule() { return rule; }
		
		//{PrimitiveReturn} "return" type=Type
		public Group getGroup() { return cGroup; }
		
		//{PrimitiveReturn}
		public Action getPrimitiveReturnAction_0() { return cPrimitiveReturnAction_0; }
		
		//"return"
		public Keyword getReturnKeyword_1() { return cReturnKeyword_1; }
		
		//type=Type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_2_0() { return cTypeTypeParserRuleCall_2_0; }
	}
	public class PrimitiveTimeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.PrimitiveTime");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPrimitiveTimeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCurrentTimeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//PrimitiveTime:
		//	{PrimitiveTime} "currentTime";
		@Override public ParserRule getRule() { return rule; }
		
		//{PrimitiveTime} "currentTime"
		public Group getGroup() { return cGroup; }
		
		//{PrimitiveTime}
		public Action getPrimitiveTimeAction_0() { return cPrimitiveTimeAction_0; }
		
		//"currentTime"
		public Keyword getCurrentTimeKeyword_1() { return cCurrentTimeKeyword_1; }
	}
	public class ApplyFIOElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.ApplyFIO");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cApplyFIOAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cApplyFIOKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFunctionTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFunctionTypeEffectFullFunctionTypeParserRuleCall_2_0 = (RuleCall)cFunctionTypeAssignment_2.eContents().get(0);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueApplyFIOFactorParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//ApplyFIO:
		//	{ApplyFIO} 'applyFIO' functionType=EffectFullFunctionType value=ApplyFIOFactor;
		@Override public ParserRule getRule() { return rule; }
		
		//{ApplyFIO} 'applyFIO' functionType=EffectFullFunctionType value=ApplyFIOFactor
		public Group getGroup() { return cGroup; }
		
		//{ApplyFIO}
		public Action getApplyFIOAction_0() { return cApplyFIOAction_0; }
		
		//'applyFIO'
		public Keyword getApplyFIOKeyword_1() { return cApplyFIOKeyword_1; }
		
		//functionType=EffectFullFunctionType
		public Assignment getFunctionTypeAssignment_2() { return cFunctionTypeAssignment_2; }
		
		//EffectFullFunctionType
		public RuleCall getFunctionTypeEffectFullFunctionTypeParserRuleCall_2_0() { return cFunctionTypeEffectFullFunctionTypeParserRuleCall_2_0; }
		
		//value=ApplyFIOFactor
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//ApplyFIOFactor
		public RuleCall getValueApplyFIOFactorParserRuleCall_3_0() { return cValueApplyFIOFactorParserRuleCall_3_0; }
	}
	public class ApplyFIOFactorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.ApplyFIOFactor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValueReferenceAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final CrossReference cValueReferenceEffectFullFunctionCrossReference_0_0 = (CrossReference)cValueReferenceAssignment_0.eContents().get(0);
		private final RuleCall cValueReferenceEffectFullFunctionIDTerminalRuleCall_0_0_1 = (RuleCall)cValueReferenceEffectFullFunctionCrossReference_0_0.eContents().get(1);
		private final Assignment cValuePrimitiveAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cValuePrimitiveEffectFullPrimitiveParserRuleCall_1_0 = (RuleCall)cValuePrimitiveAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cValueExpressionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueExpressionEffectFullExpressionParserRuleCall_2_1_0 = (RuleCall)cValueExpressionAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//ApplyFIOFactor:
		//	valueReference=[EffectFullFunction] | valuePrimitive=EffectFullPrimitive
		//	| '(' valueExpression=EffectFullExpression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//valueReference=[EffectFullFunction] | valuePrimitive=EffectFullPrimitive | '(' valueExpression=EffectFullExpression ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//valueReference=[EffectFullFunction]
		public Assignment getValueReferenceAssignment_0() { return cValueReferenceAssignment_0; }
		
		//[EffectFullFunction]
		public CrossReference getValueReferenceEffectFullFunctionCrossReference_0_0() { return cValueReferenceEffectFullFunctionCrossReference_0_0; }
		
		//ID
		public RuleCall getValueReferenceEffectFullFunctionIDTerminalRuleCall_0_0_1() { return cValueReferenceEffectFullFunctionIDTerminalRuleCall_0_0_1; }
		
		//valuePrimitive=EffectFullPrimitive
		public Assignment getValuePrimitiveAssignment_1() { return cValuePrimitiveAssignment_1; }
		
		//EffectFullPrimitive
		public RuleCall getValuePrimitiveEffectFullPrimitiveParserRuleCall_1_0() { return cValuePrimitiveEffectFullPrimitiveParserRuleCall_1_0; }
		
		//'(' valueExpression=EffectFullExpression ')'
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//valueExpression=EffectFullExpression
		public Assignment getValueExpressionAssignment_2_1() { return cValueExpressionAssignment_2_1; }
		
		//EffectFullExpression
		public RuleCall getValueExpressionEffectFullExpressionParserRuleCall_2_1_0() { return cValueExpressionEffectFullExpressionParserRuleCall_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}
	public class ExtractEffectFullElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.ExtractEffectFull");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExtractEffectFullAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cExtractEffectFullKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDataAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cDataEffectFullDataCrossReference_2_0 = (CrossReference)cDataAssignment_2.eContents().get(0);
		private final RuleCall cDataEffectFullDataIDTerminalRuleCall_2_0_1 = (RuleCall)cDataEffectFullDataCrossReference_2_0.eContents().get(1);
		
		//ExtractEffectFull:
		//	{ExtractEffectFull} 'extractEffectFull' data=[EffectFullData];
		@Override public ParserRule getRule() { return rule; }
		
		//{ExtractEffectFull} 'extractEffectFull' data=[EffectFullData]
		public Group getGroup() { return cGroup; }
		
		//{ExtractEffectFull}
		public Action getExtractEffectFullAction_0() { return cExtractEffectFullAction_0; }
		
		//'extractEffectFull'
		public Keyword getExtractEffectFullKeyword_1() { return cExtractEffectFullKeyword_1; }
		
		//data=[EffectFullData]
		public Assignment getDataAssignment_2() { return cDataAssignment_2; }
		
		//[EffectFullData]
		public CrossReference getDataEffectFullDataCrossReference_2_0() { return cDataEffectFullDataCrossReference_2_0; }
		
		//ID
		public RuleCall getDataEffectFullDataIDTerminalRuleCall_2_0_1() { return cDataEffectFullDataIDTerminalRuleCall_2_0_1; }
	}
	public class LiftPureFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.LiftPureFunction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLiftKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cFunctionRefAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final CrossReference cFunctionRefPureFunctionCrossReference_0_2_0 = (CrossReference)cFunctionRefAssignment_0_2.eContents().get(0);
		private final RuleCall cFunctionRefPureFunctionIDTerminalRuleCall_0_2_0_1 = (RuleCall)cFunctionRefPureFunctionCrossReference_0_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLiftKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cFunctionPrimitiveAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cFunctionPrimitivePrimitivePureFunctionParserRuleCall_1_2_0 = (RuleCall)cFunctionPrimitiveAssignment_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//LiftPureFunction:
		//	'Lift' '(' functionRef=[PureFunction] ')'
		//	| 'Lift' '(' functionPrimitive=PrimitivePureFunction ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'Lift' '(' functionRef=[PureFunction] ')' | 'Lift' '(' functionPrimitive=PrimitivePureFunction ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'Lift' '(' functionRef=[PureFunction] ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'Lift'
		public Keyword getLiftKeyword_0_0() { return cLiftKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }
		
		//functionRef=[PureFunction]
		public Assignment getFunctionRefAssignment_0_2() { return cFunctionRefAssignment_0_2; }
		
		//[PureFunction]
		public CrossReference getFunctionRefPureFunctionCrossReference_0_2_0() { return cFunctionRefPureFunctionCrossReference_0_2_0; }
		
		//ID
		public RuleCall getFunctionRefPureFunctionIDTerminalRuleCall_0_2_0_1() { return cFunctionRefPureFunctionIDTerminalRuleCall_0_2_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_3() { return cRightParenthesisKeyword_0_3; }
		
		//'Lift' '(' functionPrimitive=PrimitivePureFunction ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'Lift'
		public Keyword getLiftKeyword_1_0() { return cLiftKeyword_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }
		
		//functionPrimitive=PrimitivePureFunction
		public Assignment getFunctionPrimitiveAssignment_1_2() { return cFunctionPrimitiveAssignment_1_2; }
		
		//PrimitivePureFunction
		public RuleCall getFunctionPrimitivePrimitivePureFunctionParserRuleCall_1_2_0() { return cFunctionPrimitivePrimitivePureFunctionParserRuleCall_1_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
	}
	public class LiftEffectFullFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.LiftEffectFullFunction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLiftKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cFunctionRefAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final CrossReference cFunctionRefEffectFullFunctionCrossReference_0_2_0 = (CrossReference)cFunctionRefAssignment_0_2.eContents().get(0);
		private final RuleCall cFunctionRefEffectFullFunctionIDTerminalRuleCall_0_2_0_1 = (RuleCall)cFunctionRefEffectFullFunctionCrossReference_0_2_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLiftKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cFunctionPrimitiveAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cFunctionPrimitivePrimitiveEffectFullFunctionParserRuleCall_1_2_0 = (RuleCall)cFunctionPrimitiveAssignment_1_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//LiftEffectFullFunction:
		//	'Lift' '[' functionRef=[EffectFullFunction] ']'
		//	| 'Lift' '[' functionPrimitive=PrimitiveEffectFullFunction ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'Lift' '[' functionRef=[EffectFullFunction] ']' | 'Lift' '[' functionPrimitive=PrimitiveEffectFullFunction ']'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'Lift' '[' functionRef=[EffectFullFunction] ']'
		public Group getGroup_0() { return cGroup_0; }
		
		//'Lift'
		public Keyword getLiftKeyword_0_0() { return cLiftKeyword_0_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0_1() { return cLeftSquareBracketKeyword_0_1; }
		
		//functionRef=[EffectFullFunction]
		public Assignment getFunctionRefAssignment_0_2() { return cFunctionRefAssignment_0_2; }
		
		//[EffectFullFunction]
		public CrossReference getFunctionRefEffectFullFunctionCrossReference_0_2_0() { return cFunctionRefEffectFullFunctionCrossReference_0_2_0; }
		
		//ID
		public RuleCall getFunctionRefEffectFullFunctionIDTerminalRuleCall_0_2_0_1() { return cFunctionRefEffectFullFunctionIDTerminalRuleCall_0_2_0_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_0_3() { return cRightSquareBracketKeyword_0_3; }
		
		//'Lift' '[' functionPrimitive=PrimitiveEffectFullFunction ']'
		public Group getGroup_1() { return cGroup_1; }
		
		//'Lift'
		public Keyword getLiftKeyword_1_0() { return cLiftKeyword_1_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_1() { return cLeftSquareBracketKeyword_1_1; }
		
		//functionPrimitive=PrimitiveEffectFullFunction
		public Assignment getFunctionPrimitiveAssignment_1_2() { return cFunctionPrimitiveAssignment_1_2; }
		
		//PrimitiveEffectFullFunction
		public RuleCall getFunctionPrimitivePrimitiveEffectFullFunctionParserRuleCall_1_2_0() { return cFunctionPrimitivePrimitiveEffectFullFunctionParserRuleCall_1_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_3() { return cRightSquareBracketKeyword_1_3; }
	}
	public class IsLeftEffectFullElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.IsLeftEffectFull");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIsLeftEffectFullAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIsLeftKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeEffectFullAlgebraicTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//IsLeftEffectFull:
		//	{IsLeftEffectFull} 'isLeft' type=EffectFullAlgebraicType;
		@Override public ParserRule getRule() { return rule; }
		
		//{IsLeftEffectFull} 'isLeft' type=EffectFullAlgebraicType
		public Group getGroup() { return cGroup; }
		
		//{IsLeftEffectFull}
		public Action getIsLeftEffectFullAction_0() { return cIsLeftEffectFullAction_0; }
		
		//'isLeft'
		public Keyword getIsLeftKeyword_1() { return cIsLeftKeyword_1; }
		
		//type=EffectFullAlgebraicType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//EffectFullAlgebraicType
		public RuleCall getTypeEffectFullAlgebraicTypeParserRuleCall_2_0() { return cTypeEffectFullAlgebraicTypeParserRuleCall_2_0; }
	}
	public class IsRightEffectFullElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.IsRightEffectFull");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIsRightEffectFullAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIsRightKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeEffectFullAlgebraicTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//IsRightEffectFull:
		//	{IsRightEffectFull} 'isRight' type=EffectFullAlgebraicType;
		@Override public ParserRule getRule() { return rule; }
		
		//{IsRightEffectFull} 'isRight' type=EffectFullAlgebraicType
		public Group getGroup() { return cGroup; }
		
		//{IsRightEffectFull}
		public Action getIsRightEffectFullAction_0() { return cIsRightEffectFullAction_0; }
		
		//'isRight'
		public Keyword getIsRightKeyword_1() { return cIsRightKeyword_1; }
		
		//type=EffectFullAlgebraicType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//EffectFullAlgebraicType
		public RuleCall getTypeEffectFullAlgebraicTypeParserRuleCall_2_0() { return cTypeEffectFullAlgebraicTypeParserRuleCall_2_0; }
	}
	public class EffectFullIfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.EffectFullIf");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEffectFullIfAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cThenAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cThenEffectFullIfBodyParserRuleCall_4_0 = (RuleCall)cThenAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cElseKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cLeftCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cElseAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cElseEffectFullIfBodyParserRuleCall_8_0 = (RuleCall)cElseAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//EffectFullIf:
		//	{EffectFullIf} 'if' 'then' '{' then=EffectFullIfBody '}' 'else' '{' else=EffectFullIfBody '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{EffectFullIf} 'if' 'then' '{' then=EffectFullIfBody '}' 'else' '{' else=EffectFullIfBody '}'
		public Group getGroup() { return cGroup; }
		
		//{EffectFullIf}
		public Action getEffectFullIfAction_0() { return cEffectFullIfAction_0; }
		
		//'if'
		public Keyword getIfKeyword_1() { return cIfKeyword_1; }
		
		//'then'
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//then=EffectFullIfBody
		public Assignment getThenAssignment_4() { return cThenAssignment_4; }
		
		//EffectFullIfBody
		public RuleCall getThenEffectFullIfBodyParserRuleCall_4_0() { return cThenEffectFullIfBodyParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
		
		//'else'
		public Keyword getElseKeyword_6() { return cElseKeyword_6; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7() { return cLeftCurlyBracketKeyword_7; }
		
		//else=EffectFullIfBody
		public Assignment getElseAssignment_8() { return cElseAssignment_8; }
		
		//EffectFullIfBody
		public RuleCall getElseEffectFullIfBodyParserRuleCall_8_0() { return cElseEffectFullIfBodyParserRuleCall_8_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class EffectFullIfBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.EffectFullIfBody");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cFunctionReferenceAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final CrossReference cFunctionReferenceEffectFullFunctionCrossReference_0_0 = (CrossReference)cFunctionReferenceAssignment_0.eContents().get(0);
		private final RuleCall cFunctionReferenceEffectFullFunctionIDTerminalRuleCall_0_0_1 = (RuleCall)cFunctionReferenceEffectFullFunctionCrossReference_0_0.eContents().get(1);
		private final Assignment cFunctionExpressionAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cFunctionExpressionEffectFullExpressionParserRuleCall_1_0 = (RuleCall)cFunctionExpressionAssignment_1.eContents().get(0);
		
		//EffectFullIfBody:
		//	functionReference=[EffectFullFunction] | functionExpression=EffectFullExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//functionReference=[EffectFullFunction] | functionExpression=EffectFullExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//functionReference=[EffectFullFunction]
		public Assignment getFunctionReferenceAssignment_0() { return cFunctionReferenceAssignment_0; }
		
		//[EffectFullFunction]
		public CrossReference getFunctionReferenceEffectFullFunctionCrossReference_0_0() { return cFunctionReferenceEffectFullFunctionCrossReference_0_0; }
		
		//ID
		public RuleCall getFunctionReferenceEffectFullFunctionIDTerminalRuleCall_0_0_1() { return cFunctionReferenceEffectFullFunctionIDTerminalRuleCall_0_0_1; }
		
		//functionExpression=EffectFullExpression
		public Assignment getFunctionExpressionAssignment_1() { return cFunctionExpressionAssignment_1; }
		
		//EffectFullExpression
		public RuleCall getFunctionExpressionEffectFullExpressionParserRuleCall_1_0() { return cFunctionExpressionEffectFullExpressionParserRuleCall_1_0; }
	}
	
	
	private final ModelElements pModel;
	private final PureBlockElements pPureBlock;
	private final PureFunctionBlockElements pPureFunctionBlock;
	private final PureDataBlockElements pPureDataBlock;
	private final PureValueBlockElements pPureValueBlock;
	private final EffectFullBlockElements pEffectFullBlock;
	private final EffectFullDataBlockElements pEffectFullDataBlock;
	private final EffectFullValueBlockElements pEffectFullValueBlock;
	private final EffectFullFunctionBlockElements pEffectFullFunctionBlock;
	private final PureDataElements pPureData;
	private final PureValueElements pPureValue;
	private final EffectFullDataElements pEffectFullData;
	private final EffectFullValueElements pEffectFullValue;
	private final PureFunctionDefinitionElements pPureFunctionDefinition;
	private final EffectFullFunctionDefinitionElements pEffectFullFunctionDefinition;
	private final MainFuncElements pMainFunc;
	private final AdditionalPureArgumentElements pAdditionalPureArgument;
	private final AdditionalEffectFullArgumentElements pAdditionalEffectFullArgument;
	private final FunctionElements pFunction;
	private final PureFunctionElements pPureFunction;
	private final EffectFullFunctionElements pEffectFullFunction;
	private final PrimitiveFunctionElements pPrimitiveFunction;
	private final EffectFullPrimitiveElements pEffectFullPrimitive;
	private final EffectFullBodyContentElements pEffectFullBodyContent;
	private final ArgumentElements pArgument;
	private final EffectFullArgumentElements pEffectFullArgument;
	private final PureArgumentElements pPureArgument;
	private final FunctionBodyPureElements pFunctionBodyPure;
	private final FunctionBodyEffectFullElements pFunctionBodyEffectFull;
	private final EmptyFunctionBodyElements pEmptyFunctionBody;
	private final CompositionFunctionBodyPureElements pCompositionFunctionBodyPure;
	private final CompositionFunctionBodyPureFactorElements pCompositionFunctionBodyPureFactor;
	private final CompositionFunctionBodyEffectElements pCompositionFunctionBodyEffect;
	private final CompositionFunctionBodyEffectFullFactorElements pCompositionFunctionBodyEffectFullFactor;
	private final IOTypeElements pIOType;
	private final ValueTypeElements pValueType;
	private final TypeElements pType;
	private final EffectFullTypeElements pEffectFullType;
	private final VoidTypeElements pVoidType;
	private final IntegerTypeElements pIntegerType;
	private final StringTypeElements pStringType;
	private final BooleanTypeElements pBooleanType;
	private final UnitTypeElements pUnitType;
	private final DataTypeElements pDataType;
	private final EffectFullDataTypeElements pEffectFullDataType;
	private final PureFunctionTypeElements pPureFunctionType;
	private final EffectFullFunctionTypeElements pEffectFullFunctionType;
	private final PureAlgebraicTypeElements pPureAlgebraicType;
	private final PureSumTypeFactorElements pPureSumTypeFactor;
	private final PureProdTypeFactorElements pPureProdTypeFactor;
	private final EffectFullAlgebraicTypeElements pEffectFullAlgebraicType;
	private final EffectFullSumTypeFactorElements pEffectFullSumTypeFactor;
	private final EffectFullProdTypeFactorElements pEffectFullProdTypeFactor;
	private final EffectFullExpressionElements pEffectFullExpression;
	private final UnitValueElements pUnitValue;
	private final EffectFullFunctionValueElements pEffectFullFunctionValue;
	private final EffectFullValueRefElements pEffectFullValueRef;
	private final EffectFullLambdaElements pEffectFullLambda;
	private final ExpressionElements pExpression;
	private final IntValueElements pIntValue;
	private final StringValueElements pStringValue;
	private final BooleanValueElements pBooleanValue;
	private final FunctionValueElements pFunctionValue;
	private final DataValueElements pDataValue;
	private final EffectFullDataValueElements pEffectFullDataValue;
	private final PureValueRefElements pPureValueRef;
	private final PureLambdaElements pPureLambda;
	private final PureProdValueElements pPureProdValue;
	private final PureSumValueElements pPureSumValue;
	private final EffectFullProdValueElements pEffectFullProdValue;
	private final EffectFullSumValueElements pEffectFullSumValue;
	private final PrimitivePureFunctionElements pPrimitivePureFunction;
	private final IntToStringElements pIntToString;
	private final IntPowElements pIntPow;
	private final PlusElements pPlus;
	private final MinusElements pMinus;
	private final TimesElements pTimes;
	private final ModElements pMod;
	private final LeftAlgebraicElements pLeftAlgebraic;
	private final RightAlgebraicElements pRightAlgebraic;
	private final ApplyFElements pApplyF;
	private final ApplyFFactorElements pApplyFFactor;
	private final EqualsElements pEquals;
	private final MinorEqualsElements pMinorEquals;
	private final MajorEqualsElements pMajorEquals;
	private final MinorElements pMinor;
	private final MajorElements pMajor;
	private final LogicAndElements pLogicAnd;
	private final LogicOrElements pLogicOr;
	private final ExtractPureElements pExtractPure;
	private final IsLeftPureElements pIsLeftPure;
	private final IsRightPureElements pIsRightPure;
	private final PureIfElements pPureIf;
	private final PureIfBodyElements pPureIfBody;
	private final PrimitiveEffectFullFunctionElements pPrimitiveEffectFullFunction;
	private final PrimitivePrintElements pPrimitivePrint;
	private final LeftAlgebraicIOElements pLeftAlgebraicIO;
	private final RightAlgebraicIOElements pRightAlgebraicIO;
	private final PrimitiveEffectFullValueElements pPrimitiveEffectFullValue;
	private final PrimitiveRandomElements pPrimitiveRandom;
	private final PrimitiveReturnElements pPrimitiveReturn;
	private final PrimitiveTimeElements pPrimitiveTime;
	private final ApplyFIOElements pApplyFIO;
	private final ApplyFIOFactorElements pApplyFIOFactor;
	private final ExtractEffectFullElements pExtractEffectFull;
	private final LiftPureFunctionElements pLiftPureFunction;
	private final LiftEffectFullFunctionElements pLiftEffectFullFunction;
	private final IsLeftEffectFullElements pIsLeftEffectFull;
	private final IsRightEffectFullElements pIsRightEffectFull;
	private final EffectFullIfElements pEffectFullIf;
	private final EffectFullIfBodyElements pEffectFullIfBody;
	private final TerminalRule tBOOLEAN;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public FPMLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pPureBlock = new PureBlockElements();
		this.pPureFunctionBlock = new PureFunctionBlockElements();
		this.pPureDataBlock = new PureDataBlockElements();
		this.pPureValueBlock = new PureValueBlockElements();
		this.pEffectFullBlock = new EffectFullBlockElements();
		this.pEffectFullDataBlock = new EffectFullDataBlockElements();
		this.pEffectFullValueBlock = new EffectFullValueBlockElements();
		this.pEffectFullFunctionBlock = new EffectFullFunctionBlockElements();
		this.pPureData = new PureDataElements();
		this.pPureValue = new PureValueElements();
		this.pEffectFullData = new EffectFullDataElements();
		this.pEffectFullValue = new EffectFullValueElements();
		this.pPureFunctionDefinition = new PureFunctionDefinitionElements();
		this.pEffectFullFunctionDefinition = new EffectFullFunctionDefinitionElements();
		this.pMainFunc = new MainFuncElements();
		this.pAdditionalPureArgument = new AdditionalPureArgumentElements();
		this.pAdditionalEffectFullArgument = new AdditionalEffectFullArgumentElements();
		this.pFunction = new FunctionElements();
		this.pPureFunction = new PureFunctionElements();
		this.pEffectFullFunction = new EffectFullFunctionElements();
		this.pPrimitiveFunction = new PrimitiveFunctionElements();
		this.pEffectFullPrimitive = new EffectFullPrimitiveElements();
		this.pEffectFullBodyContent = new EffectFullBodyContentElements();
		this.pArgument = new ArgumentElements();
		this.pEffectFullArgument = new EffectFullArgumentElements();
		this.pPureArgument = new PureArgumentElements();
		this.pFunctionBodyPure = new FunctionBodyPureElements();
		this.pFunctionBodyEffectFull = new FunctionBodyEffectFullElements();
		this.pEmptyFunctionBody = new EmptyFunctionBodyElements();
		this.pCompositionFunctionBodyPure = new CompositionFunctionBodyPureElements();
		this.pCompositionFunctionBodyPureFactor = new CompositionFunctionBodyPureFactorElements();
		this.pCompositionFunctionBodyEffect = new CompositionFunctionBodyEffectElements();
		this.pCompositionFunctionBodyEffectFullFactor = new CompositionFunctionBodyEffectFullFactorElements();
		this.pIOType = new IOTypeElements();
		this.pValueType = new ValueTypeElements();
		this.pType = new TypeElements();
		this.pEffectFullType = new EffectFullTypeElements();
		this.pVoidType = new VoidTypeElements();
		this.pIntegerType = new IntegerTypeElements();
		this.pStringType = new StringTypeElements();
		this.pBooleanType = new BooleanTypeElements();
		this.pUnitType = new UnitTypeElements();
		this.pDataType = new DataTypeElements();
		this.pEffectFullDataType = new EffectFullDataTypeElements();
		this.pPureFunctionType = new PureFunctionTypeElements();
		this.pEffectFullFunctionType = new EffectFullFunctionTypeElements();
		this.pPureAlgebraicType = new PureAlgebraicTypeElements();
		this.pPureSumTypeFactor = new PureSumTypeFactorElements();
		this.pPureProdTypeFactor = new PureProdTypeFactorElements();
		this.pEffectFullAlgebraicType = new EffectFullAlgebraicTypeElements();
		this.pEffectFullSumTypeFactor = new EffectFullSumTypeFactorElements();
		this.pEffectFullProdTypeFactor = new EffectFullProdTypeFactorElements();
		this.pEffectFullExpression = new EffectFullExpressionElements();
		this.pUnitValue = new UnitValueElements();
		this.pEffectFullFunctionValue = new EffectFullFunctionValueElements();
		this.pEffectFullValueRef = new EffectFullValueRefElements();
		this.pEffectFullLambda = new EffectFullLambdaElements();
		this.pExpression = new ExpressionElements();
		this.pIntValue = new IntValueElements();
		this.pStringValue = new StringValueElements();
		this.pBooleanValue = new BooleanValueElements();
		this.pFunctionValue = new FunctionValueElements();
		this.pDataValue = new DataValueElements();
		this.pEffectFullDataValue = new EffectFullDataValueElements();
		this.pPureValueRef = new PureValueRefElements();
		this.pPureLambda = new PureLambdaElements();
		this.pPureProdValue = new PureProdValueElements();
		this.pPureSumValue = new PureSumValueElements();
		this.pEffectFullProdValue = new EffectFullProdValueElements();
		this.pEffectFullSumValue = new EffectFullSumValueElements();
		this.pPrimitivePureFunction = new PrimitivePureFunctionElements();
		this.pIntToString = new IntToStringElements();
		this.pIntPow = new IntPowElements();
		this.pPlus = new PlusElements();
		this.pMinus = new MinusElements();
		this.pTimes = new TimesElements();
		this.pMod = new ModElements();
		this.pLeftAlgebraic = new LeftAlgebraicElements();
		this.pRightAlgebraic = new RightAlgebraicElements();
		this.pApplyF = new ApplyFElements();
		this.pApplyFFactor = new ApplyFFactorElements();
		this.pEquals = new EqualsElements();
		this.pMinorEquals = new MinorEqualsElements();
		this.pMajorEquals = new MajorEqualsElements();
		this.pMinor = new MinorElements();
		this.pMajor = new MajorElements();
		this.pLogicAnd = new LogicAndElements();
		this.pLogicOr = new LogicOrElements();
		this.pExtractPure = new ExtractPureElements();
		this.pIsLeftPure = new IsLeftPureElements();
		this.pIsRightPure = new IsRightPureElements();
		this.pPureIf = new PureIfElements();
		this.pPureIfBody = new PureIfBodyElements();
		this.pPrimitiveEffectFullFunction = new PrimitiveEffectFullFunctionElements();
		this.pPrimitivePrint = new PrimitivePrintElements();
		this.pLeftAlgebraicIO = new LeftAlgebraicIOElements();
		this.pRightAlgebraicIO = new RightAlgebraicIOElements();
		this.pPrimitiveEffectFullValue = new PrimitiveEffectFullValueElements();
		this.pPrimitiveRandom = new PrimitiveRandomElements();
		this.pPrimitiveReturn = new PrimitiveReturnElements();
		this.pPrimitiveTime = new PrimitiveTimeElements();
		this.pApplyFIO = new ApplyFIOElements();
		this.pApplyFIOFactor = new ApplyFIOFactorElements();
		this.pExtractEffectFull = new ExtractEffectFullElements();
		this.pLiftPureFunction = new LiftPureFunctionElements();
		this.pLiftEffectFullFunction = new LiftEffectFullFunctionElements();
		this.pIsLeftEffectFull = new IsLeftEffectFullElements();
		this.pIsRightEffectFull = new IsRightEffectFullElements();
		this.pEffectFullIf = new EffectFullIfElements();
		this.pEffectFullIfBody = new EffectFullIfBodyElements();
		this.tBOOLEAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.FPML.BOOLEAN");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("it.unibo.FPML".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	/////////////////////////////////////////////////////////////////
	//// Entry element
	////////////////////////////////////////////////////////////////
	//Model:
	//	elements+=PureBlock
	//	elements+=EffectFullBlock;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	////////////////////////////////////////////////////////////////
	//// Outer Blocks
	////////////////////////////////////////////////////////////////
	//PureBlock:
	//	'Pure' '{'
	//	elements+=PureDataBlock
	//	elements+=PureFunctionBlock
	//	'}';
	public PureBlockElements getPureBlockAccess() {
		return pPureBlock;
	}
	
	public ParserRule getPureBlockRule() {
		return getPureBlockAccess().getRule();
	}
	
	//PureFunctionBlock:
	//	'Functions' '{'
	//	features+=PureFunctionDefinition*
	//	'}';
	public PureFunctionBlockElements getPureFunctionBlockAccess() {
		return pPureFunctionBlock;
	}
	
	public ParserRule getPureFunctionBlockRule() {
		return getPureFunctionBlockAccess().getRule();
	}
	
	//PureDataBlock:
	//	'Data' '{'
	//	elements+=PureData*
	//	value=PureValueBlock
	//	'}';
	public PureDataBlockElements getPureDataBlockAccess() {
		return pPureDataBlock;
	}
	
	public ParserRule getPureDataBlockRule() {
		return getPureDataBlockAccess().getRule();
	}
	
	//PureValueBlock:
	//	'Value' '{'
	//	elements+=PureValue*
	//	'}';
	public PureValueBlockElements getPureValueBlockAccess() {
		return pPureValueBlock;
	}
	
	public ParserRule getPureValueBlockRule() {
		return getPureValueBlockAccess().getRule();
	}
	
	//EffectFullBlock:
	//	'Effects' '{'
	//	elements+=EffectFullDataBlock
	//	elements+=EffectFullFunctionBlock
	//	'}';
	public EffectFullBlockElements getEffectFullBlockAccess() {
		return pEffectFullBlock;
	}
	
	public ParserRule getEffectFullBlockRule() {
		return getEffectFullBlockAccess().getRule();
	}
	
	//EffectFullDataBlock:
	//	'Data' '{'
	//	elements+=EffectFullData*
	//	value=EffectFullValueBlock
	//	'}';
	public EffectFullDataBlockElements getEffectFullDataBlockAccess() {
		return pEffectFullDataBlock;
	}
	
	public ParserRule getEffectFullDataBlockRule() {
		return getEffectFullDataBlockAccess().getRule();
	}
	
	//EffectFullValueBlock:
	//	'Value' '{'
	//	elements+=EffectFullValue*
	//	'}';
	public EffectFullValueBlockElements getEffectFullValueBlockAccess() {
		return pEffectFullValueBlock;
	}
	
	public ParserRule getEffectFullValueBlockRule() {
		return getEffectFullValueBlockAccess().getRule();
	}
	
	//EffectFullFunctionBlock:
	//	'Functions' '{'
	//	features+=EffectFullFunctionDefinition*
	//	main=MainFunc
	//	'}';
	public EffectFullFunctionBlockElements getEffectFullFunctionBlockAccess() {
		return pEffectFullFunctionBlock;
	}
	
	public ParserRule getEffectFullFunctionBlockRule() {
		return getEffectFullFunctionBlockAccess().getRule();
	}
	
	///////////////////////////////////////////////////////////////////
	//// Outer Block Elements
	///////////////////////////////////////////////////////////////////
	//PureData:
	//	name=ID ':' content=ValueType;
	public PureDataElements getPureDataAccess() {
		return pPureData;
	}
	
	public ParserRule getPureDataRule() {
		return getPureDataAccess().getRule();
	}
	
	//PureValue PureFunctionDefinition:
	//	{PureValue} name=ID ':' value=Expression
	public PureValueElements getPureValueAccess() {
		return pPureValue;
	}
	
	public ParserRule getPureValueRule() {
		return getPureValueAccess().getRule();
	}
	
	//EffectFullData:
	//	name=ID ':' content=EffectFullType;
	public EffectFullDataElements getEffectFullDataAccess() {
		return pEffectFullData;
	}
	
	public ParserRule getEffectFullDataRule() {
		return getEffectFullDataAccess().getRule();
	}
	
	//EffectFullValue EffectFullFunctionDefinition:
	//	{EffectFullValue} name=ID ':' value=EffectFullExpression
	public EffectFullValueElements getEffectFullValueAccess() {
		return pEffectFullValue;
	}
	
	public ParserRule getEffectFullValueRule() {
		return getEffectFullValueAccess().getRule();
	}
	
	//PureFunctionDefinition:
	//	'def' returnType=ValueType name=ID '(' arg=PureArgument (',' higherOrderArg=AdditionalPureArgument)? ')' ':' '{'
	//	functionBody=FunctionBodyPure '}';
	public PureFunctionDefinitionElements getPureFunctionDefinitionAccess() {
		return pPureFunctionDefinition;
	}
	
	public ParserRule getPureFunctionDefinitionRule() {
		return getPureFunctionDefinitionAccess().getRule();
	}
	
	//EffectFullFunctionDefinition:
	//	'def' returnType=IOType name=ID '(' arg=Argument (',' higherOrderArg=AdditionalEffectFullArgument)? ')' ':' '{'
	//	functionBody=FunctionBodyEffectFull '}';
	public EffectFullFunctionDefinitionElements getEffectFullFunctionDefinitionAccess() {
		return pEffectFullFunctionDefinition;
	}
	
	public ParserRule getEffectFullFunctionDefinitionRule() {
		return getEffectFullFunctionDefinitionAccess().getRule();
	}
	
	//MainFunc:
	//	'IO' returnType=UnitType 'main' ':' '{' functionBody=FunctionBodyEffectFull '}';
	public MainFuncElements getMainFuncAccess() {
		return pMainFunc;
	}
	
	public ParserRule getMainFuncRule() {
		return getMainFuncAccess().getRule();
	}
	
	//AdditionalPureArgument:
	//	arg2=PureArgument;
	public AdditionalPureArgumentElements getAdditionalPureArgumentAccess() {
		return pAdditionalPureArgument;
	}
	
	public ParserRule getAdditionalPureArgumentRule() {
		return getAdditionalPureArgumentAccess().getRule();
	}
	
	//AdditionalEffectFullArgument:
	//	arg2=Argument;
	public AdditionalEffectFullArgumentElements getAdditionalEffectFullArgumentAccess() {
		return pAdditionalEffectFullArgument;
	}
	
	public ParserRule getAdditionalEffectFullArgumentRule() {
		return getAdditionalEffectFullArgumentAccess().getRule();
	}
	
	/////////////////////////////////////////////////////////////////////////////////////////////////
	//// Aggregate Types
	/////////////////////////////////////////////////////////////////////////////////////////////////
	//Function:
	//	EffectFullFunction | PureFunction;
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}
	
	//PureFunction:
	//	PureFunctionDefinition | PrimitivePureFunction | PureArgument | Expression | PureValue;
	public PureFunctionElements getPureFunctionAccess() {
		return pPureFunction;
	}
	
	public ParserRule getPureFunctionRule() {
		return getPureFunctionAccess().getRule();
	}
	
	//EffectFullFunction:
	//	EffectFullFunctionDefinition | PrimitiveEffectFullFunction | EffectFullValue | EffectFullArgument;
	public EffectFullFunctionElements getEffectFullFunctionAccess() {
		return pEffectFullFunction;
	}
	
	public ParserRule getEffectFullFunctionRule() {
		return getEffectFullFunctionAccess().getRule();
	}
	
	//PrimitiveFunction:
	//	PrimitivePureFunction | EffectFullPrimitive;
	public PrimitiveFunctionElements getPrimitiveFunctionAccess() {
		return pPrimitiveFunction;
	}
	
	public ParserRule getPrimitiveFunctionRule() {
		return getPrimitiveFunctionAccess().getRule();
	}
	
	//EffectFullPrimitive:
	//	PrimitiveEffectFullFunction | PrimitiveEffectFullValue;
	public EffectFullPrimitiveElements getEffectFullPrimitiveAccess() {
		return pEffectFullPrimitive;
	}
	
	public ParserRule getEffectFullPrimitiveRule() {
		return getEffectFullPrimitiveAccess().getRule();
	}
	
	//EffectFullBodyContent:
	//	EffectFullFunction | EffectFullPrimitive | EffectFullExpression;
	public EffectFullBodyContentElements getEffectFullBodyContentAccess() {
		return pEffectFullBodyContent;
	}
	
	public ParserRule getEffectFullBodyContentRule() {
		return getEffectFullBodyContentAccess().getRule();
	}
	
	/////////////////////////////////////////////////////////////////////
	//// Function Body Elements
	/////////////////////////////////////////////////////////////////////
	//Argument:
	//	EffectFullArgument | PureArgument;
	public ArgumentElements getArgumentAccess() {
		return pArgument;
	}
	
	public ParserRule getArgumentRule() {
		return getArgumentAccess().getRule();
	}
	
	//EffectFullArgument:
	//	type=EffectFullType name=ID;
	public EffectFullArgumentElements getEffectFullArgumentAccess() {
		return pEffectFullArgument;
	}
	
	public ParserRule getEffectFullArgumentRule() {
		return getEffectFullArgumentAccess().getRule();
	}
	
	//PureArgument:
	//	type=ValueType name=ID;
	public PureArgumentElements getPureArgumentAccess() {
		return pPureArgument;
	}
	
	public ParserRule getPureArgumentRule() {
		return getPureArgumentAccess().getRule();
	}
	
	//FunctionBodyPure:
	//	EmptyFunctionBody | CompositionFunctionBodyPure;
	public FunctionBodyPureElements getFunctionBodyPureAccess() {
		return pFunctionBodyPure;
	}
	
	public ParserRule getFunctionBodyPureRule() {
		return getFunctionBodyPureAccess().getRule();
	}
	
	//FunctionBodyEffectFull:
	//	EmptyFunctionBody | CompositionFunctionBodyEffect;
	public FunctionBodyEffectFullElements getFunctionBodyEffectFullAccess() {
		return pFunctionBodyEffectFull;
	}
	
	public ParserRule getFunctionBodyEffectFullRule() {
		return getFunctionBodyEffectFullAccess().getRule();
	}
	
	//EmptyFunctionBody:
	//	{EmptyFunctionBody} 'Undefined';
	public EmptyFunctionBodyElements getEmptyFunctionBodyAccess() {
		return pEmptyFunctionBody;
	}
	
	public ParserRule getEmptyFunctionBodyRule() {
		return getEmptyFunctionBodyAccess().getRule();
	}
	
	//CompositionFunctionBodyPure:
	//	referenceElement=[PureFunction] functionChain+=CompositionFunctionBodyPureFactor+
	//	| primitiveElement=PrimitivePureFunction functionChain+=CompositionFunctionBodyPureFactor+
	//	| expressionElement=Expression functionChain+=CompositionFunctionBodyPureFactor+;
	public CompositionFunctionBodyPureElements getCompositionFunctionBodyPureAccess() {
		return pCompositionFunctionBodyPure;
	}
	
	public ParserRule getCompositionFunctionBodyPureRule() {
		return getCompositionFunctionBodyPureAccess().getRule();
	}
	
	//CompositionFunctionBodyPureFactor:
	//	'|>' referenceElement=[PureFunction] | '|>' primitiveElement=PrimitivePureFunction | '|>'
	//	expressionElement=Expression;
	public CompositionFunctionBodyPureFactorElements getCompositionFunctionBodyPureFactorAccess() {
		return pCompositionFunctionBodyPureFactor;
	}
	
	public ParserRule getCompositionFunctionBodyPureFactorRule() {
		return getCompositionFunctionBodyPureFactorAccess().getRule();
	}
	
	//CompositionFunctionBodyEffect:
	//	referenceElement=[EffectFullFunction] functionChain+=CompositionFunctionBodyEffectFullFactor+
	//	| primitiveElement=EffectFullPrimitive functionChain+=CompositionFunctionBodyEffectFullFactor+
	//	| expressionElement=EffectFullExpression functionChain+=CompositionFunctionBodyEffectFullFactor+;
	public CompositionFunctionBodyEffectElements getCompositionFunctionBodyEffectAccess() {
		return pCompositionFunctionBodyEffect;
	}
	
	public ParserRule getCompositionFunctionBodyEffectRule() {
		return getCompositionFunctionBodyEffectAccess().getRule();
	}
	
	//CompositionFunctionBodyEffectFullFactor:
	//	'>>=' referenceElement=[EffectFullFunction] | '>>=' primitiveElement=EffectFullPrimitive | '>>='
	//	expressionElement=EffectFullExpression;
	public CompositionFunctionBodyEffectFullFactorElements getCompositionFunctionBodyEffectFullFactorAccess() {
		return pCompositionFunctionBodyEffectFullFactor;
	}
	
	public ParserRule getCompositionFunctionBodyEffectFullFactorRule() {
		return getCompositionFunctionBodyEffectFullFactorAccess().getRule();
	}
	
	////////////////////////////////////////////////////////////////////////
	//// Types
	////////////////////////////////////////////////////////////////////////
	//IOType:
	//	'IO' type=Type;
	public IOTypeElements getIOTypeAccess() {
		return pIOType;
	}
	
	public ParserRule getIOTypeRule() {
		return getIOTypeAccess().getRule();
	}
	
	//ValueType:
	//	IntegerType | StringType | BooleanType | DataType | PureFunctionType | PureAlgebraicType
	//	| UnitType;
	public ValueTypeElements getValueTypeAccess() {
		return pValueType;
	}
	
	public ParserRule getValueTypeRule() {
		return getValueTypeAccess().getRule();
	}
	
	//Type:
	//	ValueType | EffectFullType;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//EffectFullType:
	//	EffectFullFunctionType | EffectFullDataType | EffectFullAlgebraicType | IOType | VoidType;
	public EffectFullTypeElements getEffectFullTypeAccess() {
		return pEffectFullType;
	}
	
	public ParserRule getEffectFullTypeRule() {
		return getEffectFullTypeAccess().getRule();
	}
	
	//VoidType:
	//	{VoidType};
	public VoidTypeElements getVoidTypeAccess() {
		return pVoidType;
	}
	
	public ParserRule getVoidTypeRule() {
		return getVoidTypeAccess().getRule();
	}
	
	//IntegerType:
	//	{IntegerType} type="int";
	public IntegerTypeElements getIntegerTypeAccess() {
		return pIntegerType;
	}
	
	public ParserRule getIntegerTypeRule() {
		return getIntegerTypeAccess().getRule();
	}
	
	//StringType:
	//	{StringType} type="String";
	public StringTypeElements getStringTypeAccess() {
		return pStringType;
	}
	
	public ParserRule getStringTypeRule() {
		return getStringTypeAccess().getRule();
	}
	
	//BooleanType:
	//	{BooleanType} type="boolean";
	public BooleanTypeElements getBooleanTypeAccess() {
		return pBooleanType;
	}
	
	public ParserRule getBooleanTypeRule() {
		return getBooleanTypeAccess().getRule();
	}
	
	//UnitType:
	//	{UnitType} type="Unit";
	public UnitTypeElements getUnitTypeAccess() {
		return pUnitType;
	}
	
	public ParserRule getUnitTypeRule() {
		return getUnitTypeAccess().getRule();
	}
	
	//DataType:
	//	{DataType} 'ref' type=[PureData];
	public DataTypeElements getDataTypeAccess() {
		return pDataType;
	}
	
	public ParserRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}
	
	//EffectFullDataType:
	//	{EffectFullDataType} 'refIO' type=[EffectFullData];
	public EffectFullDataTypeElements getEffectFullDataTypeAccess() {
		return pEffectFullDataType;
	}
	
	public ParserRule getEffectFullDataTypeRule() {
		return getEffectFullDataTypeAccess().getRule();
	}
	
	//PureFunctionType:
	//	{PureFunctionType} 'F' '<' argType=ValueType ',' returnType=ValueType '>';
	public PureFunctionTypeElements getPureFunctionTypeAccess() {
		return pPureFunctionType;
	}
	
	public ParserRule getPureFunctionTypeRule() {
		return getPureFunctionTypeAccess().getRule();
	}
	
	//EffectFullFunctionType:
	//	{EffectFullFunctionType} 'FIO' '<' argType=Type ',' returnType=IOType '>';
	public EffectFullFunctionTypeElements getEffectFullFunctionTypeAccess() {
		return pEffectFullFunctionType;
	}
	
	public ParserRule getEffectFullFunctionTypeRule() {
		return getEffectFullFunctionTypeAccess().getRule();
	}
	
	//PureAlgebraicType:
	//	'[' pureAdtElement1=ValueType pureAdtElement2=(PureSumTypeFactor | PureProdTypeFactor) ']';
	public PureAlgebraicTypeElements getPureAlgebraicTypeAccess() {
		return pPureAlgebraicType;
	}
	
	public ParserRule getPureAlgebraicTypeRule() {
		return getPureAlgebraicTypeAccess().getRule();
	}
	
	//PureSumTypeFactor:
	//	'+' adtElement=ValueType;
	public PureSumTypeFactorElements getPureSumTypeFactorAccess() {
		return pPureSumTypeFactor;
	}
	
	public ParserRule getPureSumTypeFactorRule() {
		return getPureSumTypeFactorAccess().getRule();
	}
	
	//PureProdTypeFactor:
	//	'*' adtElement=ValueType;
	public PureProdTypeFactorElements getPureProdTypeFactorAccess() {
		return pPureProdTypeFactor;
	}
	
	public ParserRule getPureProdTypeFactorRule() {
		return getPureProdTypeFactorAccess().getRule();
	}
	
	//EffectFullAlgebraicType:
	//	'{' effectFullAdtElement1=Type effectFullAdtElement2=(EffectFullSumTypeFactor | EffectFullProdTypeFactor) '}';
	public EffectFullAlgebraicTypeElements getEffectFullAlgebraicTypeAccess() {
		return pEffectFullAlgebraicType;
	}
	
	public ParserRule getEffectFullAlgebraicTypeRule() {
		return getEffectFullAlgebraicTypeAccess().getRule();
	}
	
	//EffectFullSumTypeFactor:
	//	'+' adtElement=Type;
	public EffectFullSumTypeFactorElements getEffectFullSumTypeFactorAccess() {
		return pEffectFullSumTypeFactor;
	}
	
	public ParserRule getEffectFullSumTypeFactorRule() {
		return getEffectFullSumTypeFactorAccess().getRule();
	}
	
	//EffectFullProdTypeFactor:
	//	'*' adtElement=Type;
	public EffectFullProdTypeFactorElements getEffectFullProdTypeFactorAccess() {
		return pEffectFullProdTypeFactor;
	}
	
	public ParserRule getEffectFullProdTypeFactorRule() {
		return getEffectFullProdTypeFactorAccess().getRule();
	}
	
	//////////////////////////////////////////////////////////////////////
	//// Values
	//////////////////////////////////////////////////////////////////////
	//EffectFullExpression:
	//	{IOEffectFullExpression} 'IO' '[' innerValue=EffectFullExpression ']'
	//	| {IOExpression} 'IO' '(' innerValue=Expression ')'
	//	| {IOPureFunction} 'IOF' '(' pureFunction=[PureFunction] ')'
	//	| {IOPureFunction} 'IOF' '(' purePrimitive=PrimitivePureFunction ')'
	//	| {IOEffectFullFunction} 'IOF' '[' effectFullFunction=[EffectFullFunction] ']'
	//	| {IOEffectFullFunction} 'IOF' '[' effectFullPrimitive=PrimitiveEffectFullFunction ']'
	//	| EffectFullFunctionValue
	//	| EffectFullDataValue
	//	| EffectFullProdValue
	//	| EffectFullSumValue
	//	| EffectFullValueRef;
	public EffectFullExpressionElements getEffectFullExpressionAccess() {
		return pEffectFullExpression;
	}
	
	public ParserRule getEffectFullExpressionRule() {
		return getEffectFullExpressionAccess().getRule();
	}
	
	//UnitValue UnitType:
	//	{UnitType} '()'
	public UnitValueElements getUnitValueAccess() {
		return pUnitValue;
	}
	
	public ParserRule getUnitValueRule() {
		return getUnitValueAccess().getRule();
	}
	
	//EffectFullFunctionValue EffectFullFunctionType:
	//	value=EffectFullLambda
	public EffectFullFunctionValueElements getEffectFullFunctionValueAccess() {
		return pEffectFullFunctionValue;
	}
	
	public ParserRule getEffectFullFunctionValueRule() {
		return getEffectFullFunctionValueAccess().getRule();
	}
	
	//EffectFullValueRef:
	//	{EffectFullValueRef} 'EffectFullRef' '[' value=[EffectFullValue] ']';
	public EffectFullValueRefElements getEffectFullValueRefAccess() {
		return pEffectFullValueRef;
	}
	
	public ParserRule getEffectFullValueRefRule() {
		return getEffectFullValueRefAccess().getRule();
	}
	
	//EffectFullLambda EffectFullFunctionDefinition:
	//	{EffectFullLambda} '\\' '[' arg=Argument ']' '->' '{' functionBody=CompositionFunctionBodyEffect '}'
	//	| {EffectFullLambda} '\\' '[' ']' '->' '{' functionBody=CompositionFunctionBodyEffect '}'
	public EffectFullLambdaElements getEffectFullLambdaAccess() {
		return pEffectFullLambda;
	}
	
	public ParserRule getEffectFullLambdaRule() {
		return getEffectFullLambdaAccess().getRule();
	}
	
	//Expression:
	//	IntValue
	//	| StringValue
	//	| BooleanValue
	//	| DataValue
	//	| FunctionValue
	//	| UnitValue
	//	| PureValueRef
	//	| PureSumValue
	//	| PureProdValue;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//IntValue IntegerType:
	//	{IntegerType} value=INT
	public IntValueElements getIntValueAccess() {
		return pIntValue;
	}
	
	public ParserRule getIntValueRule() {
		return getIntValueAccess().getRule();
	}
	
	//StringValue StringType:
	//	{StringType} value=STRING
	public StringValueElements getStringValueAccess() {
		return pStringValue;
	}
	
	public ParserRule getStringValueRule() {
		return getStringValueAccess().getRule();
	}
	
	//BooleanValue BooleanType:
	//	{BooleanType} value=BOOLEAN
	public BooleanValueElements getBooleanValueAccess() {
		return pBooleanValue;
	}
	
	public ParserRule getBooleanValueRule() {
		return getBooleanValueAccess().getRule();
	}
	
	//FunctionValue PureFunctionType:
	//	value=PureLambda
	public FunctionValueElements getFunctionValueAccess() {
		return pFunctionValue;
	}
	
	public ParserRule getFunctionValueRule() {
		return getFunctionValueAccess().getRule();
	}
	
	//DataValue DataType:
	//	{DataValue} type=[PureData] '(' value=Expression ')'
	public DataValueElements getDataValueAccess() {
		return pDataValue;
	}
	
	public ParserRule getDataValueRule() {
		return getDataValueAccess().getRule();
	}
	
	//EffectFullDataValue EffectFullDataType:
	//	{EffectFullDataValue} type=[EffectFullData] '[' value=EffectFullExpression ']'
	public EffectFullDataValueElements getEffectFullDataValueAccess() {
		return pEffectFullDataValue;
	}
	
	public ParserRule getEffectFullDataValueRule() {
		return getEffectFullDataValueAccess().getRule();
	}
	
	//PureValueRef:
	//	{PureValueRef} 'PureRef' '(' value=[PureValue] ')';
	public PureValueRefElements getPureValueRefAccess() {
		return pPureValueRef;
	}
	
	public ParserRule getPureValueRefRule() {
		return getPureValueRefAccess().getRule();
	}
	
	//PureLambda PureFunctionDefinition:
	//	{PureLambda} '\\' '(' arg=PureArgument ')' '->' '{' functionBody=CompositionFunctionBodyPure '}'
	//	| {PureLambda} '\\' '(' ')' '->' '{' functionBody=CompositionFunctionBodyPure '}'
	public PureLambdaElements getPureLambdaAccess() {
		return pPureLambda;
	}
	
	public ParserRule getPureLambdaRule() {
		return getPureLambdaAccess().getRule();
	}
	
	//PureProdValue PureAlgebraicType:
	//	{PureProdValue} '(' prodAdtElement1=Expression ',' prodAdtElement2=Expression ')'
	public PureProdValueElements getPureProdValueAccess() {
		return pPureProdValue;
	}
	
	public ParserRule getPureProdValueRule() {
		return getPureProdValueAccess().getRule();
	}
	
	//PureSumValue PureAlgebraicType:
	//	{PureSumValue} 'Left' '(' sumAdtElement1=Expression ')'
	//	| {PureSumValue} 'Right' '(' sumAdtElement2=Expression ')'
	public PureSumValueElements getPureSumValueAccess() {
		return pPureSumValue;
	}
	
	public ParserRule getPureSumValueRule() {
		return getPureSumValueAccess().getRule();
	}
	
	//EffectFullProdValue EffectFullAlgebraicType:
	//	{EffectFullProdValue} '[' prodAdtElement1=EffectFullExpression ',' prodAdtElement2=EffectFullExpression ']'
	public EffectFullProdValueElements getEffectFullProdValueAccess() {
		return pEffectFullProdValue;
	}
	
	public ParserRule getEffectFullProdValueRule() {
		return getEffectFullProdValueAccess().getRule();
	}
	
	//EffectFullSumValue EffectFullAlgebraicType:
	//	{EffectFullSumValue} 'Left' '[' sumAdtElement1=EffectFullExpression ']'
	//	| {EffectFullSumValue} 'Right' '[' sumAdtElement2=EffectFullExpression ']'
	public EffectFullSumValueElements getEffectFullSumValueAccess() {
		return pEffectFullSumValue;
	}
	
	public ParserRule getEffectFullSumValueRule() {
		return getEffectFullSumValueAccess().getRule();
	}
	
	///////////////////////////////////////////////////////////////////////
	//// Primitives
	///////////////////////////////////////////////////////////////////////
	//PrimitivePureFunction:
	//	IntToString | IntPow | Plus | Minus | Times | Mod | ApplyF | LeftAlgebraic | RightAlgebraic
	//	| Equals | MinorEquals | MajorEquals | Minor | Major | LogicAnd | LogicOr
	//	| ExtractPure | IsLeftPure | IsRightPure | PureIf;
	public PrimitivePureFunctionElements getPrimitivePureFunctionAccess() {
		return pPrimitivePureFunction;
	}
	
	public ParserRule getPrimitivePureFunctionRule() {
		return getPrimitivePureFunctionAccess().getRule();
	}
	
	//IntToString:
	//	{IntToString} 'intToString';
	public IntToStringElements getIntToStringAccess() {
		return pIntToString;
	}
	
	public ParserRule getIntToStringRule() {
		return getIntToStringAccess().getRule();
	}
	
	//IntPow:
	//	{IntPow} 'intPow';
	public IntPowElements getIntPowAccess() {
		return pIntPow;
	}
	
	public ParserRule getIntPowRule() {
		return getIntPowAccess().getRule();
	}
	
	//Plus:
	//	{Plus} '+' type=(IntegerType | StringType);
	public PlusElements getPlusAccess() {
		return pPlus;
	}
	
	public ParserRule getPlusRule() {
		return getPlusAccess().getRule();
	}
	
	//Minus:
	//	{Minus} '-';
	public MinusElements getMinusAccess() {
		return pMinus;
	}
	
	public ParserRule getMinusRule() {
		return getMinusAccess().getRule();
	}
	
	//Times:
	//	{Times} '*';
	public TimesElements getTimesAccess() {
		return pTimes;
	}
	
	public ParserRule getTimesRule() {
		return getTimesAccess().getRule();
	}
	
	//Mod:
	//	{Mod} 'mod';
	public ModElements getModAccess() {
		return pMod;
	}
	
	public ParserRule getModRule() {
		return getModAccess().getRule();
	}
	
	//LeftAlgebraic:
	//	{LeftAlgebraic} 'leftADT' type=PureAlgebraicType;
	public LeftAlgebraicElements getLeftAlgebraicAccess() {
		return pLeftAlgebraic;
	}
	
	public ParserRule getLeftAlgebraicRule() {
		return getLeftAlgebraicAccess().getRule();
	}
	
	//RightAlgebraic:
	//	{RightAlgebraic} 'rightADT' type=PureAlgebraicType;
	public RightAlgebraicElements getRightAlgebraicAccess() {
		return pRightAlgebraic;
	}
	
	public ParserRule getRightAlgebraicRule() {
		return getRightAlgebraicAccess().getRule();
	}
	
	//ApplyF:
	//	{ApplyF} 'applyF' functionType=PureFunctionType value=ApplyFFactor;
	public ApplyFElements getApplyFAccess() {
		return pApplyF;
	}
	
	public ParserRule getApplyFRule() {
		return getApplyFAccess().getRule();
	}
	
	//ApplyFFactor:
	//	valueReference=[PureFunction] | '(' valueExpression=Expression ')';
	public ApplyFFactorElements getApplyFFactorAccess() {
		return pApplyFFactor;
	}
	
	public ParserRule getApplyFFactorRule() {
		return getApplyFFactorAccess().getRule();
	}
	
	//Equals:
	//	{Equals} '==' type=(IntegerType | StringType | BooleanType);
	public EqualsElements getEqualsAccess() {
		return pEquals;
	}
	
	public ParserRule getEqualsRule() {
		return getEqualsAccess().getRule();
	}
	
	//MinorEquals:
	//	{MinorEquals} '<=';
	public MinorEqualsElements getMinorEqualsAccess() {
		return pMinorEquals;
	}
	
	public ParserRule getMinorEqualsRule() {
		return getMinorEqualsAccess().getRule();
	}
	
	//MajorEquals:
	//	{MajorEquals} '>=';
	public MajorEqualsElements getMajorEqualsAccess() {
		return pMajorEquals;
	}
	
	public ParserRule getMajorEqualsRule() {
		return getMajorEqualsAccess().getRule();
	}
	
	//Minor:
	//	{Minor} '<';
	public MinorElements getMinorAccess() {
		return pMinor;
	}
	
	public ParserRule getMinorRule() {
		return getMinorAccess().getRule();
	}
	
	//Major:
	//	{Major} '>';
	public MajorElements getMajorAccess() {
		return pMajor;
	}
	
	public ParserRule getMajorRule() {
		return getMajorAccess().getRule();
	}
	
	//LogicAnd:
	//	{LogicAnd} '&&';
	public LogicAndElements getLogicAndAccess() {
		return pLogicAnd;
	}
	
	public ParserRule getLogicAndRule() {
		return getLogicAndAccess().getRule();
	}
	
	//LogicOr:
	//	{LogicOr} '||';
	public LogicOrElements getLogicOrAccess() {
		return pLogicOr;
	}
	
	public ParserRule getLogicOrRule() {
		return getLogicOrAccess().getRule();
	}
	
	//ExtractPure:
	//	{ExtractPure} 'extract' data=[PureData];
	public ExtractPureElements getExtractPureAccess() {
		return pExtractPure;
	}
	
	public ParserRule getExtractPureRule() {
		return getExtractPureAccess().getRule();
	}
	
	//IsLeftPure:
	//	{IsLeftPure} 'isLeft' type=PureAlgebraicType;
	public IsLeftPureElements getIsLeftPureAccess() {
		return pIsLeftPure;
	}
	
	public ParserRule getIsLeftPureRule() {
		return getIsLeftPureAccess().getRule();
	}
	
	//IsRightPure:
	//	{IsRightPure} 'isRight' type=PureAlgebraicType;
	public IsRightPureElements getIsRightPureAccess() {
		return pIsRightPure;
	}
	
	public ParserRule getIsRightPureRule() {
		return getIsRightPureAccess().getRule();
	}
	
	//PureIf:
	//	{PureIf} 'if' 'then' '{' then=PureIfBody '}' 'else' '{' else=PureIfBody '}';
	public PureIfElements getPureIfAccess() {
		return pPureIf;
	}
	
	public ParserRule getPureIfRule() {
		return getPureIfAccess().getRule();
	}
	
	//PureIfBody:
	//	functionReference=[PureFunction] | functionExpression=Expression;
	public PureIfBodyElements getPureIfBodyAccess() {
		return pPureIfBody;
	}
	
	public ParserRule getPureIfBodyRule() {
		return getPureIfBodyAccess().getRule();
	}
	
	//PrimitiveEffectFullFunction:
	//	PrimitivePrint | ApplyFIO | PrimitiveReturn | LeftAlgebraicIO | RightAlgebraicIO | ExtractEffectFull
	//	| LiftPureFunction | LiftEffectFullFunction | IsLeftEffectFull | IsRightEffectFull | EffectFullIf;
	public PrimitiveEffectFullFunctionElements getPrimitiveEffectFullFunctionAccess() {
		return pPrimitiveEffectFullFunction;
	}
	
	public ParserRule getPrimitiveEffectFullFunctionRule() {
		return getPrimitiveEffectFullFunctionAccess().getRule();
	}
	
	//PrimitivePrint:
	//	{PrimitivePrint} "print";
	public PrimitivePrintElements getPrimitivePrintAccess() {
		return pPrimitivePrint;
	}
	
	public ParserRule getPrimitivePrintRule() {
		return getPrimitivePrintAccess().getRule();
	}
	
	//LeftAlgebraicIO:
	//	{LeftAlgebraicIO} 'leftADT' type=EffectFullAlgebraicType;
	public LeftAlgebraicIOElements getLeftAlgebraicIOAccess() {
		return pLeftAlgebraicIO;
	}
	
	public ParserRule getLeftAlgebraicIORule() {
		return getLeftAlgebraicIOAccess().getRule();
	}
	
	//RightAlgebraicIO:
	//	{RightAlgebraicIO} 'rightADT' type=EffectFullAlgebraicType;
	public RightAlgebraicIOElements getRightAlgebraicIOAccess() {
		return pRightAlgebraicIO;
	}
	
	public ParserRule getRightAlgebraicIORule() {
		return getRightAlgebraicIOAccess().getRule();
	}
	
	//PrimitiveEffectFullValue:
	//	PrimitiveRandom | PrimitiveTime;
	public PrimitiveEffectFullValueElements getPrimitiveEffectFullValueAccess() {
		return pPrimitiveEffectFullValue;
	}
	
	public ParserRule getPrimitiveEffectFullValueRule() {
		return getPrimitiveEffectFullValueAccess().getRule();
	}
	
	//PrimitiveRandom:
	//	{PrimitiveRandom} "randomInt";
	public PrimitiveRandomElements getPrimitiveRandomAccess() {
		return pPrimitiveRandom;
	}
	
	public ParserRule getPrimitiveRandomRule() {
		return getPrimitiveRandomAccess().getRule();
	}
	
	//PrimitiveReturn:
	//	{PrimitiveReturn} "return" type=Type;
	public PrimitiveReturnElements getPrimitiveReturnAccess() {
		return pPrimitiveReturn;
	}
	
	public ParserRule getPrimitiveReturnRule() {
		return getPrimitiveReturnAccess().getRule();
	}
	
	//PrimitiveTime:
	//	{PrimitiveTime} "currentTime";
	public PrimitiveTimeElements getPrimitiveTimeAccess() {
		return pPrimitiveTime;
	}
	
	public ParserRule getPrimitiveTimeRule() {
		return getPrimitiveTimeAccess().getRule();
	}
	
	//ApplyFIO:
	//	{ApplyFIO} 'applyFIO' functionType=EffectFullFunctionType value=ApplyFIOFactor;
	public ApplyFIOElements getApplyFIOAccess() {
		return pApplyFIO;
	}
	
	public ParserRule getApplyFIORule() {
		return getApplyFIOAccess().getRule();
	}
	
	//ApplyFIOFactor:
	//	valueReference=[EffectFullFunction] | valuePrimitive=EffectFullPrimitive
	//	| '(' valueExpression=EffectFullExpression ')';
	public ApplyFIOFactorElements getApplyFIOFactorAccess() {
		return pApplyFIOFactor;
	}
	
	public ParserRule getApplyFIOFactorRule() {
		return getApplyFIOFactorAccess().getRule();
	}
	
	//ExtractEffectFull:
	//	{ExtractEffectFull} 'extractEffectFull' data=[EffectFullData];
	public ExtractEffectFullElements getExtractEffectFullAccess() {
		return pExtractEffectFull;
	}
	
	public ParserRule getExtractEffectFullRule() {
		return getExtractEffectFullAccess().getRule();
	}
	
	//LiftPureFunction:
	//	'Lift' '(' functionRef=[PureFunction] ')'
	//	| 'Lift' '(' functionPrimitive=PrimitivePureFunction ')';
	public LiftPureFunctionElements getLiftPureFunctionAccess() {
		return pLiftPureFunction;
	}
	
	public ParserRule getLiftPureFunctionRule() {
		return getLiftPureFunctionAccess().getRule();
	}
	
	//LiftEffectFullFunction:
	//	'Lift' '[' functionRef=[EffectFullFunction] ']'
	//	| 'Lift' '[' functionPrimitive=PrimitiveEffectFullFunction ']';
	public LiftEffectFullFunctionElements getLiftEffectFullFunctionAccess() {
		return pLiftEffectFullFunction;
	}
	
	public ParserRule getLiftEffectFullFunctionRule() {
		return getLiftEffectFullFunctionAccess().getRule();
	}
	
	//IsLeftEffectFull:
	//	{IsLeftEffectFull} 'isLeft' type=EffectFullAlgebraicType;
	public IsLeftEffectFullElements getIsLeftEffectFullAccess() {
		return pIsLeftEffectFull;
	}
	
	public ParserRule getIsLeftEffectFullRule() {
		return getIsLeftEffectFullAccess().getRule();
	}
	
	//IsRightEffectFull:
	//	{IsRightEffectFull} 'isRight' type=EffectFullAlgebraicType;
	public IsRightEffectFullElements getIsRightEffectFullAccess() {
		return pIsRightEffectFull;
	}
	
	public ParserRule getIsRightEffectFullRule() {
		return getIsRightEffectFullAccess().getRule();
	}
	
	//EffectFullIf:
	//	{EffectFullIf} 'if' 'then' '{' then=EffectFullIfBody '}' 'else' '{' else=EffectFullIfBody '}';
	public EffectFullIfElements getEffectFullIfAccess() {
		return pEffectFullIf;
	}
	
	public ParserRule getEffectFullIfRule() {
		return getEffectFullIfAccess().getRule();
	}
	
	//EffectFullIfBody:
	//	functionReference=[EffectFullFunction] | functionExpression=EffectFullExpression;
	public EffectFullIfBodyElements getEffectFullIfBodyAccess() {
		return pEffectFullIfBody;
	}
	
	public ParserRule getEffectFullIfBodyRule() {
		return getEffectFullIfBodyAccess().getRule();
	}
	
	//terminal BOOLEAN returns ecore::EBoolean:
	//	'true' | 'false';
	public TerminalRule getBOOLEANRule() {
		return tBOOLEAN;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
