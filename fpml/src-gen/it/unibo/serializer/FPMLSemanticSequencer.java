/*
 * generated by Xtext 2.10.0
 */
package it.unibo.serializer;

import com.google.inject.Inject;
import it.unibo.fPML.AdditionalEffectFullArgument;
import it.unibo.fPML.AdditionalPureArgument;
import it.unibo.fPML.ApplyF;
import it.unibo.fPML.ApplyFFactor;
import it.unibo.fPML.ApplyFIO;
import it.unibo.fPML.ApplyFIOFactor;
import it.unibo.fPML.BooleanType;
import it.unibo.fPML.CompositionFunctionBodyEffect;
import it.unibo.fPML.CompositionFunctionBodyEffectFullFactor;
import it.unibo.fPML.CompositionFunctionBodyPure;
import it.unibo.fPML.CompositionFunctionBodyPureFactor;
import it.unibo.fPML.DataType;
import it.unibo.fPML.DataValue;
import it.unibo.fPML.EffectFullAlgebraicType;
import it.unibo.fPML.EffectFullArgument;
import it.unibo.fPML.EffectFullBlock;
import it.unibo.fPML.EffectFullData;
import it.unibo.fPML.EffectFullDataBlock;
import it.unibo.fPML.EffectFullDataType;
import it.unibo.fPML.EffectFullDataValue;
import it.unibo.fPML.EffectFullFunctionBlock;
import it.unibo.fPML.EffectFullFunctionDefinition;
import it.unibo.fPML.EffectFullFunctionType;
import it.unibo.fPML.EffectFullLambda;
import it.unibo.fPML.EffectFullProdTypeFactor;
import it.unibo.fPML.EffectFullProdValue;
import it.unibo.fPML.EffectFullSumTypeFactor;
import it.unibo.fPML.EffectFullSumValue;
import it.unibo.fPML.EffectFullValue;
import it.unibo.fPML.EffectFullValueBlock;
import it.unibo.fPML.EffectFullValueRef;
import it.unibo.fPML.EmptyFunctionBody;
import it.unibo.fPML.Equals;
import it.unibo.fPML.ExtractEffectFull;
import it.unibo.fPML.ExtractPure;
import it.unibo.fPML.FPMLPackage;
import it.unibo.fPML.IOExpression;
import it.unibo.fPML.IOPureFunction;
import it.unibo.fPML.IOType;
import it.unibo.fPML.IntPow;
import it.unibo.fPML.IntToString;
import it.unibo.fPML.IntegerType;
import it.unibo.fPML.LeftPair;
import it.unibo.fPML.LeftPairIO;
import it.unibo.fPML.LogicAnd;
import it.unibo.fPML.LogicOr;
import it.unibo.fPML.MainFunc;
import it.unibo.fPML.Major;
import it.unibo.fPML.MajorEquals;
import it.unibo.fPML.Minor;
import it.unibo.fPML.MinorEquals;
import it.unibo.fPML.Minus;
import it.unibo.fPML.Mod;
import it.unibo.fPML.Model;
import it.unibo.fPML.Plus;
import it.unibo.fPML.PrimitivePrint;
import it.unibo.fPML.PrimitiveRandom;
import it.unibo.fPML.PrimitiveReturn;
import it.unibo.fPML.PrimitiveTime;
import it.unibo.fPML.PureAlgebraicType;
import it.unibo.fPML.PureArgument;
import it.unibo.fPML.PureBlock;
import it.unibo.fPML.PureData;
import it.unibo.fPML.PureDataBlock;
import it.unibo.fPML.PureFunctionBlock;
import it.unibo.fPML.PureFunctionDefinition;
import it.unibo.fPML.PureFunctionType;
import it.unibo.fPML.PureLambda;
import it.unibo.fPML.PureProdTypeFactor;
import it.unibo.fPML.PureProdValue;
import it.unibo.fPML.PureSumTypeFactor;
import it.unibo.fPML.PureSumValue;
import it.unibo.fPML.PureValue;
import it.unibo.fPML.PureValueBlock;
import it.unibo.fPML.PureValueRef;
import it.unibo.fPML.RecursiveEffectFullExpression;
import it.unibo.fPML.RightPair;
import it.unibo.fPML.RightPairIO;
import it.unibo.fPML.StringType;
import it.unibo.fPML.Times;
import it.unibo.fPML.UnitType;
import it.unibo.fPML.VoidType;
import it.unibo.services.FPMLGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class FPMLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private FPMLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == FPMLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case FPMLPackage.ADDITIONAL_EFFECT_FULL_ARGUMENT:
				sequence_AdditionalEffectFullArgument(context, (AdditionalEffectFullArgument) semanticObject); 
				return; 
			case FPMLPackage.ADDITIONAL_PURE_ARGUMENT:
				sequence_AdditionalPureArgument(context, (AdditionalPureArgument) semanticObject); 
				return; 
			case FPMLPackage.APPLY_F:
				sequence_ApplyF(context, (ApplyF) semanticObject); 
				return; 
			case FPMLPackage.APPLY_FFACTOR:
				sequence_ApplyFFactor(context, (ApplyFFactor) semanticObject); 
				return; 
			case FPMLPackage.APPLY_FIO:
				sequence_ApplyFIO(context, (ApplyFIO) semanticObject); 
				return; 
			case FPMLPackage.APPLY_FIO_FACTOR:
				sequence_ApplyFIOFactor(context, (ApplyFIOFactor) semanticObject); 
				return; 
			case FPMLPackage.BOOLEAN_TYPE:
				if (rule == grammarAccess.getValueTypeRule()
						|| rule == grammarAccess.getTypeRule()
						|| rule == grammarAccess.getBooleanTypeRule()) {
					sequence_BooleanType(context, (BooleanType) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getFunctionRule()
						|| rule == grammarAccess.getPureFunctionRule()
						|| rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getBooleanValueRule()) {
					sequence_BooleanValue(context, (BooleanType) semanticObject); 
					return; 
				}
				else break;
			case FPMLPackage.COMPOSITION_FUNCTION_BODY_EFFECT:
				sequence_CompositionFunctionBodyEffect(context, (CompositionFunctionBodyEffect) semanticObject); 
				return; 
			case FPMLPackage.COMPOSITION_FUNCTION_BODY_EFFECT_FULL_FACTOR:
				sequence_CompositionFunctionBodyEffectFullFactor(context, (CompositionFunctionBodyEffectFullFactor) semanticObject); 
				return; 
			case FPMLPackage.COMPOSITION_FUNCTION_BODY_PURE:
				sequence_CompositionFunctionBodyPure(context, (CompositionFunctionBodyPure) semanticObject); 
				return; 
			case FPMLPackage.COMPOSITION_FUNCTION_BODY_PURE_FACTOR:
				sequence_CompositionFunctionBodyPureFactor(context, (CompositionFunctionBodyPureFactor) semanticObject); 
				return; 
			case FPMLPackage.DATA_TYPE:
				sequence_DataType(context, (DataType) semanticObject); 
				return; 
			case FPMLPackage.DATA_VALUE:
				sequence_DataValue(context, (DataValue) semanticObject); 
				return; 
			case FPMLPackage.EFFECT_FULL_ALGEBRAIC_TYPE:
				sequence_EffectFullAlgebraicType(context, (EffectFullAlgebraicType) semanticObject); 
				return; 
			case FPMLPackage.EFFECT_FULL_ARGUMENT:
				sequence_EffectFullArgument(context, (EffectFullArgument) semanticObject); 
				return; 
			case FPMLPackage.EFFECT_FULL_BLOCK:
				sequence_EffectFullBlock(context, (EffectFullBlock) semanticObject); 
				return; 
			case FPMLPackage.EFFECT_FULL_DATA:
				sequence_EffectFullData(context, (EffectFullData) semanticObject); 
				return; 
			case FPMLPackage.EFFECT_FULL_DATA_BLOCK:
				sequence_EffectFullDataBlock(context, (EffectFullDataBlock) semanticObject); 
				return; 
			case FPMLPackage.EFFECT_FULL_DATA_TYPE:
				sequence_EffectFullDataType(context, (EffectFullDataType) semanticObject); 
				return; 
			case FPMLPackage.EFFECT_FULL_DATA_VALUE:
				sequence_EffectFullDataValue(context, (EffectFullDataValue) semanticObject); 
				return; 
			case FPMLPackage.EFFECT_FULL_FUNCTION_BLOCK:
				sequence_EffectFullFunctionBlock(context, (EffectFullFunctionBlock) semanticObject); 
				return; 
			case FPMLPackage.EFFECT_FULL_FUNCTION_DEFINITION:
				sequence_EffectFullFunctionDefinition(context, (EffectFullFunctionDefinition) semanticObject); 
				return; 
			case FPMLPackage.EFFECT_FULL_FUNCTION_TYPE:
				if (rule == grammarAccess.getTypeRule()
						|| rule == grammarAccess.getEffectFullTypeRule()
						|| rule == grammarAccess.getEffectFullFunctionTypeRule()) {
					sequence_EffectFullFunctionType(context, (EffectFullFunctionType) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getFunctionRule()
						|| rule == grammarAccess.getEffectFullFunctionRule()
						|| rule == grammarAccess.getEffectFullBodyContentRule()
						|| rule == grammarAccess.getEffectFullExpressionRule()
						|| rule == grammarAccess.getEffectFullFunctionValueRule()) {
					sequence_EffectFullFunctionValue(context, (EffectFullFunctionType) semanticObject); 
					return; 
				}
				else break;
			case FPMLPackage.EFFECT_FULL_LAMBDA:
				sequence_EffectFullLambda(context, (EffectFullLambda) semanticObject); 
				return; 
			case FPMLPackage.EFFECT_FULL_PROD_TYPE_FACTOR:
				sequence_EffectFullProdTypeFactor(context, (EffectFullProdTypeFactor) semanticObject); 
				return; 
			case FPMLPackage.EFFECT_FULL_PROD_VALUE:
				sequence_EffectFullProdValue(context, (EffectFullProdValue) semanticObject); 
				return; 
			case FPMLPackage.EFFECT_FULL_SUM_TYPE_FACTOR:
				sequence_EffectFullSumTypeFactor(context, (EffectFullSumTypeFactor) semanticObject); 
				return; 
			case FPMLPackage.EFFECT_FULL_SUM_VALUE:
				sequence_EffectFullSumValue(context, (EffectFullSumValue) semanticObject); 
				return; 
			case FPMLPackage.EFFECT_FULL_VALUE:
				sequence_EffectFullValue(context, (EffectFullValue) semanticObject); 
				return; 
			case FPMLPackage.EFFECT_FULL_VALUE_BLOCK:
				sequence_EffectFullValueBlock(context, (EffectFullValueBlock) semanticObject); 
				return; 
			case FPMLPackage.EFFECT_FULL_VALUE_REF:
				sequence_EffectFullValueRef(context, (EffectFullValueRef) semanticObject); 
				return; 
			case FPMLPackage.EMPTY_FUNCTION_BODY:
				sequence_EmptyFunctionBody(context, (EmptyFunctionBody) semanticObject); 
				return; 
			case FPMLPackage.EQUALS:
				sequence_Equals(context, (Equals) semanticObject); 
				return; 
			case FPMLPackage.EXTRACT_EFFECT_FULL:
				sequence_ExtractEffectFull(context, (ExtractEffectFull) semanticObject); 
				return; 
			case FPMLPackage.EXTRACT_PURE:
				sequence_ExtractPure(context, (ExtractPure) semanticObject); 
				return; 
			case FPMLPackage.IO_EXPRESSION:
				sequence_EffectFullExpression(context, (IOExpression) semanticObject); 
				return; 
			case FPMLPackage.IO_PURE_FUNCTION:
				sequence_EffectFullExpression(context, (IOPureFunction) semanticObject); 
				return; 
			case FPMLPackage.IO_TYPE:
				sequence_IOType(context, (IOType) semanticObject); 
				return; 
			case FPMLPackage.INT_POW:
				sequence_IntPow(context, (IntPow) semanticObject); 
				return; 
			case FPMLPackage.INT_TO_STRING:
				sequence_IntToString(context, (IntToString) semanticObject); 
				return; 
			case FPMLPackage.INTEGER_TYPE:
				if (rule == grammarAccess.getFunctionRule()
						|| rule == grammarAccess.getPureFunctionRule()
						|| rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getIntValueRule()) {
					sequence_IntValue(context, (IntegerType) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getValueTypeRule()
						|| rule == grammarAccess.getTypeRule()
						|| rule == grammarAccess.getIntegerTypeRule()) {
					sequence_IntegerType(context, (IntegerType) semanticObject); 
					return; 
				}
				else break;
			case FPMLPackage.LEFT_PAIR:
				sequence_LeftPair(context, (LeftPair) semanticObject); 
				return; 
			case FPMLPackage.LEFT_PAIR_IO:
				sequence_LeftPairIO(context, (LeftPairIO) semanticObject); 
				return; 
			case FPMLPackage.LOGIC_AND:
				sequence_LogicAnd(context, (LogicAnd) semanticObject); 
				return; 
			case FPMLPackage.LOGIC_OR:
				sequence_LogicOr(context, (LogicOr) semanticObject); 
				return; 
			case FPMLPackage.MAIN_FUNC:
				sequence_MainFunc(context, (MainFunc) semanticObject); 
				return; 
			case FPMLPackage.MAJOR:
				sequence_Major(context, (Major) semanticObject); 
				return; 
			case FPMLPackage.MAJOR_EQUALS:
				sequence_MajorEquals(context, (MajorEquals) semanticObject); 
				return; 
			case FPMLPackage.MINOR:
				sequence_Minor(context, (Minor) semanticObject); 
				return; 
			case FPMLPackage.MINOR_EQUALS:
				sequence_MinorEquals(context, (MinorEquals) semanticObject); 
				return; 
			case FPMLPackage.MINUS:
				sequence_Minus(context, (Minus) semanticObject); 
				return; 
			case FPMLPackage.MOD:
				sequence_Mod(context, (Mod) semanticObject); 
				return; 
			case FPMLPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case FPMLPackage.PLUS:
				sequence_Plus(context, (Plus) semanticObject); 
				return; 
			case FPMLPackage.PRIMITIVE_PRINT:
				sequence_PrimitivePrint(context, (PrimitivePrint) semanticObject); 
				return; 
			case FPMLPackage.PRIMITIVE_RANDOM:
				sequence_PrimitiveRandom(context, (PrimitiveRandom) semanticObject); 
				return; 
			case FPMLPackage.PRIMITIVE_RETURN:
				sequence_PrimitiveReturn(context, (PrimitiveReturn) semanticObject); 
				return; 
			case FPMLPackage.PRIMITIVE_TIME:
				sequence_PrimitiveTime(context, (PrimitiveTime) semanticObject); 
				return; 
			case FPMLPackage.PURE_ALGEBRAIC_TYPE:
				sequence_PureAlgebraicType(context, (PureAlgebraicType) semanticObject); 
				return; 
			case FPMLPackage.PURE_ARGUMENT:
				sequence_PureArgument(context, (PureArgument) semanticObject); 
				return; 
			case FPMLPackage.PURE_BLOCK:
				sequence_PureBlock(context, (PureBlock) semanticObject); 
				return; 
			case FPMLPackage.PURE_DATA:
				sequence_PureData(context, (PureData) semanticObject); 
				return; 
			case FPMLPackage.PURE_DATA_BLOCK:
				sequence_PureDataBlock(context, (PureDataBlock) semanticObject); 
				return; 
			case FPMLPackage.PURE_FUNCTION_BLOCK:
				sequence_PureFunctionBlock(context, (PureFunctionBlock) semanticObject); 
				return; 
			case FPMLPackage.PURE_FUNCTION_DEFINITION:
				sequence_PureFunctionDefinition(context, (PureFunctionDefinition) semanticObject); 
				return; 
			case FPMLPackage.PURE_FUNCTION_TYPE:
				if (rule == grammarAccess.getFunctionRule()
						|| rule == grammarAccess.getPureFunctionRule()
						|| rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getFunctionValueRule()) {
					sequence_FunctionValue(context, (PureFunctionType) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getValueTypeRule()
						|| rule == grammarAccess.getTypeRule()
						|| rule == grammarAccess.getPureFunctionTypeRule()) {
					sequence_PureFunctionType(context, (PureFunctionType) semanticObject); 
					return; 
				}
				else break;
			case FPMLPackage.PURE_LAMBDA:
				sequence_PureLambda(context, (PureLambda) semanticObject); 
				return; 
			case FPMLPackage.PURE_PROD_TYPE_FACTOR:
				sequence_PureProdTypeFactor(context, (PureProdTypeFactor) semanticObject); 
				return; 
			case FPMLPackage.PURE_PROD_VALUE:
				sequence_PureProdValue(context, (PureProdValue) semanticObject); 
				return; 
			case FPMLPackage.PURE_SUM_TYPE_FACTOR:
				sequence_PureSumTypeFactor(context, (PureSumTypeFactor) semanticObject); 
				return; 
			case FPMLPackage.PURE_SUM_VALUE:
				sequence_PureSumValue(context, (PureSumValue) semanticObject); 
				return; 
			case FPMLPackage.PURE_VALUE:
				sequence_PureValue(context, (PureValue) semanticObject); 
				return; 
			case FPMLPackage.PURE_VALUE_BLOCK:
				sequence_PureValueBlock(context, (PureValueBlock) semanticObject); 
				return; 
			case FPMLPackage.PURE_VALUE_REF:
				sequence_PureValueRef(context, (PureValueRef) semanticObject); 
				return; 
			case FPMLPackage.RECURSIVE_EFFECT_FULL_EXPRESSION:
				sequence_EffectFullExpression(context, (RecursiveEffectFullExpression) semanticObject); 
				return; 
			case FPMLPackage.RIGHT_PAIR:
				sequence_RightPair(context, (RightPair) semanticObject); 
				return; 
			case FPMLPackage.RIGHT_PAIR_IO:
				sequence_RightPairIO(context, (RightPairIO) semanticObject); 
				return; 
			case FPMLPackage.STRING_TYPE:
				if (rule == grammarAccess.getValueTypeRule()
						|| rule == grammarAccess.getTypeRule()
						|| rule == grammarAccess.getStringTypeRule()) {
					sequence_StringType(context, (StringType) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getFunctionRule()
						|| rule == grammarAccess.getPureFunctionRule()
						|| rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getStringValueRule()) {
					sequence_StringValue(context, (StringType) semanticObject); 
					return; 
				}
				else break;
			case FPMLPackage.TIMES:
				sequence_Times(context, (Times) semanticObject); 
				return; 
			case FPMLPackage.UNIT_TYPE:
				if (rule == grammarAccess.getValueTypeRule()
						|| rule == grammarAccess.getTypeRule()
						|| rule == grammarAccess.getUnitTypeRule()) {
					sequence_UnitType(context, (UnitType) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getFunctionRule()
						|| rule == grammarAccess.getPureFunctionRule()
						|| rule == grammarAccess.getUnitValueRule()
						|| rule == grammarAccess.getExpressionRule()) {
					sequence_UnitValue(context, (UnitType) semanticObject); 
					return; 
				}
				else break;
			case FPMLPackage.VOID_TYPE:
				sequence_VoidType(context, (VoidType) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     AdditionalEffectFullArgument returns AdditionalEffectFullArgument
	 *
	 * Constraint:
	 *     arg2=Argument
	 */
	protected void sequence_AdditionalEffectFullArgument(ISerializationContext context, AdditionalEffectFullArgument semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FPMLPackage.Literals.ADDITIONAL_EFFECT_FULL_ARGUMENT__ARG2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FPMLPackage.Literals.ADDITIONAL_EFFECT_FULL_ARGUMENT__ARG2));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAdditionalEffectFullArgumentAccess().getArg2ArgumentParserRuleCall_0(), semanticObject.getArg2());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AdditionalPureArgument returns AdditionalPureArgument
	 *
	 * Constraint:
	 *     arg2=PureArgument
	 */
	protected void sequence_AdditionalPureArgument(ISerializationContext context, AdditionalPureArgument semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FPMLPackage.Literals.ADDITIONAL_PURE_ARGUMENT__ARG2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FPMLPackage.Literals.ADDITIONAL_PURE_ARGUMENT__ARG2));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAdditionalPureArgumentAccess().getArg2PureArgumentParserRuleCall_0(), semanticObject.getArg2());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ApplyFFactor returns ApplyFFactor
	 *
	 * Constraint:
	 *     (valueReference=[PureFunction|ID] | valueExpression=Expression)
	 */
	protected void sequence_ApplyFFactor(ISerializationContext context, ApplyFFactor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ApplyFIOFactor returns ApplyFIOFactor
	 *
	 * Constraint:
	 *     (valueReference=[EffectFullFunction|ID] | valuePrimitive=EffectFullPrimitive | valueExpression=EffectFullExpression)
	 */
	protected void sequence_ApplyFIOFactor(ISerializationContext context, ApplyFIOFactor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Function returns ApplyFIO
	 *     EffectFullFunction returns ApplyFIO
	 *     PrimitiveFunction returns ApplyFIO
	 *     EffectFullPrimitive returns ApplyFIO
	 *     EffectFullBodyContent returns ApplyFIO
	 *     PrimitiveEffectFullFunction returns ApplyFIO
	 *     ApplyFIO returns ApplyFIO
	 *
	 * Constraint:
	 *     (functionType=EffectFullFunctionType value=ApplyFIOFactor)
	 */
	protected void sequence_ApplyFIO(ISerializationContext context, ApplyFIO semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FPMLPackage.Literals.APPLY_FIO__FUNCTION_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FPMLPackage.Literals.APPLY_FIO__FUNCTION_TYPE));
			if (transientValues.isValueTransient(semanticObject, FPMLPackage.Literals.APPLY_FIO__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FPMLPackage.Literals.APPLY_FIO__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getApplyFIOAccess().getFunctionTypeEffectFullFunctionTypeParserRuleCall_2_0(), semanticObject.getFunctionType());
		feeder.accept(grammarAccess.getApplyFIOAccess().getValueApplyFIOFactorParserRuleCall_3_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Function returns ApplyF
	 *     PureFunction returns ApplyF
	 *     PrimitiveFunction returns ApplyF
	 *     PrimitivePureFunction returns ApplyF
	 *     ApplyF returns ApplyF
	 *
	 * Constraint:
	 *     (functionType=PureFunctionType value=ApplyFFactor)
	 */
	protected void sequence_ApplyF(ISerializationContext context, ApplyF semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FPMLPackage.Literals.APPLY_F__FUNCTION_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FPMLPackage.Literals.APPLY_F__FUNCTION_TYPE));
			if (transientValues.isValueTransient(semanticObject, FPMLPackage.Literals.APPLY_F__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FPMLPackage.Literals.APPLY_F__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getApplyFAccess().getFunctionTypePureFunctionTypeParserRuleCall_2_0(), semanticObject.getFunctionType());
		feeder.accept(grammarAccess.getApplyFAccess().getValueApplyFFactorParserRuleCall_3_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ValueType returns BooleanType
	 *     Type returns BooleanType
	 *     BooleanType returns BooleanType
	 *
	 * Constraint:
	 *     type='boolean'
	 */
	protected void sequence_BooleanType(ISerializationContext context, BooleanType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FPMLPackage.Literals.BOOLEAN_TYPE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FPMLPackage.Literals.BOOLEAN_TYPE__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBooleanTypeAccess().getTypeBooleanKeyword_1_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Function returns BooleanType
	 *     PureFunction returns BooleanType
	 *     Expression returns BooleanType
	 *     BooleanValue returns BooleanType
	 *
	 * Constraint:
	 *     value=BOOLEAN
	 */
	protected void sequence_BooleanValue(ISerializationContext context, BooleanType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FPMLPackage.Literals.BOOLEAN_TYPE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FPMLPackage.Literals.BOOLEAN_TYPE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBooleanValueAccess().getValueBOOLEANTerminalRuleCall_1_0(), semanticObject.isValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     CompositionFunctionBodyEffectFullFactor returns CompositionFunctionBodyEffectFullFactor
	 *
	 * Constraint:
	 *     (referenceElement=[EffectFullFunction|ID] | primitiveElement=EffectFullPrimitive | expressionElement=EffectFullExpression)
	 */
	protected void sequence_CompositionFunctionBodyEffectFullFactor(ISerializationContext context, CompositionFunctionBodyEffectFullFactor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FunctionBodyEffectFull returns CompositionFunctionBodyEffect
	 *     CompositionFunctionBodyEffect returns CompositionFunctionBodyEffect
	 *
	 * Constraint:
	 *     (
	 *         (referenceElement=[EffectFullFunction|ID] functionChain+=CompositionFunctionBodyEffectFullFactor+) | 
	 *         (primitiveElement=EffectFullPrimitive functionChain+=CompositionFunctionBodyEffectFullFactor+) | 
	 *         (expressionElement=EffectFullExpression functionChain+=CompositionFunctionBodyEffectFullFactor+)
	 *     )
	 */
	protected void sequence_CompositionFunctionBodyEffect(ISerializationContext context, CompositionFunctionBodyEffect semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CompositionFunctionBodyPureFactor returns CompositionFunctionBodyPureFactor
	 *
	 * Constraint:
	 *     (referenceElement=[PureFunction|ID] | primitiveElement=PrimitivePureFunction | expressionElement=Expression)
	 */
	protected void sequence_CompositionFunctionBodyPureFactor(ISerializationContext context, CompositionFunctionBodyPureFactor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FunctionBodyPure returns CompositionFunctionBodyPure
	 *     CompositionFunctionBodyPure returns CompositionFunctionBodyPure
	 *
	 * Constraint:
	 *     (
	 *         (referenceElement=[PureFunction|ID] functionChain+=CompositionFunctionBodyPureFactor+) | 
	 *         (primitiveElement=PrimitivePureFunction functionChain+=CompositionFunctionBodyPureFactor+) | 
	 *         (expressionElement=Expression functionChain+=CompositionFunctionBodyPureFactor+)
	 *     )
	 */
	protected void sequence_CompositionFunctionBodyPure(ISerializationContext context, CompositionFunctionBodyPure semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ValueType returns DataType
	 *     Type returns DataType
	 *     DataType returns DataType
	 *
	 * Constraint:
	 *     type=[PureData|ID]
	 */
	protected void sequence_DataType(ISerializationContext context, DataType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FPMLPackage.Literals.DATA_TYPE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FPMLPackage.Literals.DATA_TYPE__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDataTypeAccess().getTypePureDataIDTerminalRuleCall_2_0_1(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Function returns DataValue
	 *     PureFunction returns DataValue
	 *     Expression returns DataValue
	 *     DataValue returns DataValue
	 *
	 * Constraint:
	 *     (type=[PureData|ID] value=Expression)
	 */
	protected void sequence_DataValue(ISerializationContext context, DataValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FPMLPackage.Literals.DATA_TYPE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FPMLPackage.Literals.DATA_TYPE__TYPE));
			if (transientValues.isValueTransient(semanticObject, FPMLPackage.Literals.DATA_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FPMLPackage.Literals.DATA_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDataValueAccess().getTypePureDataIDTerminalRuleCall_1_0_1(), semanticObject.getType());
		feeder.accept(grammarAccess.getDataValueAccess().getValueExpressionParserRuleCall_3_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Type returns EffectFullAlgebraicType
	 *     EffectFullType returns EffectFullAlgebraicType
	 *     EffectFullAlgebraicType returns EffectFullAlgebraicType
	 *
	 * Constraint:
	 *     (effectFullAdtElement1=Type (effectFullAdtElement2=EffectFullSumTypeFactor | effectFullAdtElement2=EffectFullProdTypeFactor))
	 */
	protected void sequence_EffectFullAlgebraicType(ISerializationContext context, EffectFullAlgebraicType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Argument returns EffectFullArgument
	 *     EffectFullArgument returns EffectFullArgument
	 *
	 * Constraint:
	 *     (type=EffectFullType name=ID)
	 */
	protected void sequence_EffectFullArgument(ISerializationContext context, EffectFullArgument semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FPMLPackage.Literals.EFFECT_FULL_ARGUMENT__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FPMLPackage.Literals.EFFECT_FULL_ARGUMENT__TYPE));
			if (transientValues.isValueTransient(semanticObject, FPMLPackage.Literals.ARGUMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FPMLPackage.Literals.ARGUMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEffectFullArgumentAccess().getTypeEffectFullTypeParserRuleCall_0_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getEffectFullArgumentAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EffectFullBlock returns EffectFullBlock
	 *
	 * Constraint:
	 *     (elements+=EffectFullDataBlock elements+=EffectFullFunctionBlock)
	 */
	protected void sequence_EffectFullBlock(ISerializationContext context, EffectFullBlock semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EffectFullDataBlock returns EffectFullDataBlock
	 *
	 * Constraint:
	 *     (elements+=EffectFullData* value=EffectFullValueBlock)
	 */
	protected void sequence_EffectFullDataBlock(ISerializationContext context, EffectFullDataBlock semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Type returns EffectFullDataType
	 *     EffectFullType returns EffectFullDataType
	 *     EffectFullDataType returns EffectFullDataType
	 *
	 * Constraint:
	 *     type=[EffectFullData|ID]
	 */
	protected void sequence_EffectFullDataType(ISerializationContext context, EffectFullDataType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FPMLPackage.Literals.EFFECT_FULL_DATA_TYPE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FPMLPackage.Literals.EFFECT_FULL_DATA_TYPE__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEffectFullDataTypeAccess().getTypeEffectFullDataIDTerminalRuleCall_2_0_1(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Function returns EffectFullDataValue
	 *     EffectFullFunction returns EffectFullDataValue
	 *     EffectFullBodyContent returns EffectFullDataValue
	 *     EffectFullExpression returns EffectFullDataValue
	 *     EffectFullDataValue returns EffectFullDataValue
	 *
	 * Constraint:
	 *     (type=[EffectFullData|ID] value=EffectFullExpression)
	 */
	protected void sequence_EffectFullDataValue(ISerializationContext context, EffectFullDataValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FPMLPackage.Literals.EFFECT_FULL_DATA_TYPE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FPMLPackage.Literals.EFFECT_FULL_DATA_TYPE__TYPE));
			if (transientValues.isValueTransient(semanticObject, FPMLPackage.Literals.EFFECT_FULL_DATA_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FPMLPackage.Literals.EFFECT_FULL_DATA_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEffectFullDataValueAccess().getTypeEffectFullDataIDTerminalRuleCall_1_0_1(), semanticObject.getType());
		feeder.accept(grammarAccess.getEffectFullDataValueAccess().getValueEffectFullExpressionParserRuleCall_3_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EffectFullData returns EffectFullData
	 *
	 * Constraint:
	 *     (name=ID content=EffectFullType)
	 */
	protected void sequence_EffectFullData(ISerializationContext context, EffectFullData semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FPMLPackage.Literals.EFFECT_FULL_DATA__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FPMLPackage.Literals.EFFECT_FULL_DATA__NAME));
			if (transientValues.isValueTransient(semanticObject, FPMLPackage.Literals.EFFECT_FULL_DATA__CONTENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FPMLPackage.Literals.EFFECT_FULL_DATA__CONTENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEffectFullDataAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getEffectFullDataAccess().getContentEffectFullTypeParserRuleCall_2_0(), semanticObject.getContent());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Function returns IOExpression
	 *     EffectFullFunction returns IOExpression
	 *     EffectFullBodyContent returns IOExpression
	 *     EffectFullExpression returns IOExpression
	 *
	 * Constraint:
	 *     innerValue=Expression
	 */
	protected void sequence_EffectFullExpression(ISerializationContext context, IOExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FPMLPackage.Literals.IO_EXPRESSION__INNER_VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FPMLPackage.Literals.IO_EXPRESSION__INNER_VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEffectFullExpressionAccess().getInnerValueExpressionParserRuleCall_1_3_0(), semanticObject.getInnerValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Function returns IOPureFunction
	 *     EffectFullFunction returns IOPureFunction
	 *     EffectFullBodyContent returns IOPureFunction
	 *     EffectFullExpression returns IOPureFunction
	 *
	 * Constraint:
	 *     pureFunction=[PureFunction|ID]
	 */
	protected void sequence_EffectFullExpression(ISerializationContext context, IOPureFunction semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FPMLPackage.Literals.IO_PURE_FUNCTION__PURE_FUNCTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FPMLPackage.Literals.IO_PURE_FUNCTION__PURE_FUNCTION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEffectFullExpressionAccess().getPureFunctionPureFunctionIDTerminalRuleCall_2_3_0_1(), semanticObject.getPureFunction());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Function returns RecursiveEffectFullExpression
	 *     EffectFullFunction returns RecursiveEffectFullExpression
	 *     EffectFullBodyContent returns RecursiveEffectFullExpression
	 *     EffectFullExpression returns RecursiveEffectFullExpression
	 *
	 * Constraint:
	 *     innerValue=EffectFullExpression
	 */
	protected void sequence_EffectFullExpression(ISerializationContext context, RecursiveEffectFullExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FPMLPackage.Literals.RECURSIVE_EFFECT_FULL_EXPRESSION__INNER_VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FPMLPackage.Literals.RECURSIVE_EFFECT_FULL_EXPRESSION__INNER_VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEffectFullExpressionAccess().getInnerValueEffectFullExpressionParserRuleCall_0_3_0(), semanticObject.getInnerValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EffectFullFunctionBlock returns EffectFullFunctionBlock
	 *
	 * Constraint:
	 *     (features+=EffectFullFunctionDefinition* main=MainFunc)
	 */
	protected void sequence_EffectFullFunctionBlock(ISerializationContext context, EffectFullFunctionBlock semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EffectFullFunctionDefinition returns EffectFullFunctionDefinition
	 *     Function returns EffectFullFunctionDefinition
	 *     EffectFullFunction returns EffectFullFunctionDefinition
	 *     EffectFullBodyContent returns EffectFullFunctionDefinition
	 *
	 * Constraint:
	 *     (returnType=IOType name=ID arg=Argument higherOrderArg=AdditionalEffectFullArgument? functionBody=FunctionBodyEffectFull)
	 */
	protected void sequence_EffectFullFunctionDefinition(ISerializationContext context, EffectFullFunctionDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Type returns EffectFullFunctionType
	 *     EffectFullType returns EffectFullFunctionType
	 *     EffectFullFunctionType returns EffectFullFunctionType
	 *
	 * Constraint:
	 *     (argType=Type returnType=IOType)
	 */
	protected void sequence_EffectFullFunctionType(ISerializationContext context, EffectFullFunctionType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FPMLPackage.Literals.EFFECT_FULL_FUNCTION_TYPE__ARG_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FPMLPackage.Literals.EFFECT_FULL_FUNCTION_TYPE__ARG_TYPE));
			if (transientValues.isValueTransient(semanticObject, FPMLPackage.Literals.EFFECT_FULL_FUNCTION_TYPE__RETURN_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FPMLPackage.Literals.EFFECT_FULL_FUNCTION_TYPE__RETURN_TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEffectFullFunctionTypeAccess().getArgTypeTypeParserRuleCall_3_0(), semanticObject.getArgType());
		feeder.accept(grammarAccess.getEffectFullFunctionTypeAccess().getReturnTypeIOTypeParserRuleCall_5_0(), semanticObject.getReturnType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Function returns EffectFullFunctionType
	 *     EffectFullFunction returns EffectFullFunctionType
	 *     EffectFullBodyContent returns EffectFullFunctionType
	 *     EffectFullExpression returns EffectFullFunctionType
	 *     EffectFullFunctionValue returns EffectFullFunctionType
	 *
	 * Constraint:
	 *     value=EffectFullLambda
	 */
	protected void sequence_EffectFullFunctionValue(ISerializationContext context, EffectFullFunctionType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FPMLPackage.Literals.EFFECT_FULL_FUNCTION_TYPE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FPMLPackage.Literals.EFFECT_FULL_FUNCTION_TYPE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEffectFullFunctionValueAccess().getValueEffectFullLambdaParserRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EffectFullLambda returns EffectFullLambda
	 *
	 * Constraint:
	 *     ((arg=Argument functionBody=CompositionFunctionBodyEffect) | functionBody=CompositionFunctionBodyEffect)
	 */
	protected void sequence_EffectFullLambda(ISerializationContext context, EffectFullLambda semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EffectFullProdTypeFactor returns EffectFullProdTypeFactor
	 *
	 * Constraint:
	 *     adtElement=Type
	 */
	protected void sequence_EffectFullProdTypeFactor(ISerializationContext context, EffectFullProdTypeFactor semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FPMLPackage.Literals.EFFECT_FULL_PROD_TYPE_FACTOR__ADT_ELEMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FPMLPackage.Literals.EFFECT_FULL_PROD_TYPE_FACTOR__ADT_ELEMENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEffectFullProdTypeFactorAccess().getAdtElementTypeParserRuleCall_1_0(), semanticObject.getAdtElement());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Function returns EffectFullProdValue
	 *     EffectFullFunction returns EffectFullProdValue
	 *     EffectFullBodyContent returns EffectFullProdValue
	 *     EffectFullExpression returns EffectFullProdValue
	 *     EffectFullProdValue returns EffectFullProdValue
	 *
	 * Constraint:
	 *     (prodAdtElement1=EffectFullExpression prodAdtElement2=EffectFullExpression)
	 */
	protected void sequence_EffectFullProdValue(ISerializationContext context, EffectFullProdValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FPMLPackage.Literals.EFFECT_FULL_PROD_VALUE__PROD_ADT_ELEMENT1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FPMLPackage.Literals.EFFECT_FULL_PROD_VALUE__PROD_ADT_ELEMENT1));
			if (transientValues.isValueTransient(semanticObject, FPMLPackage.Literals.EFFECT_FULL_PROD_VALUE__PROD_ADT_ELEMENT2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FPMLPackage.Literals.EFFECT_FULL_PROD_VALUE__PROD_ADT_ELEMENT2));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEffectFullProdValueAccess().getProdAdtElement1EffectFullExpressionParserRuleCall_2_0(), semanticObject.getProdAdtElement1());
		feeder.accept(grammarAccess.getEffectFullProdValueAccess().getProdAdtElement2EffectFullExpressionParserRuleCall_4_0(), semanticObject.getProdAdtElement2());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EffectFullSumTypeFactor returns EffectFullSumTypeFactor
	 *
	 * Constraint:
	 *     adtElement=Type
	 */
	protected void sequence_EffectFullSumTypeFactor(ISerializationContext context, EffectFullSumTypeFactor semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FPMLPackage.Literals.EFFECT_FULL_SUM_TYPE_FACTOR__ADT_ELEMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FPMLPackage.Literals.EFFECT_FULL_SUM_TYPE_FACTOR__ADT_ELEMENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEffectFullSumTypeFactorAccess().getAdtElementTypeParserRuleCall_1_0(), semanticObject.getAdtElement());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Function returns EffectFullSumValue
	 *     EffectFullFunction returns EffectFullSumValue
	 *     EffectFullBodyContent returns EffectFullSumValue
	 *     EffectFullExpression returns EffectFullSumValue
	 *     EffectFullSumValue returns EffectFullSumValue
	 *
	 * Constraint:
	 *     (sumAdtElement1=EffectFullExpression | sumAdtElement2=EffectFullExpression)
	 */
	protected void sequence_EffectFullSumValue(ISerializationContext context, EffectFullSumValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EffectFullValueBlock returns EffectFullValueBlock
	 *
	 * Constraint:
	 *     elements+=EffectFullValue+
	 */
	protected void sequence_EffectFullValueBlock(ISerializationContext context, EffectFullValueBlock semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Function returns EffectFullValueRef
	 *     EffectFullFunction returns EffectFullValueRef
	 *     EffectFullBodyContent returns EffectFullValueRef
	 *     EffectFullExpression returns EffectFullValueRef
	 *     EffectFullValueRef returns EffectFullValueRef
	 *
	 * Constraint:
	 *     value=[EffectFullValue|ID]
	 */
	protected void sequence_EffectFullValueRef(ISerializationContext context, EffectFullValueRef semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FPMLPackage.Literals.EFFECT_FULL_VALUE_REF__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FPMLPackage.Literals.EFFECT_FULL_VALUE_REF__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEffectFullValueRefAccess().getValueEffectFullValueIDTerminalRuleCall_3_0_1(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EffectFullValue returns EffectFullValue
	 *     Function returns EffectFullValue
	 *     EffectFullFunction returns EffectFullValue
	 *     EffectFullBodyContent returns EffectFullValue
	 *
	 * Constraint:
	 *     (name=ID value=EffectFullExpression)
	 */
	protected void sequence_EffectFullValue(ISerializationContext context, EffectFullValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FPMLPackage.Literals.EFFECT_FULL_FUNCTION_DEFINITION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FPMLPackage.Literals.EFFECT_FULL_FUNCTION_DEFINITION__NAME));
			if (transientValues.isValueTransient(semanticObject, FPMLPackage.Literals.EFFECT_FULL_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FPMLPackage.Literals.EFFECT_FULL_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEffectFullValueAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getEffectFullValueAccess().getValueEffectFullExpressionParserRuleCall_3_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     FunctionBodyPure returns EmptyFunctionBody
	 *     FunctionBodyEffectFull returns EmptyFunctionBody
	 *     EmptyFunctionBody returns EmptyFunctionBody
	 *
	 * Constraint:
	 *     {EmptyFunctionBody}
	 */
	protected void sequence_EmptyFunctionBody(ISerializationContext context, EmptyFunctionBody semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Function returns Equals
	 *     PureFunction returns Equals
	 *     PrimitiveFunction returns Equals
	 *     PrimitivePureFunction returns Equals
	 *     Equals returns Equals
	 *
	 * Constraint:
	 *     (type=IntegerType | type=StringType | type=BooleanType)
	 */
	protected void sequence_Equals(ISerializationContext context, Equals semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Function returns ExtractEffectFull
	 *     EffectFullFunction returns ExtractEffectFull
	 *     PrimitiveFunction returns ExtractEffectFull
	 *     EffectFullPrimitive returns ExtractEffectFull
	 *     EffectFullBodyContent returns ExtractEffectFull
	 *     PrimitiveEffectFullFunction returns ExtractEffectFull
	 *     ExtractEffectFull returns ExtractEffectFull
	 *
	 * Constraint:
	 *     data=[EffectFullData|ID]
	 */
	protected void sequence_ExtractEffectFull(ISerializationContext context, ExtractEffectFull semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FPMLPackage.Literals.EXTRACT_EFFECT_FULL__DATA) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FPMLPackage.Literals.EXTRACT_EFFECT_FULL__DATA));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExtractEffectFullAccess().getDataEffectFullDataIDTerminalRuleCall_2_0_1(), semanticObject.getData());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Function returns ExtractPure
	 *     PureFunction returns ExtractPure
	 *     PrimitiveFunction returns ExtractPure
	 *     PrimitivePureFunction returns ExtractPure
	 *     ExtractPure returns ExtractPure
	 *
	 * Constraint:
	 *     data=[PureData|ID]
	 */
	protected void sequence_ExtractPure(ISerializationContext context, ExtractPure semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FPMLPackage.Literals.EXTRACT_PURE__DATA) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FPMLPackage.Literals.EXTRACT_PURE__DATA));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExtractPureAccess().getDataPureDataIDTerminalRuleCall_2_0_1(), semanticObject.getData());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Function returns PureFunctionType
	 *     PureFunction returns PureFunctionType
	 *     Expression returns PureFunctionType
	 *     FunctionValue returns PureFunctionType
	 *
	 * Constraint:
	 *     value=PureLambda
	 */
	protected void sequence_FunctionValue(ISerializationContext context, PureFunctionType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FPMLPackage.Literals.PURE_FUNCTION_TYPE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FPMLPackage.Literals.PURE_FUNCTION_TYPE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFunctionValueAccess().getValuePureLambdaParserRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     IOType returns IOType
	 *     Type returns IOType
	 *     EffectFullType returns IOType
	 *
	 * Constraint:
	 *     type=Type
	 */
	protected void sequence_IOType(ISerializationContext context, IOType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FPMLPackage.Literals.IO_TYPE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FPMLPackage.Literals.IO_TYPE__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIOTypeAccess().getTypeTypeParserRuleCall_1_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Function returns IntPow
	 *     PureFunction returns IntPow
	 *     PrimitiveFunction returns IntPow
	 *     PrimitivePureFunction returns IntPow
	 *     IntPow returns IntPow
	 *
	 * Constraint:
	 *     {IntPow}
	 */
	protected void sequence_IntPow(ISerializationContext context, IntPow semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Function returns IntToString
	 *     PureFunction returns IntToString
	 *     PrimitiveFunction returns IntToString
	 *     PrimitivePureFunction returns IntToString
	 *     IntToString returns IntToString
	 *
	 * Constraint:
	 *     {IntToString}
	 */
	protected void sequence_IntToString(ISerializationContext context, IntToString semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Function returns IntegerType
	 *     PureFunction returns IntegerType
	 *     Expression returns IntegerType
	 *     IntValue returns IntegerType
	 *
	 * Constraint:
	 *     value=INT
	 */
	protected void sequence_IntValue(ISerializationContext context, IntegerType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FPMLPackage.Literals.INTEGER_TYPE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FPMLPackage.Literals.INTEGER_TYPE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIntValueAccess().getValueINTTerminalRuleCall_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ValueType returns IntegerType
	 *     Type returns IntegerType
	 *     IntegerType returns IntegerType
	 *
	 * Constraint:
	 *     type='int'
	 */
	protected void sequence_IntegerType(ISerializationContext context, IntegerType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FPMLPackage.Literals.INTEGER_TYPE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FPMLPackage.Literals.INTEGER_TYPE__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIntegerTypeAccess().getTypeIntKeyword_1_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Function returns LeftPairIO
	 *     EffectFullFunction returns LeftPairIO
	 *     PrimitiveFunction returns LeftPairIO
	 *     EffectFullPrimitive returns LeftPairIO
	 *     EffectFullBodyContent returns LeftPairIO
	 *     PrimitiveEffectFullFunction returns LeftPairIO
	 *     LeftPairIO returns LeftPairIO
	 *
	 * Constraint:
	 *     type=EffectFullAlgebraicType
	 */
	protected void sequence_LeftPairIO(ISerializationContext context, LeftPairIO semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FPMLPackage.Literals.LEFT_PAIR_IO__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FPMLPackage.Literals.LEFT_PAIR_IO__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLeftPairIOAccess().getTypeEffectFullAlgebraicTypeParserRuleCall_2_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Function returns LeftPair
	 *     PureFunction returns LeftPair
	 *     PrimitiveFunction returns LeftPair
	 *     PrimitivePureFunction returns LeftPair
	 *     LeftPair returns LeftPair
	 *
	 * Constraint:
	 *     type=PureAlgebraicType
	 */
	protected void sequence_LeftPair(ISerializationContext context, LeftPair semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FPMLPackage.Literals.LEFT_PAIR__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FPMLPackage.Literals.LEFT_PAIR__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLeftPairAccess().getTypePureAlgebraicTypeParserRuleCall_2_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Function returns LogicAnd
	 *     PureFunction returns LogicAnd
	 *     PrimitiveFunction returns LogicAnd
	 *     PrimitivePureFunction returns LogicAnd
	 *     LogicAnd returns LogicAnd
	 *
	 * Constraint:
	 *     {LogicAnd}
	 */
	protected void sequence_LogicAnd(ISerializationContext context, LogicAnd semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Function returns LogicOr
	 *     PureFunction returns LogicOr
	 *     PrimitiveFunction returns LogicOr
	 *     PrimitivePureFunction returns LogicOr
	 *     LogicOr returns LogicOr
	 *
	 * Constraint:
	 *     {LogicOr}
	 */
	protected void sequence_LogicOr(ISerializationContext context, LogicOr semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MainFunc returns MainFunc
	 *
	 * Constraint:
	 *     (returnType=UnitType functionBody=FunctionBodyEffectFull)
	 */
	protected void sequence_MainFunc(ISerializationContext context, MainFunc semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FPMLPackage.Literals.MAIN_FUNC__RETURN_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FPMLPackage.Literals.MAIN_FUNC__RETURN_TYPE));
			if (transientValues.isValueTransient(semanticObject, FPMLPackage.Literals.MAIN_FUNC__FUNCTION_BODY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FPMLPackage.Literals.MAIN_FUNC__FUNCTION_BODY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMainFuncAccess().getReturnTypeUnitTypeParserRuleCall_1_0(), semanticObject.getReturnType());
		feeder.accept(grammarAccess.getMainFuncAccess().getFunctionBodyFunctionBodyEffectFullParserRuleCall_5_0(), semanticObject.getFunctionBody());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Function returns MajorEquals
	 *     PureFunction returns MajorEquals
	 *     PrimitiveFunction returns MajorEquals
	 *     PrimitivePureFunction returns MajorEquals
	 *     MajorEquals returns MajorEquals
	 *
	 * Constraint:
	 *     {MajorEquals}
	 */
	protected void sequence_MajorEquals(ISerializationContext context, MajorEquals semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Function returns Major
	 *     PureFunction returns Major
	 *     PrimitiveFunction returns Major
	 *     PrimitivePureFunction returns Major
	 *     Major returns Major
	 *
	 * Constraint:
	 *     {Major}
	 */
	protected void sequence_Major(ISerializationContext context, Major semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Function returns MinorEquals
	 *     PureFunction returns MinorEquals
	 *     PrimitiveFunction returns MinorEquals
	 *     PrimitivePureFunction returns MinorEquals
	 *     MinorEquals returns MinorEquals
	 *
	 * Constraint:
	 *     {MinorEquals}
	 */
	protected void sequence_MinorEquals(ISerializationContext context, MinorEquals semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Function returns Minor
	 *     PureFunction returns Minor
	 *     PrimitiveFunction returns Minor
	 *     PrimitivePureFunction returns Minor
	 *     Minor returns Minor
	 *
	 * Constraint:
	 *     {Minor}
	 */
	protected void sequence_Minor(ISerializationContext context, Minor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Function returns Minus
	 *     PureFunction returns Minus
	 *     PrimitiveFunction returns Minus
	 *     PrimitivePureFunction returns Minus
	 *     Minus returns Minus
	 *
	 * Constraint:
	 *     {Minus}
	 */
	protected void sequence_Minus(ISerializationContext context, Minus semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Function returns Mod
	 *     PureFunction returns Mod
	 *     PrimitiveFunction returns Mod
	 *     PrimitivePureFunction returns Mod
	 *     Mod returns Mod
	 *
	 * Constraint:
	 *     {Mod}
	 */
	protected void sequence_Mod(ISerializationContext context, Mod semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     (elements+=PureBlock elements+=EffectFullBlock)
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Function returns Plus
	 *     PureFunction returns Plus
	 *     PrimitiveFunction returns Plus
	 *     PrimitivePureFunction returns Plus
	 *     Plus returns Plus
	 *
	 * Constraint:
	 *     (type=IntegerType | type=StringType)
	 */
	protected void sequence_Plus(ISerializationContext context, Plus semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Function returns PrimitivePrint
	 *     EffectFullFunction returns PrimitivePrint
	 *     PrimitiveFunction returns PrimitivePrint
	 *     EffectFullPrimitive returns PrimitivePrint
	 *     EffectFullBodyContent returns PrimitivePrint
	 *     PrimitiveEffectFullFunction returns PrimitivePrint
	 *     PrimitivePrint returns PrimitivePrint
	 *
	 * Constraint:
	 *     {PrimitivePrint}
	 */
	protected void sequence_PrimitivePrint(ISerializationContext context, PrimitivePrint semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PrimitiveFunction returns PrimitiveRandom
	 *     EffectFullPrimitive returns PrimitiveRandom
	 *     EffectFullBodyContent returns PrimitiveRandom
	 *     PrimitiveEffectFullValue returns PrimitiveRandom
	 *     PrimitiveRandom returns PrimitiveRandom
	 *
	 * Constraint:
	 *     {PrimitiveRandom}
	 */
	protected void sequence_PrimitiveRandom(ISerializationContext context, PrimitiveRandom semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Function returns PrimitiveReturn
	 *     EffectFullFunction returns PrimitiveReturn
	 *     PrimitiveFunction returns PrimitiveReturn
	 *     EffectFullPrimitive returns PrimitiveReturn
	 *     EffectFullBodyContent returns PrimitiveReturn
	 *     PrimitiveEffectFullFunction returns PrimitiveReturn
	 *     PrimitiveReturn returns PrimitiveReturn
	 *
	 * Constraint:
	 *     type=Type
	 */
	protected void sequence_PrimitiveReturn(ISerializationContext context, PrimitiveReturn semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FPMLPackage.Literals.PRIMITIVE_RETURN__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FPMLPackage.Literals.PRIMITIVE_RETURN__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPrimitiveReturnAccess().getTypeTypeParserRuleCall_2_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PrimitiveFunction returns PrimitiveTime
	 *     EffectFullPrimitive returns PrimitiveTime
	 *     EffectFullBodyContent returns PrimitiveTime
	 *     PrimitiveEffectFullValue returns PrimitiveTime
	 *     PrimitiveTime returns PrimitiveTime
	 *
	 * Constraint:
	 *     {PrimitiveTime}
	 */
	protected void sequence_PrimitiveTime(ISerializationContext context, PrimitiveTime semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ValueType returns PureAlgebraicType
	 *     Type returns PureAlgebraicType
	 *     PureAlgebraicType returns PureAlgebraicType
	 *
	 * Constraint:
	 *     (pureAdtElement1=ValueType (pureAdtElement2=PureSumTypeFactor | pureAdtElement2=PureProdTypeFactor))
	 */
	protected void sequence_PureAlgebraicType(ISerializationContext context, PureAlgebraicType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Function returns PureArgument
	 *     PureFunction returns PureArgument
	 *     Argument returns PureArgument
	 *     PureArgument returns PureArgument
	 *
	 * Constraint:
	 *     (type=ValueType name=ID)
	 */
	protected void sequence_PureArgument(ISerializationContext context, PureArgument semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FPMLPackage.Literals.PURE_ARGUMENT__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FPMLPackage.Literals.PURE_ARGUMENT__TYPE));
			if (transientValues.isValueTransient(semanticObject, FPMLPackage.Literals.ARGUMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FPMLPackage.Literals.ARGUMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPureArgumentAccess().getTypeValueTypeParserRuleCall_0_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getPureArgumentAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PureBlock returns PureBlock
	 *
	 * Constraint:
	 *     (elements+=PureDataBlock elements+=PureFunctionBlock)
	 */
	protected void sequence_PureBlock(ISerializationContext context, PureBlock semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PureDataBlock returns PureDataBlock
	 *
	 * Constraint:
	 *     (elements+=PureData* value=PureValueBlock)
	 */
	protected void sequence_PureDataBlock(ISerializationContext context, PureDataBlock semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PureData returns PureData
	 *
	 * Constraint:
	 *     (name=ID content=ValueType)
	 */
	protected void sequence_PureData(ISerializationContext context, PureData semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FPMLPackage.Literals.PURE_DATA__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FPMLPackage.Literals.PURE_DATA__NAME));
			if (transientValues.isValueTransient(semanticObject, FPMLPackage.Literals.PURE_DATA__CONTENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FPMLPackage.Literals.PURE_DATA__CONTENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPureDataAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getPureDataAccess().getContentValueTypeParserRuleCall_2_0(), semanticObject.getContent());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PureFunctionBlock returns PureFunctionBlock
	 *
	 * Constraint:
	 *     features+=PureFunctionDefinition+
	 */
	protected void sequence_PureFunctionBlock(ISerializationContext context, PureFunctionBlock semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PureFunctionDefinition returns PureFunctionDefinition
	 *     Function returns PureFunctionDefinition
	 *     PureFunction returns PureFunctionDefinition
	 *
	 * Constraint:
	 *     (returnType=ValueType name=ID arg=PureArgument higherOrderArg=AdditionalPureArgument? functionBody=FunctionBodyPure)
	 */
	protected void sequence_PureFunctionDefinition(ISerializationContext context, PureFunctionDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ValueType returns PureFunctionType
	 *     Type returns PureFunctionType
	 *     PureFunctionType returns PureFunctionType
	 *
	 * Constraint:
	 *     (argType=ValueType returnType=ValueType)
	 */
	protected void sequence_PureFunctionType(ISerializationContext context, PureFunctionType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FPMLPackage.Literals.PURE_FUNCTION_TYPE__ARG_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FPMLPackage.Literals.PURE_FUNCTION_TYPE__ARG_TYPE));
			if (transientValues.isValueTransient(semanticObject, FPMLPackage.Literals.PURE_FUNCTION_TYPE__RETURN_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FPMLPackage.Literals.PURE_FUNCTION_TYPE__RETURN_TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPureFunctionTypeAccess().getArgTypeValueTypeParserRuleCall_3_0(), semanticObject.getArgType());
		feeder.accept(grammarAccess.getPureFunctionTypeAccess().getReturnTypeValueTypeParserRuleCall_5_0(), semanticObject.getReturnType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PureLambda returns PureLambda
	 *
	 * Constraint:
	 *     ((arg=PureArgument functionBody=CompositionFunctionBodyPure) | functionBody=CompositionFunctionBodyPure)
	 */
	protected void sequence_PureLambda(ISerializationContext context, PureLambda semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PureProdTypeFactor returns PureProdTypeFactor
	 *
	 * Constraint:
	 *     adtElement=ValueType
	 */
	protected void sequence_PureProdTypeFactor(ISerializationContext context, PureProdTypeFactor semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FPMLPackage.Literals.PURE_PROD_TYPE_FACTOR__ADT_ELEMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FPMLPackage.Literals.PURE_PROD_TYPE_FACTOR__ADT_ELEMENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPureProdTypeFactorAccess().getAdtElementValueTypeParserRuleCall_1_0(), semanticObject.getAdtElement());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Function returns PureProdValue
	 *     PureFunction returns PureProdValue
	 *     Expression returns PureProdValue
	 *     PureProdValue returns PureProdValue
	 *
	 * Constraint:
	 *     (prodAdtElement1=Expression prodAdtElement2=Expression)
	 */
	protected void sequence_PureProdValue(ISerializationContext context, PureProdValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FPMLPackage.Literals.PURE_PROD_VALUE__PROD_ADT_ELEMENT1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FPMLPackage.Literals.PURE_PROD_VALUE__PROD_ADT_ELEMENT1));
			if (transientValues.isValueTransient(semanticObject, FPMLPackage.Literals.PURE_PROD_VALUE__PROD_ADT_ELEMENT2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FPMLPackage.Literals.PURE_PROD_VALUE__PROD_ADT_ELEMENT2));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPureProdValueAccess().getProdAdtElement1ExpressionParserRuleCall_2_0(), semanticObject.getProdAdtElement1());
		feeder.accept(grammarAccess.getPureProdValueAccess().getProdAdtElement2ExpressionParserRuleCall_4_0(), semanticObject.getProdAdtElement2());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PureSumTypeFactor returns PureSumTypeFactor
	 *
	 * Constraint:
	 *     adtElement=ValueType
	 */
	protected void sequence_PureSumTypeFactor(ISerializationContext context, PureSumTypeFactor semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FPMLPackage.Literals.PURE_SUM_TYPE_FACTOR__ADT_ELEMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FPMLPackage.Literals.PURE_SUM_TYPE_FACTOR__ADT_ELEMENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPureSumTypeFactorAccess().getAdtElementValueTypeParserRuleCall_1_0(), semanticObject.getAdtElement());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Function returns PureSumValue
	 *     PureFunction returns PureSumValue
	 *     Expression returns PureSumValue
	 *     PureSumValue returns PureSumValue
	 *
	 * Constraint:
	 *     (sumAdtElement1=Expression | sumAdtElement2=Expression)
	 */
	protected void sequence_PureSumValue(ISerializationContext context, PureSumValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PureValueBlock returns PureValueBlock
	 *
	 * Constraint:
	 *     elements+=PureValue+
	 */
	protected void sequence_PureValueBlock(ISerializationContext context, PureValueBlock semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Function returns PureValueRef
	 *     PureFunction returns PureValueRef
	 *     Expression returns PureValueRef
	 *     PureValueRef returns PureValueRef
	 *
	 * Constraint:
	 *     value=[PureValue|ID]
	 */
	protected void sequence_PureValueRef(ISerializationContext context, PureValueRef semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FPMLPackage.Literals.PURE_VALUE_REF__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FPMLPackage.Literals.PURE_VALUE_REF__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPureValueRefAccess().getValuePureValueIDTerminalRuleCall_3_0_1(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PureValue returns PureValue
	 *     Function returns PureValue
	 *     PureFunction returns PureValue
	 *
	 * Constraint:
	 *     (name=ID value=Expression)
	 */
	protected void sequence_PureValue(ISerializationContext context, PureValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FPMLPackage.Literals.PURE_FUNCTION_DEFINITION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FPMLPackage.Literals.PURE_FUNCTION_DEFINITION__NAME));
			if (transientValues.isValueTransient(semanticObject, FPMLPackage.Literals.PURE_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FPMLPackage.Literals.PURE_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPureValueAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getPureValueAccess().getValueExpressionParserRuleCall_3_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Function returns RightPairIO
	 *     EffectFullFunction returns RightPairIO
	 *     PrimitiveFunction returns RightPairIO
	 *     EffectFullPrimitive returns RightPairIO
	 *     EffectFullBodyContent returns RightPairIO
	 *     PrimitiveEffectFullFunction returns RightPairIO
	 *     RightPairIO returns RightPairIO
	 *
	 * Constraint:
	 *     type=EffectFullAlgebraicType
	 */
	protected void sequence_RightPairIO(ISerializationContext context, RightPairIO semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FPMLPackage.Literals.RIGHT_PAIR_IO__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FPMLPackage.Literals.RIGHT_PAIR_IO__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRightPairIOAccess().getTypeEffectFullAlgebraicTypeParserRuleCall_2_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Function returns RightPair
	 *     PureFunction returns RightPair
	 *     PrimitiveFunction returns RightPair
	 *     PrimitivePureFunction returns RightPair
	 *     RightPair returns RightPair
	 *
	 * Constraint:
	 *     type=PureAlgebraicType
	 */
	protected void sequence_RightPair(ISerializationContext context, RightPair semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FPMLPackage.Literals.RIGHT_PAIR__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FPMLPackage.Literals.RIGHT_PAIR__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRightPairAccess().getTypePureAlgebraicTypeParserRuleCall_2_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ValueType returns StringType
	 *     Type returns StringType
	 *     StringType returns StringType
	 *
	 * Constraint:
	 *     type='String'
	 */
	protected void sequence_StringType(ISerializationContext context, StringType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FPMLPackage.Literals.STRING_TYPE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FPMLPackage.Literals.STRING_TYPE__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStringTypeAccess().getTypeStringKeyword_1_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Function returns StringType
	 *     PureFunction returns StringType
	 *     Expression returns StringType
	 *     StringValue returns StringType
	 *
	 * Constraint:
	 *     value=STRING
	 */
	protected void sequence_StringValue(ISerializationContext context, StringType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FPMLPackage.Literals.STRING_TYPE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FPMLPackage.Literals.STRING_TYPE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStringValueAccess().getValueSTRINGTerminalRuleCall_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Function returns Times
	 *     PureFunction returns Times
	 *     PrimitiveFunction returns Times
	 *     PrimitivePureFunction returns Times
	 *     Times returns Times
	 *
	 * Constraint:
	 *     {Times}
	 */
	protected void sequence_Times(ISerializationContext context, Times semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ValueType returns UnitType
	 *     Type returns UnitType
	 *     UnitType returns UnitType
	 *
	 * Constraint:
	 *     type='Unit'
	 */
	protected void sequence_UnitType(ISerializationContext context, UnitType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FPMLPackage.Literals.UNIT_TYPE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FPMLPackage.Literals.UNIT_TYPE__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getUnitTypeAccess().getTypeUnitKeyword_1_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Function returns UnitType
	 *     PureFunction returns UnitType
	 *     UnitValue returns UnitType
	 *     Expression returns UnitType
	 *
	 * Constraint:
	 *     {UnitType}
	 */
	protected void sequence_UnitValue(ISerializationContext context, UnitType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Type returns VoidType
	 *     EffectFullType returns VoidType
	 *     VoidType returns VoidType
	 *
	 * Constraint:
	 *     {VoidType}
	 */
	protected void sequence_VoidType(ISerializationContext context, VoidType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
